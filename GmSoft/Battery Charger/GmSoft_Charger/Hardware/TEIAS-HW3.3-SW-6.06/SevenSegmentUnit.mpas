unit SevenSegmentUnit;

Procedure HC_Cs_Fnc(Chip : byte);
Procedure ClearDisplay(Chip : byte);
Procedure SPI2_Initialize();
Procedure Write7SegMessage(Msg : byte);
Procedure Write7SegDigit(_Data : LongInt; Chip, Status : byte);
Procedure Start_Screen_7Seg();
Procedure Pause_Ms(Value:word); external;



var

    Dsp_NegativePin               : sbit at RC4_bit;
    Dsp_CS1_Pin                   : sbit at RB4_bit;
    Dsp_CS2_Pin                   : sbit at RB6_bit;
    Dsp_LDG1_V_Pin                : sbit at RA10_bit;
    Dsp_LDR1_V_Pin                : sbit at RB7_bit;
    Dsp_LDG2_A_Pin                : sbit at RD14_bit;
    Dsp_LDR2_A_Pin                : sbit at RB8_bit;

const

NumberTable : array[0..46] Of char =(
      0xB7, // 0   0
      0xA0, // 1   1
      0xD5, // 2   2
      0xF1, // 3   3
      0xE2, // 4   4
      0x73, // 5   5
      0x77, // 6   6
      0xA1, // 7   7
      0xF7, // 8   8
      0xF3, // 9   9
      0x08, // .   10
      0x40, // -   11
      0xE7, // A   12
      0x76, // b   13
      0x54, // c   14
      0xF4, // d   15
      0x57, // E   16
      0x47, // F   17
      0x77, // G   18
      0x66, // h   19
      0x20, // I   20
      0xB0, // J   21
      0x16, // L   22
      0x64, // n   23
      0x74, // o   24
      0xC7, // P   25
      0x44, // r   26
      0x73, // S   27
      0x56, // t   28
      0x34, // u   29
      0xE2, // Y   30
      0xD5, // Z   31
      0x00, // boþ 32
      0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08);code;

      NormalMessage           = 0;
      LoadMessage             = 1;
      ErrorMessage            = 2;



implementation


//******************************************************************************
Procedure ClearDisplay(Chip : byte);
 begin

    HC_Cs_Fnc(Chip);

    SPI2_Write(0x00); Delay_us(10);
    SPI2_Write(0x00); Delay_us(10);
    SPI2_Write(0x00); Delay_us(10);
    SPI2_Write(0x00); Delay_us(10);

    HC_Cs_Fnc(Chip);



 end;
//******************************************************************************
Procedure SPI2_Initialize();
 begin
 
      SPI2_Init_Advanced
         (
          _SPI_MASTER,
          _SPI_8_BIT,
          _SPI_PRESCALE_SEC_1,
          _SPI_PRESCALE_PRI_16,
          _SPI_SS_DISABLE,
          _SPI_DATA_SAMPLE_MIDDLE,
          _SPI_CLK_IDLE_LOW,
          _SPI_IDLE_2_ACTIVE   // 04.07.2019 --> eskiden _SPI_ACTIVE_2_IDLE --> þimdi _SPI_IDLE_2_ACTIVE
         );
      
      {SPI2_Init();
      Delay_ms(100);}

 
 end;
//******************************************************************************
Procedure HC_Cs_Fnc(Chip : byte);
  begin

       case (Chip) of
          1: begin  // volt
               Dsp_CS1_Pin := 0;
               asm nop end;
               asm nop end;
               asm nop end;
               Dsp_CS1_Pin := 1;
             end;
          2: begin // akým
               Dsp_CS2_Pin := 0;
               asm nop end;
               asm nop end;
               asm nop end;
               Dsp_CS2_Pin := 1;
             end;

       end;

  end;
//******************************************************************************
Procedure Write7SegMessage(Msg : byte);
var Dig1,Dig2,Dig3,Dig4,Dig5,Dig6,Dig7,Dig8 : byte;
 begin
      
      if (Msg = ErrorMessage) then
        begin
            Dig1 := 10; // .
            Dig2 := 26; // r
            Dig3 := 26; // r
            Dig4 := 16; // E
            Dig5 := 11; // -
            Dig6 := 11; // -
            Dig7 := 11; // -
            Dig8 := 11; // -
        end else
      if (Msg = LoadMessage) then
        begin
            Dig1 := 15; // d
            Dig2 := 12; // a
            Dig3 := 24; // o
            Dig4 := 22; // L
            Dig5 := 10; // .
            Dig6 := 10; // .
            Dig7 := 10; // .
            Dig8 := 10; // .
        end;
      
      
      HC_Cs_Fnc(1);
      
      SPI2_Write(NumberTable[Dig1]);
      SPI2_Write(NumberTable[Dig2]);
      SPI2_Write(NumberTable[Dig3]);
      SPI2_Write(NumberTable[Dig4]);
      
      HC_Cs_Fnc(1);
      
      asm
        ClrWDT;
      end;
      
      HC_Cs_Fnc(2);

      SPI2_Write(NumberTable[Dig5]);
      SPI2_Write(NumberTable[Dig6]);
      SPI2_Write(NumberTable[Dig7]);
      SPI2_Write(NumberTable[Dig8]);

      HC_Cs_Fnc(2);
 
 end;
//******************************************************************************
Procedure Write7SegDigit(_Data : LongInt; Chip, Status : byte);
var Temp_Byte, Dig1, Dig2, Dig3, Dig4 : byte;
  begin
       
       Temp_Byte := 0;
       Dig1      := 0;
       Dig2      := 0;
       Dig3      := 0;
       Dig4      := 0;
       
       asm clrwdt; end;

         if (Status =0) then
          begin
             Dig4      := _Data div 1000;
             if Dig4 < 1 then Dig4 := 32; // boþ karakter
             Temp_Byte := _Data div 100;
             Dig3      := Temp_Byte mod 10;
             Temp_Byte := _Data mod 100;
             Dig2      := Temp_Byte div 10;
             Dig1      := _Data mod 10;
          end else
         if (Status = 10) then
           begin
               Dig1 := _Data;
               Dig2 := _Data;
               Dig3 := _Data;
               Dig4 := _Data;
           end;


       HC_Cs_Fnc(Chip);
       
       asm clrwdt; end;

       SPI2_Write(NumberTable[Dig1]);
       
       asm clrwdt; end;

       if (Status = 10) then
            SPI2_Write(NumberTable[Dig2])
       else SPI2_Write(NumberTable[Dig2] or NumberTable[10]);

       SPI2_Write(NumberTable[Dig3]);
       SPI2_Write(NumberTable[Dig4]);

       HC_Cs_Fnc(Chip);
       
       asm clrwdt; end;





  end;
//******************************************************************************
Procedure Start_Screen_7Seg();
var Test_Counter : byte;
 begin
      Test_Counter := 0;
      
      Dsp_NegativePin := 1;


      For Test_Counter := 0 to 9 do
        begin

          asm clrwdt; end;

          Write7SegDigit(Test_Counter,1,10);
          Write7SegDigit(Test_Counter,2,10);

          Pause_ms(175);

        end;

      Write7SegDigit(8,1,10);
      Write7SegDigit(8,2,10);

      Pause_ms(500);
      
      asm clrwdt; end;

      ClearDisplay(1);
      ClearDisplay(2);
      
      Dsp_NegativePin := 0;

 end;
//******************************************************************************


end.