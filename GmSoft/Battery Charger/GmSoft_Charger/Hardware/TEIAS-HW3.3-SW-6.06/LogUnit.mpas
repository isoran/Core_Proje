unit LogUnit;
uses Language;
Const

     Black       = 1; external;// GLCD Text Colour black
     White       = 0; external;// GLCD_Text Colour white
     
     Row1        = 0; external;
     Row2        = 1; external;
     Row3        = 2; external;
     Row4        = 3; external;
     Row5        = 4; external;
     Row6        = 5; external;
     Row7        = 6; external;
     Row8        = 7; external;
     English     = 2; external;
     Turkish     = 3; external;
     
     EE_LogListArrayEeAddr                 = 8384638;

EeAddr_Log_Clock : array [1..128] of LongInt = (
8384680,8384682,8384684,8384686,8384688,8384690,8384692,8384694,8384696,8384698,
8384700,8384702,8384704,8384706,8384708,8384710,8384712,8384714,8384716,8384718,
8384720,8384722,8384724,8384726,8384728,8384730,8384732,8384734,8384736,8384738,
8384740,8384742,8384744,8384746,8384748,8384750,8384752,8384754,8384756,8384758,
8384760,8384762,8384764,8384766,8384768,8384770,8384772,8384774,8384776,8384778,
8384780,8384782,8384784,8384786,8384788,8384790,8384792,8384794,8384796,8384798,
8384800,8384802,8384804,8384806,8384808,8384810,8384812,8384814,8384816,8384818,
8384820,8384822,8384824,8384826,8384828,8384830,8384832,8384834,8384836,8384838,
8384840,8384842,8384844,8384846,8384848,8384850,8384852,8384854,8384856,8384858,
8384860,8384862,8384864,8384866,8384868,8384870,8384872,8384874,8384876,8384878,
8384880,8384882,8384884,8384886,8384888,8384890,8384892,8384894,8384896,8384898,
8384900,8384902,8384904,8384906,8384908,8384910,8384912,8384914,8384916,8384918,
8384920,8384922,8384924,8384926,8384928,8384930,8384932,8384934
);code;far;
EeAddr_Log_DateHi : array [1..128] of LongInt = (
8384934,8384936,8384938,8384940,8384942,8384944,8384946,8384948,8384950,8384952,
8384954,8384956,8384958,8384960,8384962,8384964,8384966,8384968,8384970,8384972,
8384974,8384976,8384978,8384980,8384982,8384984,8384986,8384988,8384990,8384992,
8384994,8384996,8384998,8385000,8385002,8385004,8385006,8385008,8385010,8385012,
8385014,8385016,8385018,8385020,8385022,8385024,8385026,8385028,8385030,8385032,
8385034,8385036,8385038,8385040,8385042,8385044,8385046,8385048,8385050,8385052,
8385054,8385056,8385058,8385060,8385062,8385064,8385066,8385068,8385070,8385072,
8385074,8385076,8385078,8385080,8385082,8385084,8385086,8385088,8385090,8385092,
8385094,8385096,8385098,8385100,8385102,8385104,8385106,8385108,8385110,8385112,
8385114,8385116,8385118,8385120,8385122,8385124,8385126,8385128,8385130,8385132,
8385134,8385136,8385138,8385140,8385142,8385144,8385146,8385148,8385150,8385152,
8385154,8385156,8385158,8385160,8385162,8385164,8385166,8385168,8385170,8385172,
8385174,8385176,8385178,8385180,8385182,8385184,8385186,8385188
);code;far;
EeAddr_Log_DateLo : array [1..128] of LongInt = (
8385190,8385192,8385194,8385196,8385198,8385200,8385202,8385204,8385206,8385208,
8385210,8385212,8385214,8385216,8385218,8385220,8385222,8385224,8385226,8385228,
8385230,8385232,8385234,8385236,8385238,8385240,8385242,8385244,8385246,8385248,
8385250,8385252,8385254,8385256,8385258,8385260,8385262,8385264,8385266,8385268,
8385270,8385272,8385274,8385276,8385278,8385280,8385282,8385284,8385286,8385288,
8385290,8385292,8385294,8385296,8385298,8385300,8385302,8385304,8385306,8385308,
8385310,8385312,8385314,8385316,8385318,8385320,8385322,8385324,8385326,8385328,
8385330,8385332,8385334,8385336,8385338,8385340,8385342,8385344,8385346,8385348,
8385350,8385352,8385354,8385356,8385358,8385360,8385362,8385364,8385366,8385368,
8385370,8385372,8385374,8385376,8385378,8385380,8385382,8385384,8385386,8385388,
8385390,8385392,8385394,8385396,8385398,8385400,8385402,8385404,8385406,8385408,
8385410,8385412,8385414,8385416,8385418,8385420,8385422,8385424,8385426,8385428,
8385430,8385432,8385434,8385436,8385438,8385440,8385442,8385444
);code;far;
EeAddr_Log_Event : array [1..128] of LongInt = (
8385446,8385448,8385450,8385452,8385454,8385456,8385458,8385460,8385462,8385464,
8385466,8385468,8385470,8385472,8385474,8385476,8385478,8385480,8385482,8385484,
8385486,8385488,8385490,8385492,8385494,8385496,8385498,8385500,8385502,8385504,
8385506,8385508,8385510,8385512,8385514,8385516,8385518,8385520,8385522,8385524,
8385526,8385528,8385530,8385532,8385534,8385536,8385538,8385540,8385542,8385544,
8385546,8385548,8385550,8385552,8385554,8385556,8385558,8385560,8385562,8385564,
8385566,8385568,8385570,8385572,8385574,8385576,8385578,8385580,8385582,8385584,
8385586,8385588,8385590,8385592,8385594,8385596,8385598,8385600,8385602,8385604,
8385606,8385608,8385610,8385612,8385614,8385616,8385618,8385620,8385622,8385624,
8385626,8385628,8385630,8385632,8385634,8385636,8385638,8385640,8385642,8385644,
8385646,8385648,8385650,8385652,8385654,8385656,8385658,8385660,8385662,8385664,
8385666,8385668,8385670,8385672,8385674,8385676,8385678,8385680,8385682,8385684,
8385686,8385688,8385690,8385692,8385694,8385696,8385698,8385700
);code;far;


Event_AcHigh  = 10;
Event_AcLow   = 11;
Event_DcHigh  = 12;
Event_DcLow   = 13;
Event_Pleak   = 14;
Event_Nleak   = 15;
Event_Blimit  = 16;
Event_Rlimit  = 17;
Event_FanFlt  = 18;
Event_HighTmp = 19;
Event_AcMCB   = 20;
Event_LoadMCB = 21;
Event_BattMCB = 22;
Event_RedFlt  = 23;
Event_DeepFlt = 24;
Event_RedHigT = 25;
Event_GTTFlt  = 26;
Event_ACMulFlt= 27;
Event_RLYFlt  = 28;



var

    Ok_Button           : sbit ; sfr; external;
    Down_Button         : sbit ; sfr; external;
    Up_Button           : sbit ; sfr; external;
    Hidden_Button       : sbit ; sfr; external;
    MCU_State_LED       : sbit ; sfr; external;

AcHighFaultBit,AcLowFaultBit,DcHighBit,DcLowBit,Pos_Leakage_bit,Neg_Leakage_bit,
BattAmpsLimitBit,RedAmpsLimitBit,FanFaultBit,TempHighBit,Ac_MCB_Bit,Load_MCB_Bit,
Batt_MCB_Bit,RedFaultBit,DDschargeBit,HighTempBit,Red_HighTemp : bit; external;
ThryCommFault,AcCommFault,RlyCommFault : byte; external;
Minutes, Hours, Day, Month, Year, Seconds, Week : short; external;
P_LeakBit,N_LeakBit,FanFltBit : bit;external;

Log_Array     : byte;
LogBit_AcHigh, LogBit_AcLow,LogBit_DcHigh,LogBit_DcLow,LogBit_Pleak,LogBit_Nleak,LogBit_Blimit,LogBit_Rlimit,
LogBit_FanFault,LogBit_AcMCB,LogBit_LoadMCB,LogBit_BatMCB,LogBit_HighTemp,LogBit_RedFault,LogBit_DdschFault,
LogBit_RedHighTemp,LogBit_RlyCommFault,LogBit_GTTCommFault : bit;

Log_Clock, Log_Date     : word;

Read_LogClock  :array [1..128] of word;
Read_LogDateHi, Read_LogDateLo :array [1..128] of word;
Read_LogEvent :array [1..128] of word;
Hour_Text : array [1..6] of char;
Day_Text : array [1..11] of char;
Event_Text : array[1..5] of char;
MenuExit : byte; external;


Procedure LogBit_Config();
Procedure Log_Saved();
Procedure Log_Settings();
Procedure Pause_Ms(Value:word); external;


implementation

//*********************************************************************
Procedure LogBit_Config();
 begin
      
      Log_Array              := EEPROM_Read(EE_LogListArrayEeAddr);
      Pause_ms(50);
      asm
        clrwdt;
      end;
      
      LogBit_AcHigh          := 0;
      LogBit_AcLow           := 0;
      LogBit_DcHigh          := 0;
      LogBit_DcLow           := 0;
      LogBit_Pleak           := 0;
      LogBit_Nleak           := 0;
      LogBit_Rlimit          := 0;
      LogBit_Blimit          := 0;
      LogBit_FanFault        := 0;
      LogBit_AcMCB           := 0;
      LogBit_LoadMCB         := 0;
      LogBit_BatMCB          := 0;
      LogBit_HighTemp        := 0;
      LogBit_RedFault        := 0;
      LogBit_DdschFault      := 0;
      LogBit_RedHighTemp     := 0;
      LogBit_RlyCommFault    := 0;
      //LogBit_AcMultCommFault := 0;
      LogBit_GTTCommFault    := 0;
      Log_Clock              := 0;
      Log_Date               := 0;
      Hour_Text              := '      ';
      Day_Text               := '           ';
      Event_Text             := '     ';
 
 end;
//*********************************************************************
Procedure LogData_Write(Log_Hour,Log_Minute,Log_Day,Log_Month,Log_Year,Log_Event,LogArray : byte);
var Temp_Word : word;
 begin
      
      
      EEPROM_Write(EeAddr_Log_Event[LogArray],Log_Event);   // olayý kaydet
      while (WR_bit) do begin end; // write/erase cycle waiting

      asm clrwdt; end;

      Pause_ms(10);
      
      
      Temp_Word := 0;
      
      Log_Clock := Log_Hour;
      Temp_Word := Log_Clock * 100;
      Log_Clock := Temp_Word + Log_Minute;  // saat ve dakikayý birleþtirdik yani 15:19' u 1519 olarak yazdýk
      
      Log_Date  := Log_Day;
      Temp_Word := Log_Date * 100;
      Log_Date  := Temp_Word + Log_Month;  // gün ve ayý birleþtirdik yani 02.03' ü 0203 olarak yazdýk
      
      EEPROM_Write(EeAddr_Log_Clock[LogArray],Log_Clock); // olay saatini kaydet
      while (WR_bit) do begin end; // write/erase cycle waiting
      
      asm clrwdt; end;
      
      Pause_ms(10);
      
      EEPROM_Write(EeAddr_Log_DateHi[LogArray],Log_Date);  // olay tarihini gün ve ay olarak kaydet
      while (WR_bit) do begin end; // write/erase cycle waiting

      asm clrwdt; end;

      Pause_ms(10);
      
      EEPROM_Write(EeAddr_Log_DateLo[LogArray],Log_Year);   // olay tarihinin yýlýný kaydet
      while (WR_bit) do begin end; // write/erase cycle waiting

      asm clrwdt; end;

      Pause_ms(10);
      
      EEPROM_Write(EE_LogListArrayEeAddr,Log_Array);
      while (WR_bit) do begin end; // write/erase cycle waiting

      asm clrwdt; end;

      Pause_ms(10);
      


      
 
 end;
//*********************************************************************
Procedure Log_Saved();
 begin

      if (Log_Array < 1) then Log_Array := 1;

      if (LogBit_AcHigh = 0) then   // ac yüksek için log
        begin
             if (AcHighFaultBit = 1) then
               begin
                    LogBit_AcHigh := 1; // alarm yeniden gelene kadar burayý yapma
                    LogData_Write(Hours,Minutes,Day,Month,Year,Event_AcHigh,Log_Array);
                    Log_Array := Log_Array + 1;
                    if (Log_Array > 128) then Log_Array := 1;

               end;

        end;

      if (LogBit_AcLow = 0) then   // ac düþük için log
        begin

             if (AcLowFaultBit = 1) then
               begin
                    LogBit_AcLow := 1; // alarm yeniden gelene kadar burayý yapma
                    LogData_Write(Hours,Minutes,Day,Month,Year,Event_AcLow,Log_Array);
                    Log_Array := Log_Array + 1;
                    if (Log_Array > 128) then Log_Array := 1;

               end;

        end;
 
      if (LogBit_DcHigh = 0) then   // dc Yüksek için log
        begin

             if (DcHighBit = 1) then
               begin
                    LogBit_DcHigh := 1; // alarm yeniden gelene kadar burayý yapma
                    LogData_Write(Hours,Minutes,Day,Month,Year,Event_DcHigh,Log_Array);
                    Log_Array := Log_Array + 1;
                    if (Log_Array > 128) then Log_Array := 1;

               end;

        end;
 
 
       if (LogBit_DcLow = 0) then   // dc düþük için log
        begin

             if (DcLowBit = 1) then
               begin
                    LogBit_DcLow := 1; // alarm yeniden gelene kadar burayý yapma
                    LogData_Write(Hours,Minutes,Day,Month,Year,Event_DcLow,Log_Array);
                    Log_Array := Log_Array + 1;
                    if (Log_Array > 128) then Log_Array := 1;

               end;

        end;
 
       if (LogBit_Pleak = 0) then   // +kacak için log
        begin

             if (P_LeakBit = 1) then
               begin
                    LogBit_Pleak := 1; // alarm yeniden gelene kadar burayý yapma
                    LogData_Write(Hours,Minutes,Day,Month,Year,Event_Pleak,Log_Array);
                    Log_Array := Log_Array + 1;
                    if (Log_Array > 128) then Log_Array := 1;

               end;

        end;
 
       if (LogBit_Nleak = 0) then   // -kacak için log
        begin

             if (N_LeakBit = 1) then
               begin
                    LogBit_Nleak := 1; // alarm yeniden gelene kadar burayý yapma
                    LogData_Write(Hours,Minutes,Day,Month,Year,Event_Nleak,Log_Array);
                    Log_Array := Log_Array + 1;
                    if (Log_Array > 128) then Log_Array := 1;

               end;

        end;
 
       if (LogBit_Blimit = 0) then   // akü limit için log
        begin

             if (BattAmpsLimitBit = 1) then
               begin
                    LogBit_Blimit := 1; // alarm yeniden gelene kadar burayý yapma
                    LogData_Write(Hours,Minutes,Day,Month,Year,Event_Blimit,Log_Array);
                    Log_Array := Log_Array + 1;
                    if (Log_Array > 128) then Log_Array := 1;

               end;

        end;
 
       if (LogBit_Rlimit = 0) then   // redresör limit için log
        begin

             if (RedAmpsLimitBit = 1) then
               begin
                    LogBit_Rlimit := 1; // alarm yeniden gelene kadar burayý yapma
                    LogData_Write(Hours,Minutes,Day,Month,Year,Event_Rlimit,Log_Array);
                    Log_Array := Log_Array + 1;
                    if (Log_Array > 128) then Log_Array := 1;

               end;

        end;
 
       if (LogBit_FanFault = 0) then   // Fan Hata için log
        begin

             if (FanFltBit = 1) then
               begin
                    LogBit_FanFault := 1; // alarm yeniden gelene kadar burayý yapma
                    LogData_Write(Hours,Minutes,Day,Month,Year,Event_FanFlt,Log_Array);
                    Log_Array := Log_Array + 1;
                    if (Log_Array > 128) then Log_Array := 1;

               end;

        end;
 
       if (LogBit_HighTemp = 0) then   // Aþýrý Sýcaklýk için log
        begin

             if (HighTempBit = 1) then
               begin
                    LogBit_HighTemp := 1; // alarm yeniden gelene kadar burayý yapma
                    LogData_Write(Hours,Minutes,Day,Month,Year,Event_HighTmp,Log_Array);
                    Log_Array := Log_Array + 1;
                    if (Log_Array > 128) then Log_Array := 1;

               end;

        end;
 
       if (LogBit_AcMCB = 0) then   // Ac MCB için log
        begin

             if (Ac_MCB_Bit = 1) then
               begin
                    LogBit_AcMCB := 1; // alarm yeniden gelene kadar burayý yapma
                    LogData_Write(Hours,Minutes,Day,Month,Year,Event_AcMCB,Log_Array);
                    Log_Array := Log_Array + 1;
                    if (Log_Array > 128) then Log_Array := 1;

               end;

        end;
 
 
       if (LogBit_LoadMCB = 0) then   // Load MCB için log
        begin

             if (Load_MCB_Bit = 1) then
               begin
                    LogBit_LoadMCB := 1; // alarm yeniden gelene kadar burayý yapma
                    LogData_Write(Hours,Minutes,Day,Month,Year,Event_LoadMCB,Log_Array);
                    Log_Array := Log_Array + 1;
                    if (Log_Array > 128) then Log_Array := 1;

               end;

        end;
 
       if (LogBit_BatMCB = 0) then   // Load MCB için log
        begin

             if (Batt_MCB_Bit = 1) then
               begin
                    LogBit_BatMCB := 1; // alarm yeniden gelene kadar burayý yapma
                    LogData_Write(Hours,Minutes,Day,Month,Year,Event_BattMCB,Log_Array);
                    Log_Array := Log_Array + 1;
                    if (Log_Array > 128) then Log_Array := 1;

               end;

        end;
 
       if (LogBit_RedFault = 0) then   // redresör hata için log
        begin

             if (RedFaultBit = 1) then
               begin
                    LogBit_RedFault := 1; // alarm yeniden gelene kadar burayý yapma
                    LogData_Write(Hours,Minutes,Day,Month,Year,Event_RedFlt,Log_Array);
                    Log_Array := Log_Array + 1;
                    if (Log_Array > 128) then Log_Array := 1;

               end;

        end;
 
       if (LogBit_DdschFault = 0) then   // derin deþarj hata için log
        begin

             if (DDschargeBit = 1) then
               begin
                    LogBit_DdschFault := 1; // alarm yeniden gelene kadar burayý yapma
                    LogData_Write(Hours,Minutes,Day,Month,Year,Event_DeepFlt,Log_Array);
                    Log_Array := Log_Array + 1;
                    if (Log_Array > 128) then Log_Array := 1;

               end;

        end;
 
       if (LogBit_RedHighTemp = 0) then   // redresör aþýrý sýcaklýk koruma için log
        begin

             if (Red_HighTemp = 1) then
               begin
                    LogBit_RedHighTemp := 1; // alarm yeniden gelene kadar burayý yapma
                    LogData_Write(Hours,Minutes,Day,Month,Year,Event_RedHigT,Log_Array);
                    Log_Array := Log_Array + 1;
                    if (Log_Array > 128) then Log_Array := 1;

               end;

        end;
        
       if (LogBit_GTTCommFault = 0) then   // GTT-I kartý hab. hata için log
        begin

             if (ThryCommFault = 1) then
               begin
                    LogBit_GTTCommFault := 1; // alarm yeniden gelene kadar burayý yapma
                    LogData_Write(Hours,Minutes,Day,Month,Year,Event_GTTFlt,Log_Array);
                    Log_Array := Log_Array + 1;
                    if (Log_Array > 128) then Log_Array := 1;

               end;

        end;
        
       {if (LogBit_AcMultCommFault = 0) then   // Ac Multimetre kartý hab. hata için log
        begin

             if (AcCommFault = 1) then
               begin
                    LogBit_AcMultCommFault := 1; // alarm yeniden gelene kadar burayý yapma
                    LogData_Write(Hours,Minutes,Day,Month,Year,Event_ACMulFlt,Log_Array);
                    Log_Array := Log_Array + 1;
                    if (Log_Array > 128) then Log_Array := 1;

               end;

        end;}
        
       if (LogBit_RlyCommFault = 0) then   // Röle kartý hab. hata için log
        begin

             if (RlyCommFault = 1) then
               begin
                    LogBit_RlyCommFault := 1; // alarm yeniden gelene kadar burayý yapma
                    LogData_Write(Hours,Minutes,Day,Month,Year,Event_RLYFlt,Log_Array);
                    Log_Array := Log_Array + 1;
                    if (Log_Array > 128) then Log_Array := 1;

               end;

        end;
        
        
 
 end;
//**************************************************************
Procedure Log_Partition(LogPart_Hour,LogPart_DayMonth,LogPart_Year,LogPart_Event :word;);
var Temp_Byte : byte;
    Log_Phour,Log_Pmin,Log_PDay,Log_PMonth,Log_PYear,Log_Pevent : byte;
    Temp_Text1,Temp_Text2,Temp_Text3,Temp_Text4 : string[5];
 begin

      Temp_Byte  := 0;
      Temp_Text1 := '     ';
      Temp_Text2 := '     ';
      Temp_Text3 := '     ';
      Temp_Text4 := '     ';

      WordToStr(LogPart_Hour,Temp_Text1);
      WordToStr(LogPart_DayMonth,Temp_Text2);
      WordToStr(LogPart_Year,Temp_Text3);
      WordToStr(LogPart_Event,Temp_Text4);
      
      if (LogPart_Event <> 0xFFFF) then   // olay olmuþsa yaz, yoksa yazma
        begin
          Hour_Text[1]  := Temp_Text1[1];
          Hour_Text[2]  := Temp_Text1[2];
          Hour_Text[3]  := ':';
          Hour_Text[4]  := Temp_Text1[3];
          Hour_Text[5]  := Temp_Text1[4];
          Hour_Text[6]  := '-';
          Day_Text[1]   := Temp_Text2[1];
          Day_Text[2]   := Temp_Text2[2];
          Day_Text[3]   := '.';
          Day_Text[4]   := Temp_Text2[3];
          Day_Text[5]   := Temp_Text2[4];
          Day_Text[6]   := '.';
          Day_Text[7]   := '2';
          Day_Text[8]   := '0';
          Day_Text[9]   := Temp_Text3[3];
          Day_Text[10]  := Temp_Text3[4];
          Day_Text[11]  := '=';
          event_Text[1]  := '0';
          event_Text[2]  := 'x';
          event_Text[3]  := Temp_Text4[3];
          event_Text[4]  := Temp_Text4[4];
        end else
        begin
          Hour_Text[1]   := ' ';
          Hour_Text[2]   := ' ';
          Hour_Text[3]   := ' ';
          Hour_Text[4]   := ' ';
          Hour_Text[5]   := ' ';
          Hour_Text[6]   := ' ';
          Day_Text[1]    := ' ';
          Day_Text[2]    := ' ';
          Day_Text[3]    := ' ';
          Day_Text[4]    := ' ';
          Day_Text[5]    := ' ';
          Day_Text[6]    := ' ';
          Day_Text[7]    := ' ';
          Day_Text[8]    := ' ';
          Day_Text[9]    := ' ';
          Day_Text[10]   := ' ';
          Day_Text[11]   := ' ';
          event_Text[1]  := ' ';
          event_Text[2]  := ' ';
          event_Text[3]  := ' ';
          event_Text[4]  := ' ';
        end;
      


      

 end;
//**************************************************************
Procedure Log_Glcd_Write(var Text1,Text2,Text3 : string[11];Coloumn1,Coloumn2,Coloumn3,Row,Colour : byte);
 begin
      Glcd_Write_Text(Text1,Coloumn1,Row,Colour);
      Glcd_Write_Text(Text2,Coloumn2,Row,Colour);
      Glcd_Write_Text(Text3,Coloumn3,Row,Colour);
 end;
//**************************************************************
Procedure Log_Erase();
var EraseMenuExit,Erase_TempByte : byte;
  begin
       
       EraseMenuExit  := 0;
       Erase_TempByte := 0;
       Glcd_Fill(0x00);
       
       
       Glcd_Write_Text('Olaylar Silinsin mi? ',0,Row1,Black);
       Glcd_Write_Text('OK Buton   = Evet    ',0,Row2,Black);
       Glcd_Write_Text('Down Buton = Hayýr   ',0,Row3,Black);
       
       while (EraseMenuExit =0) do
         begin
         
              asm
                clrwdt;
              end;
         
              if (Ok_Button=0) then
                begin
                    while (Ok_Button =0) do
                      begin
                          asm
                            clrwdt;
                          end;
                      end;
                    
                    Glcd_Write_Text('Olaylar Siliniyor... ',0,Row4,Black);

                    Erase_TempByte := 0;
                    for Erase_TempByte := 1 to 128 do
                      begin

                           asm clrwdt; end;

                           EEPROM_Write(EeAddr_Log_Clock[Erase_TempByte],0xFFFF); // olay saatlerini sil
                           while (WR_bit) do begin end; // write/erase cycle waiting

                           Pause_ms(10);

                           asm clrwdt; end;
                           
                           EEPROM_Write(EeAddr_Log_DateHi[Erase_TempByte],0xFFFF); // olay tarihini
                           while (WR_bit) do begin end; // write/erase cycle waiting

                           Pause_ms(10);

                           asm clrwdt; end;
                           
                           EEPROM_Write(EeAddr_Log_DateLo[Erase_TempByte],0xFFFF); // olay tarihini sil
                           while (WR_bit) do begin end; // write/erase cycle waiting

                           Pause_ms(10);

                           asm clrwdt; end;
                           
                           EEPROM_Write(EeAddr_Log_Event[Erase_TempByte],0xFFFF); // olaylarý sil
                           while (WR_bit) do begin end; // write/erase cycle waiting

                           Pause_ms(10);

                           asm clrwdt; end;

                           EEPROM_Write(EE_LogListArrayEeAddr,0); // olaylarý listesini sil
                           while (WR_bit) do begin end; // write/erase cycle waiting

                           Pause_ms(10);

                           asm clrwdt; end;

                      end;
                    
                    
                    Glcd_Write_Text('Liste Temizlendi ... ',0,Row4,Black);
                    
                    Pause_ms(250);
                    asm clrwdt; end;
                    Pause_ms(250);
                    asm clrwdt; end;
                    Pause_ms(250);
                    asm clrwdt; end;
                    Pause_ms(250);
                    asm clrwdt; end;
                    
                    EraseMenuExit := 1;
                    
                    
                end else
              if (Down_Button =0) then
                begin
                    while (Down_Button =0) do
                      begin
                          asm
                            clrwdt;
                          end;
                      end;
                    EraseMenuExit := 1;
                    Glcd_Write_Text('Ýptal Edildi...     ',0,Row4,Black);
                    Pause_ms(250);
                    asm clrwdt; end;
                    Pause_ms(250);
                    asm clrwdt; end;
                    Pause_ms(250);
                    asm clrwdt; end;
                    Pause_ms(250);
                    asm clrwdt; end;
                end;
         
         end;
       
         Glcd_Fill(0x00);
         
       
  end;
//**************************************************************
Procedure Log_Settings();
var Read_TempByte : byte;
    Read_LogArray : byte;
    List_Text     : string[3];
    Log_Page      : short;
    i             : byte;
 begin
      asm clrwdt; end;
      Glcd_Fill(0x00);
      Log_Page        := 1;
      MenuExit        := 0;
      List_Text       := '   ';

      Glcd_Write_Text(Title_LogMenu,0,Row1,Black);
      Glcd_Write_Text(SubTitle_LogRead,0,Row2,Black);


      Read_TempByte    := 0;
      i                := 0;
      
      Log_Array              := EEPROM_Read(EE_LogListArrayEeAddr);
      Pause_ms(50);
      
      asm
        clrwdt;
      end;

      for Read_TempByte := 1 to 128 do
        begin

             asm clrwdt; end;
             
             Read_LogEvent[Read_TempByte] := EEPROM_Read(EeAddr_Log_Event[Read_TempByte]); // önce olay var mý ona bak
             Pause_ms(10);
             
             Read_LogClock[Read_TempByte] := EEPROM_Read(EeAddr_Log_Clock[Read_TempByte]);
             Pause_ms(10);

             asm clrwdt; end;

             Read_LogDateHi[Read_TempByte] := EEPROM_Read(EeAddr_Log_DateHi[Read_TempByte]);
             Pause_ms(10);

             asm clrwdt; end;

             Read_LogDateLo[Read_TempByte] := EEPROM_Read(EeAddr_Log_DateLo[Read_TempByte]);
             Pause_ms(10);

             asm clrwdt; end;


        end;


      ByteToStr(Log_Array, List_Text);
      Glcd_Write_Text(List_Text,0,Row4,Black);
      Glcd_Write_Text('/128-List',20,Row4,Black);
      
      i:= 0;
      for i:= 1 to 10 do
        begin
            Pause_ms(100);
            asm
              clrwdt;
            end;
        end;
      
      Glcd_Fill(0x00);



      while (MenuExit = 0) do // ok butonuna basýlýrsa menüden çýkacak
       begin

            if (Hidden_Button =0) then
              begin
                  while (Hidden_Button =0) do
                    begin
                        asm
                          clrwdt;
                        end;
                    end;
                  Log_Erase();
                  MenuExit := 1;
              end;
            
            if (Ok_Button =0) then
              begin
                  while (Ok_Button =0) do
                    begin
                         asm clrwdt; end;
                    end;
                    
                  MenuExit := 1;
                    
              end;

            if (Down_Button =0) then
              begin
                   while (Down_Button =0) do
                     begin
                          asm clrwdt; end;
                     end;
                   Log_Page := Log_Page + 1;
                   if (Log_Page > 19) then Log_Page := 1;
                   Glcd_Fill(0x00);
              end else
            if (Up_Button =0) then
              begin
                   while (Up_Button =0) do
                     begin
                          asm clrwdt; end;
                     end;
                   Log_Page := Log_Page - 1;
                   if (Log_Page < 1) then Log_Page := 19;
                   Glcd_Fill(0x00);
              end;

            asm clrwdt; end;
            
            Case (Log_Page) of
            
             1: begin  // log menüsü 1/19 sayfasý en fazla 7 olay görüntüleniyor
                   Glcd_Write_Text('SAYFA / PAGE - 1/19',22,Row1,Black);
                   for i:= 1 to 7 do
                     begin
                       Log_Partition(Read_LogClock[i],Read_LogDateHi[i],Read_LogDateLo[i],Read_LogEvent[i]);
                       Log_Glcd_Write(Hour_Text,Day_Text,Event_Text,0,35,105,i,Black);
                     end;
             
                end;
             2: begin  // log menüsü 2/19 sayfasý en fazla 7 olay görüntüleniyor
                    Glcd_Write_Text('SAYFA / PAGE - 2/19',22,Row1,Black);
                   i := 7;
                   for i:= 8 to 14 do
                     begin
                       Log_Partition(Read_LogClock[i],Read_LogDateHi[i],Read_LogDateLo[i],Read_LogEvent[i]);
                       Log_Glcd_Write(Hour_Text,Day_Text,Event_Text,0,35,105,i-7,Black);
                     end;
                end;
            
             3: begin  // log menüsü 3/19 sayfasý en fazla 7 olay görüntüleniyor
                    Glcd_Write_Text('SAYFA / PAGE - 3/19',22,Row1,Black);
                   i := 14;
                   for i:= 15 to 21 do
                     begin
                       Log_Partition(Read_LogClock[i],Read_LogDateHi[i],Read_LogDateLo[i],Read_LogEvent[i]);
                       Log_Glcd_Write(Hour_Text,Day_Text,Event_Text,0,35,105,i-14,Black);
                     end;
                end;
            
             4: begin  // log menüsü 4/19 sayfasý en fazla 7 olay görüntüleniyor
                    Glcd_Write_Text('SAYFA / PAGE - 4/19',22,Row1,Black);
                   i := 21;
                   for i:= 22 to 28 do
                     begin
                       Log_Partition(Read_LogClock[i],Read_LogDateHi[i],Read_LogDateLo[i],Read_LogEvent[i]);
                       Log_Glcd_Write(Hour_Text,Day_Text,Event_Text,0,35,105,i-21,Black);
                     end;
                end;

             5: begin  // log menüsü 5/19 sayfasý en fazla 7 olay görüntüleniyor
                    Glcd_Write_Text('SAYFA / PAGE - 5/19',22,Row1,Black);
                   i := 28;
                   for i:= 29 to 35 do
                     begin
                       Log_Partition(Read_LogClock[i],Read_LogDateHi[i],Read_LogDateLo[i],Read_LogEvent[i]);
                       Log_Glcd_Write(Hour_Text,Day_Text,Event_Text,0,35,105,i-28,Black);
                     end;
                end;  //-----------------------

             6: begin  // log menüsü 6/19 sayfasý en fazla 7 olay görüntüleniyor
                    Glcd_Write_Text('SAYFA / PAGE - 6/19',22,Row1,Black);
                   i := 35;
                   for i:= 36 to 42 do
                     begin
                       Log_Partition(Read_LogClock[i],Read_LogDateHi[i],Read_LogDateLo[i],Read_LogEvent[i]);
                       Log_Glcd_Write(Hour_Text,Day_Text,Event_Text,0,35,105,i-35,Black);
                     end;
                end;
                
             7: begin  // log menüsü 7/19 sayfasý en fazla 7 olay görüntüleniyor
                    Glcd_Write_Text('SAYFA / PAGE - 7/19',22,Row1,Black);
                   i := 42;
                   for i:= 43 to 49 do
                     begin
                       Log_Partition(Read_LogClock[i],Read_LogDateHi[i],Read_LogDateLo[i],Read_LogEvent[i]);
                       Log_Glcd_Write(Hour_Text,Day_Text,Event_Text,0,35,105,i-42,Black);
                     end;
                end;
                
             8: begin  // log menüsü 8/19 sayfasý en fazla 7 olay görüntüleniyor
                    Glcd_Write_Text('SAYFA / PAGE - 8/19',22,Row1,Black);
                   i := 49;
                   for i:= 50 to 56 do
                     begin
                       Log_Partition(Read_LogClock[i],Read_LogDateHi[i],Read_LogDateLo[i],Read_LogEvent[i]);
                       Log_Glcd_Write(Hour_Text,Day_Text,Event_Text,0,35,105,i-49,Black);
                     end;
                end;
                
            9: begin  // log menüsü 9/19 sayfasý en fazla 7 olay görüntüleniyor
                    Glcd_Write_Text('SAYFA / PAGE - 9/19',22,Row1,Black);
                   i := 56;
                   for i:= 57 to 63 do
                     begin
                       Log_Partition(Read_LogClock[i],Read_LogDateHi[i],Read_LogDateLo[i],Read_LogEvent[i]);
                       Log_Glcd_Write(Hour_Text,Day_Text,Event_Text,0,35,105,i-56,Black);
                     end;
                end;
                
            10: begin  // log menüsü 10/19 sayfasý en fazla 7 olay görüntüleniyor
                    Glcd_Write_Text('SAYFA / PAGE -10/19',22,Row1,Black);
                   i := 63;
                   for i:= 64 to 70 do
                     begin
                       Log_Partition(Read_LogClock[i],Read_LogDateHi[i],Read_LogDateLo[i],Read_LogEvent[i]);
                       Log_Glcd_Write(Hour_Text,Day_Text,Event_Text,0,35,105,i-63,Black);
                     end;
                end;
                
            11: begin  // log menüsü 11/19 sayfasý en fazla 7 olay görüntüleniyor
                    Glcd_Write_Text('SAYFA / PAGE -11/19',22,Row1,Black);
                   i := 70;
                   for i:= 71 to 77 do
                     begin
                       Log_Partition(Read_LogClock[i],Read_LogDateHi[i],Read_LogDateLo[i],Read_LogEvent[i]);
                       Log_Glcd_Write(Hour_Text,Day_Text,Event_Text,0,35,105,i-70,Black);
                     end;
                end;
                
            12: begin  // log menüsü 12/19 sayfasý en fazla 7 olay görüntüleniyor
                    Glcd_Write_Text('SAYFA / PAGE -12/19',22,Row1,Black);
                   i := 77;
                   for i:= 78 to 84 do
                     begin
                       Log_Partition(Read_LogClock[i],Read_LogDateHi[i],Read_LogDateLo[i],Read_LogEvent[i]);
                       Log_Glcd_Write(Hour_Text,Day_Text,Event_Text,0,35,105,i-77,Black);
                     end;
                end;
                
            13: begin  // log menüsü 13/19 sayfasý en fazla 7 olay görüntüleniyor
                    Glcd_Write_Text('SAYFA / PAGE -13/19',22,Row1,Black);
                   i := 84;
                   for i:= 85 to 91 do
                     begin
                       Log_Partition(Read_LogClock[i],Read_LogDateHi[i],Read_LogDateLo[i],Read_LogEvent[i]);
                       Log_Glcd_Write(Hour_Text,Day_Text,Event_Text,0,35,105,i-84,Black);
                     end;
                end;
                
            14: begin  // log menüsü 14/19 sayfasý en fazla 7 olay görüntüleniyor
                    Glcd_Write_Text('SAYFA / PAGE -14/19',22,Row1,Black);
                   i := 91;
                   for i:= 92 to 98 do
                     begin
                       Log_Partition(Read_LogClock[i],Read_LogDateHi[i],Read_LogDateLo[i],Read_LogEvent[i]);
                       Log_Glcd_Write(Hour_Text,Day_Text,Event_Text,0,35,105,i-91,Black);
                     end;
                end;
                
            15: begin  // log menüsü 15/19 sayfasý en fazla 7 olay görüntüleniyor
                    Glcd_Write_Text('SAYFA / PAGE -15/19',22,Row1,Black);
                   i := 98;
                   for i:= 99 to 105 do
                     begin
                       Log_Partition(Read_LogClock[i],Read_LogDateHi[i],Read_LogDateLo[i],Read_LogEvent[i]);
                       Log_Glcd_Write(Hour_Text,Day_Text,Event_Text,0,35,105,i-98,Black);
                     end;
                end;
                
            16: begin  // log menüsü 16/19 sayfasý en fazla 7 olay görüntüleniyor
                    Glcd_Write_Text('SAYFA / PAGE -16/19',22,Row1,Black);
                   i := 105;
                   for i:= 106 to 112 do
                     begin
                       Log_Partition(Read_LogClock[i],Read_LogDateHi[i],Read_LogDateLo[i],Read_LogEvent[i]);
                       Log_Glcd_Write(Hour_Text,Day_Text,Event_Text,0,35,105,i-105,Black);
                     end;
                end;
                
            17: begin  // log menüsü 17/19 sayfasý en fazla 7 olay görüntüleniyor
                    Glcd_Write_Text('SAYFA / PAGE -17/19',22,Row1,Black);
                   i := 112;
                   for i:= 113 to 119 do
                     begin
                       Log_Partition(Read_LogClock[i],Read_LogDateHi[i],Read_LogDateLo[i],Read_LogEvent[i]);
                       Log_Glcd_Write(Hour_Text,Day_Text,Event_Text,0,35,105,i-112,Black);
                     end;
                end;
                
            18: begin  // log menüsü 18/19 sayfasý en fazla 7 olay görüntüleniyor
                    Glcd_Write_Text('SAYFA / PAGE -18/19',22,Row1,Black);
                   i := 119;
                   for i:= 120 to 126 do
                     begin
                       Log_Partition(Read_LogClock[i],Read_LogDateHi[i],Read_LogDateLo[i],Read_LogEvent[i]);
                       Log_Glcd_Write(Hour_Text,Day_Text,Event_Text,0,35,105,i-119,Black);
                     end;
                end;
                
            19: begin  // log menüsü 19/19 sayfasý en fazla 7 olay görüntüleniyor
                    Glcd_Write_Text('SAYFA / PAGE -19/19',22,Row1,Black);
                   i := 126;
                   for i:= 127 to 128 do
                     begin
                       Log_Partition(Read_LogClock[i],Read_LogDateHi[i],Read_LogDateLo[i],Read_LogEvent[i]);
                       Log_Glcd_Write(Hour_Text,Day_Text,Event_Text,0,35,105,i-126,Black);
                     end;
                end;

            
            end;


       end;
       
       Glcd_Fill(0x00);
       
 end;
//**************************************************************


end.