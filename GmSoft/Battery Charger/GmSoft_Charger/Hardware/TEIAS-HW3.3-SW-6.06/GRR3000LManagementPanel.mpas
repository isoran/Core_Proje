program GRR3000LManagementPanel;

uses GRR3000LFonts, Fonts,Language,Modbus, Leakage_Function, LogUnit, Battery_Meintenance, SevenSegmentUnit;

{
 Watchdog Timer Pres. A = 64
 Watchdog Timer Pres. B = 8
 
 TimeOut Calculation := WDT_A*WDT_B*2
                     := 64*8*2
                     := 1024ms
 
}

{

 Derin Deþarj koruma için, Akü Hata röle çýkýþý düzenlendi*
 Yedekli-Paralel için çalýþma modu düzenlendi*
 saat-tarih menüsünde alt ve üst sayýlar kaldýrýldý, ROM alanýndan yer kazanýldý*
 Yazýlým versiyonu 2.4 oldu
 
 ilk devreye alma sýrasýnda akü ayarlarý menüsü otomatik açýlma eklendi.
 Akü ayarlarýnda Auto B/F limitlerindeki hatalý yazýlar düzeltildi.
 Akü Ah deðeri girildiðinde hýzlý,normal,manuel ve TComp deðerleri otomatik yüklenmesi düzeltildi.
 
 Standart yazýlýmýn versiyonu v3.2, paralel için ise v3.3 oldu
 
  Yedek için opto izolatörlü  devre yapýldý. Yazýlým Buna göre düzenlendi
  -- M A S T E R --               -- S L A V E --
   Out Pin   =  1 -------------->  Input Pin = 0
       ||
    H A T A
   Out Pin   =  0 -------------->  Input Pin = 1

   TEÝAÞ cihazlarý için yazýlým versiyonu 5.1 yapýldý
   Bu yazýlým TEÝAÞ cihazlarý için tekli yazýlýmýdýr. Yedek için deðildir.
   Yedek-Paralel cihazlarý için yazýlým versiyonu 5.2 yapýldý
   Yedek-Paralel cihazlar için izoleli modül kullanýlýyor
   
   25.06.2019
   Derin Deþarj Çýkýþý ters çalýþýyordu düzeltildi.
   
   04.07.2019
   yeni gelen 74HC595 lerin haberleþme protokolü farklý olduðu için SPI2_init prosedürü deðiþtirildi.
   Her iki seri 74HC595 uygun hale getirildi.
   
   
   ESKÝ                                          YENÝ
   
   SPI2_Init_Advanced                                SPI2_Init_Advanced
         (                                           (
          _SPI_MASTER,                               _SPI_MASTER,
          _SPI_8_BIT,                                _SPI_8_BIT,
          _SPI_PRESCALE_SEC_1,                       _SPI_PRESCALE_SEC_1,
          _SPI_PRESCALE_PRI_16,                      _SPI_PRESCALE_PRI_16,
          _SPI_SS_DISABLE,                           _SPI_SS_DISABLE,
          _SPI_DATA_SAMPLE_MIDDLE,                   _SPI_DATA_SAMPLE_MIDDLE,
          _SPI_CLK_IDLE_LOW,                         _SPI_CLK_IDLE_LOW,
          _SPI_ACTIVE_2_IDLE                        _SPI_IDLE_2_ACTIVE   // burasý düzeltildi
         );                                        );
         
   06.01.2020
   TEÝAÞ isteðiyle akü ah deðeri ayarlanýrken akü þarj akýmý, redresör akýmýnýn üzerine çýkmayacak.
   
   
   05.05.2020 Yazýlým versiyonu 6.05 oldu
   TEÝAÞ tiplerinde yedekli-paralel için düzenleme yapýldý. Slave input ve Master pinleri kullanýlmýyor. Sadece Bck pini kullanýlacak.
   
   21.10.2020
   Modbus timeout engellemek için 100us timer kuruldu (timer5-priority 3)
   burada Check_Modbus fonksiyonu çalýþtýrýldý.
   ana döngüdeki fonksiyon kapatýldý. böylece menü içlerinde de Modbus haberleþme saðlandý
   
         

}

Const

     Org_12_LoadVolt      = 3244;
     Org_24_LoadVolt      = 3244;
     Org_48_LoadVolt      = 3244;
     Org_110_LoadVolt     = 3244;
     Org_220_LoadVolt     = 3244;
     
     Org_LoadVolt         = 3244;
     
     Gemta_Password       = 8837; //19.08.2017 C.tesi günü B. Emre ERDEM' e soruldu
     

     

     Black       = 1; // GLCD Text Colour black
     White       = 0; // GLCD_Text Colour white
     Invert      = 2; // GLCD_Text Colour invert
     Row1        = 0;
     Row2        = 1;
     Row3        = 2;
     Row4        = 3;
     Row5        = 4;
     Row6        = 5;
     Row7        = 6;
     Row8        = 7;
     English     = 2;
     Turkish     = 3;
     
     Boost       = 1;
     Float       = 2;
     TComp       = 3;
     Manuel      = 4;
     Automatic   = 5;
     


     
     Comm_ThrystorModule_Addr      = 10; // tristör tetikleme kartý ID numarasý
    // Comm_AcMultimeter_Addr        = 11; // AC Multimeter kartý ID numarasý
    // Comm_VoltAmpermeter           = 12; // Voltmetre-Ampermetre kartý ID numarasý
     Comm_RelayModule              = 13; // Röle kartý ID numarasý
     
     SinglePhase                   = 1.0;
     ThreePhase                    = 1.73205081;
     
     NomACVolt                     = 220.0;
     
     

     

     
     Adc_Sample  = 25;
  // Data Eeprom Adress Value --- Start Eeprom Addr = 0x7FF000, Stop Eeprom Addr = 0x7FFFFE
  EE_DefaultDataEeAddr                  = 8384514; // ilk yazýlým yüklendiðinde yazýlacak deðer
  EE_HucreSayisiEeAddr                  = 8384516; // akü hücre sayýsý
  EE_NomHucreGerilimEeAddr              = 8384518; // Nominal akü hücre gerilimi
  EE_F_ChargePercentLoEeAddr            = 8384520; // Float þarj yüzde min. deðeri
  EE_F_ChargePercentHiEeAddr            = 8384522; // Float þarj yüzde max. deðeri
  EE_B_ChargePercentLoEeAddr            = 8384524; // Boost þarj yüzde min. deðeri
  EE_B_ChargePercentHiEeAddr            = 8384526; // Boost þarj yüzde max. deðeri
  EE_RedresorAkimEeAddr                 = 8384528; // redresör akýmý
  EE_BatteryAhEeAddr                    = 8384530; // akü ah deðeri
  EE_BatteryAmpsBoostEeAddr             = 8384532; // akü akým hýzlý deðeri
  EE_BatteryAmpsFloatEeAddr             = 8384534; // akü akým normal deðeri
  EE_BatteryAmpsTCompEeAddr             = 8384536; // akü akým s.komp deðeri
  EE_BatteryAmpsManuelEeAddr            = 8384538; // akü akým manuel deðeri
  EE_ChargeModeEeAddr                   = 8384540; // þarj modlarý
  EE_BoostChargeVoltEeAddr              = 8384542; // hýzlý þarj gerilimi
  EE_FloatChargeVoltEeAddr              = 8384544; // normal þarj gerilimi
  EE_BoostChargeTimeEeAddr              = 8384546; // hýzlý þarj süresi
  EE_DeepDischargeVoltEeAddr            = 8384548; // derin deþarj gerilimi
  EE_AutoBFModeEeAddr                   = 8384550; // auto Boost/float mode
  EE_BoostChargeLimitEeAddr             = 8384552; // hýzlý þarj limit deðeri
  EE_FloatChargeLimitEeAddr             = 8384554; // normal þarj limit deðeri
  EE_DCOutVoltSetEeAddr                 = 8384556; // dc çýkýþ gerilimi set deðeri
  EE_DcOutAmpsSetEeAddr                 = 8384558; // dc çýkýþ akýmý set deðeri   MaxVoltSet
  EE_MaxVoltSetEeAddr                   = 8384560; // max gerilim set deðeri
  EE_MinVoltSetEeAddr                   = 8384562; // min gerilim set deðeri
  EE_DCSetResponseTimeEeAddr            = 8384564; // dc ayar tepki süresi
  EE_DropperLoadVoltEeAddr              = 8384566; // dropper yük gerilimi
  EE_DropperOutStatusEeAddr             = 8384568; // dropper durumu 1= 1 devredýþý, 2= ikiside devredýþý, 3= hepsi devrede
  EE_ACMaxVoltSetEeAddr                 = 8384570; // ac max. gerilim
  EE_ACMinVoltSetEeAddr                 = 8384572; // ac min. gerilim
  EE_ACSetResponseTimeEeAddr            = 8384574; // Ac ayar tepki süresi
  EE_TempAlarmSetEeAddr                 = 8384576; // temp alarm deðeri
  EE_TempFanOnSetEeAddr                 = 8384578; // temp fan on deðeri
  EE_TempFanOffSetEeAddr                = 8384580; // temp fan off deðeri
  EE_TempSetResponseTimeEeAddr          = 8384582; // sýcaklýk röle tepki süresi
  EE_ModbusIDEeAddr                     = 8384584; // modbus id
  EE_ModbusBaudRate                     = 8384586; // baud rate
  EE_LanguageBitEeAddr                  = 8384588; // dil
  EE_LeakagePosEeAddr                   = 8384590; // + kaçak set deðeri
  EE_LeakageNegEeAddr                   = 8384592; // - kaçak set deðeri
  EE_dV_LoadVoltEeAddr                  = 8384594;
  EE_OperationModeEeAddr                = 8384596;
  EE_MasterSlaveEeAddr                  = 8384598;
  EE_Data_Diff_leak_pos                 = 8384600;
  EE_Data_Diff_leak_neg                 = 8384602;
  EE_dV_BatteryVoltEeAddr               = 8384604;
  EE_ConfirmAcMenuEeAddr                = 8384606;
  EE_ConfirmDcMenuEeAddr                = 8384608;
  EE_ConfirmBattMenuEeAddr              = 8384610;
  EE_ConfirmOperaMenuEeAddr             = 8384612;
  EE_ConfirmLeakMenuEeAddr              = 8384614;
  EE_ConfirmTempMenuEeAddr              = 8384616;
  EE_ConfirmClockMenuEeAddr             = 8384618;
  EE_ConfirmModbusMenuEeAddr            = 8384620;
  EE_ConfirmLanguMenuEeAddr             = 8384622;
  EE_PasswordEeAddr                     = 8384624;
  
  EE_ACVoltDifferentEeAddr              = 8384626;
  EE_ACProtectEeAddr                    = 8384628;
  EE_KacakSensorEeAddr                  = 8384630;

  //EE_U1VoltRefValuEeAddr                = 8384626;
  //EE_U2VoltRefValuEeAddr                = 8384628;
  //EE_U3VoltRefValuEeAddr                = 8384630;
  //EE_U1AmpsRefValuEeAddr                = 8384632;
  //EE_U2AmpsRefValuEeAddr                = 8384634;
  //EE_U3AmpsRefValuEeAddr                = 8384636;  //8388606' ya kadar
  //EE_dV_BattAmpsCalibEeAddr             = 8384638;
  //EE_dV_RedAmpsCalibEeAddr              = 8384640;
  //EE_dV_RedVoltCalibEeAddr              = 8384642;
  //EE_dV_TempCalibEeAddr                 = 8384644;
  EE_FirstBattMenuEeAddr                = 8384646;
  EE_DiodeValueEeAddr                   = 8384648;

  // 8384676 dan sonra loglara geçer
  //--------20 adres boþ býrakýlýr ve log için yazýlmaya baþlanýr
  
  EE_ServiceCycleEeAddr    = 8386100; // bakým döngüsü eeprom adresi
  EE_Service1EeAddr        = 8386102; // 1. servis tarih eeprom adress
  EE_Service2EeAddr        = 8386104; // 2. servis tarih eeprom adress
  EE_Service3EeAddr        = 8386106; // 3. servis tarih eeprom adress
  EE_Service4EeAddr        = 8386108; // 4. servis tarih eeprom adress
  EE_QuitVoltEeAddr        = 8386110; // bakým çýkma gerilimi eeprom adress
  EE_QuitTimeEeAddr        = 8386112; // çýkýþ gerilimi eeprom adress
  EE_CurveScanEeAddr       = 8386114; // eðri tarama eeprom adress
  EE_BkmStartTimeEeAddr    = 8386116; // bakým baþlama saati eeprom adress
  EE_BkmStatusEeAddr       = 8386118; // bakým devrede ya da deðil eeprom adress
  
  BaudRate           = 19200;
  FCY_Value          = 30000000; // 120Mhz/4 = 30mHz
  U2BRG_Value        = (((FCY_Value/BaudRate)/16)-1);
  
  RlyOut_1_AcHigh         = 0;
  RlyOut_2_AcLow          = 1;
  RlyOut_3_DcHigh         = 2;
  RlyOut_4_DcLow          = 3;
  RlyOut_5_PLeakage       = 4;
  RlyOut_6_NLeakage       = 5;
  RlyOut_7_BattAmpLimit   = 6;
  RlyOut_8_RedAmpLimit    = 7;
  RlyOut_9_FanFault       = 8;
  RlyOut_10_HighTemp      = 9;
  RlyOut_11_BattReverse   = 10;
  RlyOut_12_AcMCB         = 11;
  RlyOut_13_DcMCB         = 12;
  RlyOut_14_BattMCB       = 13;
  RlyOut_15_RedFault      = 14;
  RlyOut_16_ExtOut        = 15;
  
  Led1_AcOn               = 7;
  Led1_AcHigh             = 6;
  Led1_AcLow              = 5;
  Led1_DcHigh             = 4;
  Led1_DcLow              = 3;
  Led1_PLeakage           = 2;
  Led1_NLeakage           = 1;
  Led1_BattAmpLimit       = 0;
  Led2_RedAmpLimit        = 7;
  Led2_FanFault           = 6;
  Led2_HighTemp           = 5;
  Led2_BattReverse        = 4;
  Led2_BoostCharge        = 3;
  Led2_FloatCharge        = 2;
  Led2_AutoCharge         = 1;
  Led2_ManualCharge       = 0;
  Led3_TempComp           = 0;
  Led3_AcMCB              = 1;
  Led3_RedFault           = 2;
  Led3_BattMCB            = 3;
  Led3_DcMCB              = 4;
  Led3_DropperStatus      = 5;
  
  FltTime                 = 3000;
  
  
  
  Charge                  = 1923; // þarj olma deðeri
  Discharge               = 1938; // deþarj olma deðeri
  
  MenuExitValue           = 30000; // 30 sn
  
  DropperSayac            = 250;
  

  
  

var GLCD_D7 : sbit at RD2_bit;
    GLCD_D6 : sbit at RD3_bit;
    GLCD_D5 : sbit at RD12_bit;
    GLCD_D4 : sbit at RD13_bit;
    GLCD_D3 : sbit at RD4_bit;
    GLCD_D2 : sbit at RD5_bit;
    GLCD_D1 : sbit at RD6_bit;
    GLCD_D0 : sbit at RD7_bit;
    GLCD_D7_Direction : sbit at TRISD2_bit;
    GLCD_D6_Direction : sbit at TRISD3_bit;
    GLCD_D5_Direction : sbit at TRISD12_bit;
    GLCD_D4_Direction : sbit at TRISD13_bit;
    GLCD_D3_Direction : sbit at TRISD4_bit;
    GLCD_D2_Direction : sbit at TRISD5_bit;
    GLCD_D1_Direction : sbit at TRISD6_bit;
    GLCD_D0_Direction : sbit at TRISD7_bit;


    GLCD_CS1 : sbit at LATA6_bit;
    GLCD_CS2 : sbit at LATG0_bit;
    GLCD_RS  : sbit at LATG1_bit;
    GLCD_RW  : sbit at LATF1_bit;
    GLCD_EN  : sbit at LATF0_bit;
    GLCD_RST : sbit at LATD1_bit;

    GLCD_CS1_Direction : sbit at TRISA6_bit;
    GLCD_CS2_Direction : sbit at TRISG0_bit;
    GLCD_RS_Direction  : sbit at TRISG1_bit;
    GLCD_RW_Direction  : sbit at TRISF1_bit;
    GLCD_EN_Direction  : sbit at TRISF0_bit;
    GLCD_RST_Direction : sbit at TRISD1_bit;

    MCU_State_LED : sbit at RA14_bit;
    MCU_State_LED_Direction : sbit at TRISA14_bit;
    
    //Ok_Button           : sbit at RD0_bit;
    Down_Button         : sbit at RD11_bit;
    Up_Button           : sbit at RC13_bit;
    Hidden_Button       : sbit at RA7_bit;
    Buzzer              : sbit at RA15_bit; // Buzzer pini
    Dropper_Out_1       : sbit at LATC3_bit;
    Dropper_Out_2       : sbit at LATC2_bit;
    Dropper_Out_3       : sbit at LATC1_bit;
    Fan_Out             : sbit at RG15_bit;
    
    Dropper_Out_1_Direction       : sbit at TRISC3_bit;
    Dropper_Out_2_Direction       : sbit at TRISC2_bit;
    Dropper_Out_3_Direction       : sbit at TRISC1_bit;
    Fan_Out_Direction             : sbit at TRISG15_bit;
    HC595_CS1_Pin                 : sbit at RD10_bit;
    HC595_CS2_Pin                 : sbit at RD9_bit;
    HC595_CS3_Pin                 : sbit at RC14_bit;
    
    rs485_rxtx_pin                : sbit at RD15_bit;
    rs485_rxtx_pin_Direction      : sbit at TRISD15_bit;

    Load_MCB_Input                : sbit at RG9_bit;
    Batt_MCB_Input                : sbit at RA12_bit;
    AC_MCB_Input                  : sbit at RA13_bit;


    Master_OutPin                 : sbit at RG14_bit;
    Slave_InputPin                : sbit at RG12_bit;

    Master_OutPin_Direction       : sbit at TRISG14_bit;
    Slave_InputPin_Direction      : sbit at TRISG12_bit;


    Heater_Output                 : sbit at RA9_bit;
    
    Temp_CompPin                  : sbit at LATB14_bit;
    Temp_CompPin_Direction        : sbit at TRISB14_bit;
    
    //*********19.12.2018 v3.1 PCB kart revizyonu**************************
    
    DischargeProtect_Pin          : sbit at RB3_bit;
    Backup_Out_Pin                : sbit at RB10_bit;
    LeakageControlRelayOut_Pin    : sbit at LATC15_bit;
    
    


    //*********19.12.2018 v3.1 PCB kart revizyonu**************************

    HucreSayisi, NomHucreGerilim, F_ChargePercentLo, F_ChargePercentHi, B_ChargePercentLo, B_ChargePercentHi, RedresorAkim : word;
    MenuSayac,MenuSayacValue: short;
    MainMenuExit, MenuExit : byte;
    MenuExitCounter : LongInt;
    
    Value_Text, ValueText2 : array[1..5] of char;

    ButonStop : bit;
    BtCounterNormal, BtCounter1 : word;
    ButonStart : byte;
    
    LanguageBit : byte;

    BatteryAh, BatteryAmpsSet : word;

    ChargeMode : byte;
    Temp_RealAku  : real;
    Temp_WordAku  : word;

    BoostChargeVoltage, FloatChargeVoltage, BoostChargeTimeSet, DeepDischargeVolt : word;
    BoostChargeTime : LongInt;
    AutoBFMode : bit;
    BoostChargeLimit, FloatChargeLimit : word;

    Read_TotalAmps, Read_OutAmps, Read_LoadVolt, Read_BattAmps, Read_RedVolt, Read_Temp, Read_U1Volt, Read_U2Volt,
    Read_U3Volt, Read_U1Amps, Read_U2Amps, Read_U3Amps, Read_Freq, Read_Relay : word;
    Uart_ThryFault, Uart_ACMultFault, Uart_RelayFault, Uart_VoltmeterFault : byte;
    Read_U1VoltRaw, Read_U2VoltRaw, Read_U3VoltRaw : longint;
    Read_FreqReal  : real;
    {
     1 = tristor kartý
     2 = ac multimetre kartý
     3 = röle kartý
     4 = voltmetre kartý
    }
    
    DCOutVoltSet, DcOutAmpsSet : word;
    MaxvoltSet, MinVoltSet : word;
    {DCSetResponseTime, ACSetResponseTime : byte; }
    
    Dropper_OutStatus, OperationMode : byte;
    StopBit : bit;
    
    StopCounter1, StopCounter2, BackupCounter : word;
    
    OpTime1,OpTime2 : byte;

    ACMaxVoltSet, ACMinVoltSet : word;
    
    Minutes, Hours, Day, Month, Year, Seconds, Week : short;
    Clock_Text : array[1..8] of char;
    Date_Text   : array[1..10] of char;
    PCB_Temperature : byte;
    PCB_TempHAM    : word;
    PCB_TempText   : array[1..3] of char;
    

   { TempSetResponseTime,} TempFanOffSet, TempFanOnSet, TempAlarmSet : byte;
    
    ModbusID, ModbusBaudRate : byte;
    
    ReceiveData   : array[0..20] of byte; // Uart2 kartlar arasý haberleþme alýnan data
    MasterData    : array[0..20] of byte;
    Request_Counter, RequestFault_Counter,Request_RepeatCounter : word;
    ThryFaultCount, RlyFaultCount : word;
    ThryCommFault, RlyCommFault : byte;
    
    Leakage_Pos_Set, Leakage_Neg_Set : short;
    LeakageValue : byte;
    FactoryData, FactoryResetBit : byte;
    Haberlesme_izni : byte;
    Relay_Out_Data : word;
    
    TimeScreenCounter : word;
    
    RectifierVoltage_Set : word; // redresör çýkýþ gerilimi, bütün gerilimler buna eþitlenecek. örneðin hýzlý þarj = RectifierVoltage_Set gibi
    BCTimeCountBit : byte;
    BCTimeCounter : word;
    BTBit         : bit;
    
    Rly_AcHighBit, Rly_AcLowBit, Rly_DcHighBit, Rly_DcLowBit, Rly_PosLeakageBit,
    Rly_NegLeakageBit, Rly_BattAmpsLimitBit, Rly_RedAmpsLimitBit, Rly_FanFaultBit,
    Rly_HighTempBit, Rly_BattReverseBit, Rly_AcMcbBit, Rly_DcMcbBit, Rly_BattMcbBit,
    Rly_RedGenFaultBit, Rly_DeepDschBit : bit;
    
    DcFaultRelayTime : word;
    
    AlarmSira : byte;
    BuzzerBit, Buzzer_AllowBit : bit;

    AlarmSiraCounter : word;
    Buzzer_Counter   : word;
    
    ReceiveAddr : byte;
    
    Dig_LoadVolt,  Dig_LoadVoltLeak: word;
    Dig_LoadVoltLeakRAW : longint;
    dV_LoadVolt  : LongInt;
    
    Sample_RedVolt ,Sample_RedDigital : word;
    
    Program_StartBit,MenuBit : bit;
    ChargeStatus : word;
    MasterSlave  : word;
    AcViewScreenBit : bit;
    
    Adc_Value : word;

    LoadVolt_Real : real;
    
    Led1_Group, Led2_Group, Led3_Group : byte;
    TempHighBit,HighTempBit,Ac_MCB_Bit,Load_MCB_Bit,Batt_MCB_Bit : bit;

    ACFltCounter1,ACFltCounter2,AcOnCounter,LeakFltCounter1,LeakFltCounter2,TempFltCounter  : word;
    DropCounter : word;
    
    FanFaultBit, FanOnBit,FanFltBit : bit;
    FanAmpsRaw, FanFaultCounter : word;
    
    RedAmpsLimitBit, BattAmpsLimitBit, RedFaultBit : bit;
    
    Tcomp2, TCompV : real;
    TempComp_Volt : word;
    AcVoltReal : word;
    
    DcHighBit, DcLowBit : bit;
    
    DDischargeCounter : word;
    DDschargeBit, AcHighFaultBit, AcLowFaultBit : bit;
    
    Confirm_AcMenuBit, Confirm_DcMenuBit, Confirm_BattMenuBit, Confirm_OperaMenuBit, Confirm_LeakaMenuBit, Confirm_TempeMenuBit,
    Confirm_ClockMenuBit, Confirm_ModbusMenuBit : bit;
    
    PasswordArray : array[1..4] of short;
    ChngA, ChngB, ChngC, ChngD : byte;
    PasswordHam,User_Password : word;
    
    RedVolt_HighPercent10Bit, RedVolt_LowPercent10Bit  : real;
    
    DropperInitCounter1, DropperInitCounter2, DropperInitCounter3, DropperInitCounter4, DropperCloseCounter : word;
    
    Chng : array[1..15] of byte;
    
    //U1VoltRefValue, U2VoltRefValue, U3VoltRefValue, U1AmpsRefValue, U2AmpsRefValue, U3AmpsRefValue        : word;
    
    Comm_StatusBit : byte; // Haberleþme durum biti, 0= bütün datalar, 1= sadece AC datalar 2= GTT datalar
    
    Comm_ModbusFaultCounter : word;
    Modbus_FaultBit : bit;
    
    Start_Bit : bit;
    Start_Counter : word;
    
    //Send_RedVolt, Send_LoadVolt, Send_BatAmps, Send_TotalAmps : word;
    
    LV_ScreenCounter,AC_ScreenCounter : byte;
    LoadVoltRMS,Read_LoadVoltRaw : Longint;
    
    P_LeakBit,N_LeakBit,Red_HighTemp : bit;
    
    TempComp                         : short;
    
    BattAmps_Calib, RedAmps_Calib, RedVolt_Calib, Temp_Calib : short;
    BattAmps_CalibSend, RedAmps_CalibSend, RedVolt_CalibSend, Temp_CalibSend : word;
    Read_Alpha, Read_Phases, Read_DSW, Read_NomVolt, Read_NomAmp  : word;
    
    GTTSendDataConfirm,SendRepeatCounter : byte;
    GTTCompleteBit : bit;
    
    Read_BatRawAmp,Read_RedRawAmp,Read_RedRawVlt, Read_CalOkBit : word;
    Read_RatedVolt, Read_RatedAmps : word;
    DDschargeControlBit : bit;
    

    Bakim_Start, BakimStartBit, BakimLockBit, BakimControlBit, QuitVoltBit, bat_curve_scan_fail : bit;
    Service_Charge_StateBit, Bat_Curve_Scan_State_bit : byte;
    Bat_Service_Timer_bit, Bat_Service_Unit1, Bat_Service_Unit2,BakimInitBit : bit;
    Bat_Service_Timer : word;
    
    Battery_Current_Capacity, Curve_Time, First_Bat_Current : word;
    
    Redresor_OK_Bit : bit;
    
    NominalGerilim : word;
    
    WriteText : string[7];
    
    FirstStartUpBattMenu : byte;
    
    PosCounter, NegCounter : word;

    ADC_LeakRAW, ADC_LeakRAW2 : Longint;
    LeakCounter : byte;
    
    
    ScreenView : bit;
    ScreenCounter : word;
    
    FreqHAM, FreqViewCounter,FreqLossCounter : word;
    FreqBit : bit;
    
    
    AC_Real : real;
    Read_AC_RAW : word;
    
    TotalPOWER_kW, Reel_Current : real;
    
    UpButonCounter : word;
    UP_PressBit    : bit;
    
    viewbyte : byte;
    
    ACVolt_Different : byte;
    AC_ProtectBit, ACVoltDifferentBit : bit;
    
    U1Volt_Diff, U2Volt_Diff, U3Volt_Diff : integer;
    
    KacakSensor : bit;
    
    CalibValue : byte;
    
    DisplayMessage : byte;
    
    CaseHeaterActiveBit : bit;
    
    DiodeValue : byte;
    
    test_Text : string[10];
    Send_Test_Text : string[10];

    
 {
const
  CommPointer : array [21] of ^word =(
          nil,                    // 0
          @Read_BattAmps,       // 1
          @Read_TotalAmps,      // 2
          @Read_RedVolt,        // 3
          @Read_Temp,           // 4
          nil,                    // 5
          nil,                    // 6
          nil,                    // 7
          nil,                    // 8
          nil,                    // 9
          @ChargeStatus,        // 10
          @Read_Alpha,          // 11
          @Read_Phases,         // 12
          @Read_DSW,            // 13
          @Read_NomVolt,        // 14
          @Read_NomAmp,         // 15
          @Read_BatRawAmp,      // 16
          @Read_RedRawAmp,      // 17
          @Read_RedRawVlt,      // 18
          @Read_RatedVolt,      // 19
          @Read_RatedAmps       // 20
  
  );far;
    
  }
  
    


//******************************************************************************
Procedure Pause_Ms(Value:word);
 begin
      VDelay_ms(Value);
 end;
//******************************************************************************
procedure Start_Register_Config();
 begin
     ADPCFG := 0xFFFF;

     Delay_ms(100);
     
     asm ClrWDT; end;
     
     IPC0 := 0;
     IPC1 := 0;
     IPC2 := 0;
     IPC3 := 0;
     IPC4 := 0;
     IPC5 := 0;
     IPC6 := 0;
     
     IEC0 := 0;
     IEC1 := 0;
     IEC2 := 0;
     


     INTCON1.15 := 0; //interrupt nesting enable
     
     T3CON  := 0x0000;
     TMR3   := 0;
     PR3    := ModBus_TimeOut_Timer3_PR3;
     
     T4CON      := 0x0000;
     TMR4       := 0;
     PR4        := 30000; // 120MHz 1ms timer


     
       //      5432109876543210
     U1STA := %0000010000000000;
     U2STA := %0000010000000000; // transmit enable bit
     IFS0  := %1001110101111111; // timer 1,3 uart1 clear
     IFS1  := %1111111011011111; // tmr4, Uart2 clear
     IPC1  := %0101000000000000; // timer 3 level 5;
     IPC2  := %0000000001100000; // uart1 level 6;
     IPC5  := %0000000001000000; // tmr4 level 4;
     IPC6  := %0000000000000111; // uart2 receiver priority level = 7
     IEC0  := %0000001010000000; // timer 3 enable, uart1 receiver enable
     IEC1  := %0000000100100000; // enable tmr4, uart2 receiver enable


     
     TRISA  := 0xFFFF;
     TRISB  := 0xFFFF;
     TRISC  := 0xFFF1;
     TRISD  := 0xFFFF;
     TRISF  := 0xFFFF;
     TRISG  := 0xFFFF;
     
     
     {    açýlýþta kontaktörler çalýþmasýn diye yazýldý    }
     Dropper_Out_1   := 0;
     Delay_Cyc_Long(1);
     Dropper_Out_2   := 0;
     Delay_Cyc_Long(1);
     Dropper_Out_3   := 0;
     Delay_Cyc_Long(1);

     Pause_ms(10);
    
     asm ClrWDT; end;
    
          //    5432109876543210
     TRISA  := %0011100111111111;
     TRISB  := %1111101000100111;
     TRISC  := %0011111111100001;
     TRISD  := %0011100111111111;
     TRISF  := %1111111010111111;
     TRISG  := %0001111010111111;
     
     Pause_ms(10);
     
     Temp_CompPin_Direction    := 1;
     Master_OutPin_Direction   := 0;
     Slave_InputPin_Direction  := 1;
     
     PORTA := 0x0000;
     PORTB := 0x0000;
     PORTC := 0x0000;
     PORTD := 0x0000;
     PORTF := 0x0000;
     PORTG := 0x0000;
     

     
     Pause_ms(10);
     
     Glcd_Init();
     Pause_ms(100);
     Glcd_Fill(0x00);
     Pause_ms(100);
     



     
     asm ClrWDT; end;
     
     SPI1_Init();
     Pause_ms(100);
     
     SPI_Set_Active(@SPI1_Read, @SPI1_Write);
     
     SPI2_Initialize();
     
     SPI_Set_Active(@SPI2_Read, @SPI2_Write);
     
     ClearDisplay(1);
     ClearDisplay(2);
     
     I2C1_Init(100000);
     Pause_ms(100);
     


     asm ClrWDT; end;

     HucreSayisi            := 0;
     NomHucreGerilim        := 0;
     RedresorAkim           := 0;
     F_ChargePercentLo      := 0;  // float þarj yüzde min.
     F_ChargePercentHi      := 0;  // float þarj yüzde max.
     B_ChargePercentLo      := 0;  // boost þarj yüzde min.
     B_ChargePercentHi      := 0;  // boost þarj yüzde max.
     MenuSayac              := 0;
     MenuSayacValue         := 0;
     Value_Text             := '     ';
     ValueText2             := '     ';
     ButonStop              := 0;
     BtCounterNormal        := 0;
     BtCounter1             := 0;
     ButonStart             := 0;
     MainMenuExit           := 0;
     MenuExitCounter        := 0;
     MenuExit               := 0;
     BatteryAh              := 0;
     BatteryAmpsSet         := 0;
     ChargeMode             := 0;
     Temp_RealAku           := 0.0;
     Temp_WordAku           := 0;
     BoostChargeVoltage     := 0;
     FloatChargeVoltage     := 0;
     BoostChargeTimeSet     := 0;
     BoostChargeTime        := 0;
     DeepDischargeVolt      := 0;
     AutoBFMode             := 0;
     BoostChargeLimit       := 0;
     FloatChargeLimit       := 0;
     DCOutVoltSet           := 0;
     DcOutAmpsSet           := 0;
     MaxvoltSet             := 0;
     MinVoltSet             := 0;
     //DCSetResponseTime      := 0;
     Dropper_OutStatus      := 0;
     {ACSetResponseTime      := 0;}
     Minutes                := 0;
     Hours                  := 0;
     Day                    := 0;
     Month                  := 0;
     Year                   := 0;
     Seconds                := 0;
     Week                   := 0;
     Clock_Text             := '        ';
     Date_Text              := '          ';
     PCB_Temperature        := 20; // açýlýþta ýsýtýcý çalýþmasýn diye kasa sýcaklýðý 20C yapýldý
     PCB_TempHAM            := 0;
     PCB_TempText           := '   ';
     //TempSetResponseTime    := 0;
     TempFanOffSet          := 0;
     TempFanOnSet           := 0;
     TempAlarmSet           := 0;
     ModbusID               := 0;
     ModbusBaudRate         := 0;
     Read_TotalAmps         := 0;
     Read_OutAmps           := 0;
     Read_BattAmps          := 0;
     Read_RedVolt           := 0;
     Read_Temp              := 0;
     Read_U1Volt            := 0;
     Read_U2Volt            := 0;
     Read_U3Volt             := 0;
     Read_U1VoltRaw          := 0;
     Read_U2VoltRaw          := 0;
     Read_U3VoltRaw          := 0;
     Read_U1Amps             := 0;
     Read_U2Amps             := 0;
     Read_U3Amps             := 0;
     Read_Relay              := 0;
     Read_Freq               := 0;
     Read_FreqReal           := 0.0;
     Request_Counter         := 1;
     Haberlesme_izni         := 0;
     RequestFault_Counter    := 0;
     Request_RepeatCounter   := 0;
     Uart_ThryFault          := 0;
     Uart_ACMultFault        := 0;
     Uart_RelayFault         := 0;
     Uart_VoltmeterFault     := 0;
     Leakage_Pos_Set         := 0;
     Leakage_Neg_Set         := 0;
     FactoryData             := 0;
     FactoryResetBit         := 0;
     Relay_Out_Data          := 1;
     MasterData[0]           := 0;
     MasterData[1]           := 0;
     MasterData[2]           := 0;
     MasterData[3]           := 0;
     MasterData[4]           := 0;
     MasterData[5]           := 0;
     ReceiveData[0]          := 0;
     ReceiveData[1]          := 0;
     ReceiveData[2]          := 0;
     ReceiveData[3]          := 0;
     ReceiveData[4]          := 0;
     ReceiveData[5]          := 0;
     ReceiveData[6]          := 0;
     TimeScreenCounter       := 0;
     //AcFaultCount            := 0;
     ThryFaultCount          := 0;
     //VoltmFaultCount         := 0;
     RlyFaultCount           := 0;
     //AcCommFault             := 0;
     ThryCommFault           := 0;
     //VoltCommFault           := 0;
     RlyCommFault            := 0;
     RectifierVoltage_Set    := 0;
     BCTimeCountBit          := 0;
     BCTimeCounter           := 0;
     BTBit                   := 0;
     Rly_AcHighBit           := 0;
     Rly_AcLowBit            := 0;
     Rly_DcHighBit           := 0;
     Rly_DcLowBit            := 0;
     Rly_PosLeakageBit       := 0;
     Rly_NegLeakageBit       := 0;
     Rly_BattAmpsLimitBit    := 0;
     Rly_RedAmpsLimitBit     := 0;
     Rly_FanFaultBit         := 0;
     Rly_HighTempBit         := 0;
     Rly_BattReverseBit      := 0;
     Rly_AcMcbBit            := 0;
     Rly_DcMcbBit            := 0;
     Rly_BattMcbBit          := 0;
     Rly_RedGenFaultBit      := 0;
     Rly_DeepDschBit         := 0;
     Modbus_Rec_Counter      := 0;
     AlarmSira               := 23;
     BuzzerBit               := 0;
     Buzzer_AllowBit         := 1;
     Buzzer_Counter          := 0;
     AlarmSiraCounter        := 0;
     DcFaultRelayTime        := 0;
     ReceiveAddr             := 0;
     Dig_LoadVolt            := 0;
     Dig_LoadVoltLeak        := 0;
     Dig_LoadVoltLeakRAW     := 0;
     //dV_BatteryVolt          := 0;
     dV_LoadVolt             := 0;
     Sample_RedDigital       := 0;
     Sample_RedVolt          := 0;
     Program_StartBit        := 0;
     MenuBit                 := 0;
     ChargeStatus            := Charge;
     AcViewScreenBit         := 0;

  // ****** kaçak akým ile ilgili bölüm ********
    Leakage_Status          := 0;
    Leakage_Volt            := 0;
    Adc_Leakage             := 0;
    Pos_Leak_Ref            := 0;
    Neg_Leak_Ref            := 0;
    one_kohm_constant       := 0;
    Unit_Leak0              := 0;
    Unit_Leak1              := 0;
    Unit_Leak2              := 0;
    R_Leakage               := 0;
    R_Leakage0              := 0;
    R_Leakage1              := 0;
    diff_leak_pos           := 0;
    diff_leak_neg           := 0;
    leakage_show_bit        := 0;
    Pos_Leakage_bit         := 0;
    Neg_Leakage_bit         := 0;
    
    
  // ****** kaçak akým ile ilgili bölüm ********
  
    Adc_Value         := 0;
    LoadVolt_Real     := 0.0;
    Led1_Group        := 0;
    Led2_Group        := 0;
    Led3_Group        := 0;
    TempHighBit       := 0;
    HighTempBit       := 0;
    ACFltCounter1     := 0;
    ACFltCounter2     := 0;
    AcOnCounter       := 0;
    LeakFltCounter1   := 0;
    LeakFltCounter2   := 0;
    TempFltCounter    := 0;
    Ac_MCB_Bit        := 0;
    Load_MCB_Bit      := 0;
    Batt_MCB_Bit      := 0;
    DropCounter       := 0;
    Read_LoadVolt     := 0;
    FanFaultBit       := 0;
    FanFltBit         := 0;
    FanAmpsRaw        := 0;
    FanFaultCounter   := 0;
    RedAmpsLimitBit   := 0;
    BattAmpsLimitBit  := 0;
    RedFaultBit       := 0;
    Tcomp2            := 0.0;
    TCompV            := 0.0;
    TempComp_Volt     := 0;
    AcVoltReal        := 0;
    DcHighBit         := 0;
    DcLowBit          := 0;
    DDischargeCounter := 0;
    DDschargeBit      := 0;
    AcHighFaultBit    := 0;
    AcLowFaultBit     := 0;
    Confirm_AcMenuBit := 0;
    Confirm_DcMenuBit := 0;
    Confirm_BattMenuBit := 0;
    Confirm_OperaMenuBit   := 0;
    Confirm_LeakaMenuBit   := 0;
    Confirm_TempeMenuBit   := 0;
    Confirm_ClockMenuBit   := 0;
    Confirm_ModbusMenuBit  := 0;
    //Confirm_LanguMenuBit   := 0;
    
    PasswordArray[1]:= 0;
    PasswordArray[2]:= 0;
    PasswordArray[3]:= 0;
    PasswordArray[4]:= 0;
    ChngA                := 0;
    ChngB                := 0;
    ChngC                := 0;
    ChngD                := 0;
    PasswordHam          := 0;
    Chng[1]              := 0;
    Chng[2]              := 0;
    Chng[3]              := 0;
    Chng[4]              := 0;
    Chng[5]              := 0;
    Chng[6]              := 0;
    Chng[7]              := 0;
    Chng[8]              := 0;
    Chng[9]              := 0;
    Chng[10]             := 0;
    Chng[11]             := 0;
    Chng[12]             := 0;
    Chng[13]             := 0;
    Chng[14]             := 0;
    Chng[15]             := 0;
    
    RedVolt_HighPercent10Bit := 0.0;
    RedVolt_LowPercent10Bit  := 0.0;
    
    DropperInitCounter1      := 0;
    DropperInitCounter2      := 0;
    DropperInitCounter3      := 0;
    DropperInitCounter4      := 0;
    DropperCloseCounter      := 0;
    
    {U1VoltRefValue           := 0;
    U2VoltRefValue           := 0;
    U3VoltRefValue           := 0;
    U1AmpsRefValue           := 0;
    U2AmpsRefValue           := 0;
    U3AmpsRefValue           := 0;}
    Comm_ModbusFaultCounter  := 0;
    Modbus_FaultBit          := 0;
    
    Comm_StatusBit           := 0; // haberleþme durum biti, 0= bütün datalar, 1= sadece AC datalar, 2= GTT Datalar
    Start_Bit                := 0;
    Start_Counter            := 0;
    
    {Send_RedVolt             := 0;
    Send_LoadVolt            := 0;
    Send_BatAmps             := 0;
    Send_TotalAmps           := 0;}
    
    LV_ScreenCounter         := 0;
    AC_ScreenCounter         := 0;
    LoadVoltRMS              := 0;
    Read_LoadVoltRaw         := 0;
    
    N_LeakBit                := 0;
    P_LeakBit                := 0;
    Red_HighTemp             := 0;
    
    TempComp                 := 0;
    
    BattAmps_Calib           := 0;  // GTT kartý için kalibre edilecek datalarýn deðerleri
    RedAmps_Calib            := 0;
    RedVolt_Calib            := 0;
    Temp_Calib               := 0;
    BattAmps_CalibSend       := 0;  // GTT kartý için kalibre edilecek datalarýn deðerleri
    RedAmps_CalibSend        := 0;
    RedVolt_CalibSend        := 0;
    Temp_CalibSend           := 0;
    
    
    Read_Alpha               := 0;  // GTT kartý için okunacak ekstra datalar
    Read_Phases              := 0;
    Read_DSW                 := 0;
    Read_NomVolt             := 0;
    Read_NomAmp              := 0;
    
    GTTSendDataConfirm       := 0;
    SendRepeatCounter        := 0;
    GTTCompleteBit           := 0;
    Read_BatRawAmp           := 0;
    Read_RedRawAmp           := 0;
    Read_RedRawVlt           := 0;
    Read_CalOkBit            := 0;
    Read_RatedVolt           := 0;
    Read_RatedAmps           := 0;
    DDschargeControlBit      := 0;
    StopBit                  := 0;
    StopCounter1             := 0;
    StopCounter2             := 0;
    BackupCounter            := 0;
    OpTime1                  := 13;
    OpTime2                  := 13;
    
    QuitTime_Sec         := 0;
    QuitTimeCounter      := 0;
    CurveScan            := 0;
    DayCalc              := 0;
    Year_1               := 0;
    Year_2               := 0;
    Year_3               := 0;
    Year_4               := 0;
    Month_1              := 0;
    Month_2              := 0;
    Month_3              := 0;
    Month_4              := 0;
    Service1_Date        := 0;
    Service2_Date        := 0;
    Service3_Date        := 0;
    Service4_Date        := 0;
    Temp_Byte_Date       := 0;
    BakimSelect          := 0;
    Bkm_Status           := 0;
    Bkm_Min              := 0;
    Bkm_Hour             := 0;
    BakimStartBit        := 0;
    Bakim_Start          := 0;
    BakimLockBit         := 1;
    BakimControlBit      := 0;
    QuitVoltBit          := 0;
    Service_Charge_StateBit := 10;
    
    Bat_Service_Timer_bit := 0;
    Bat_Service_Unit1     := 1;
    Bat_Service_Unit2     := 1;
    BakimInitBit          := 0;
    Bat_Service_Timer     := 0;
    Bat_Curve_Scan_State_bit := 10;
    Battery_Current_Capacity := 0;
    Curve_Time               := 0;
    First_Bat_Current        := 0;
    bat_curve_scan_fail      := 0;
    
    Redresor_OK_Bit          := 1;
    
    WriteText := '       ';
    
    FirstStartUpBattMenu  := 0;
    
    posleakbit  := 0;
    negleakbit  := 0;
    PosCounter  := 0;
    NegCounter  := 0;

    ADC_LeakRAW := 0;
    ADC_LeakRAW2:= 0;
    LeakCounter := 0;
    
    ScreenView        := 0;
    ScreenCounter     := 0;
    FreqHAM           := 0;
    FreqViewCounter   := 0;
    FreqLossCounter   := 0;
    FreqBit           := 0;
    
    AC_Real           := 0.0;
    Read_AC_RAW       := 0;
    
    TotalPOWER_kW     := 0.0;
    Reel_Current      := 0.0;
    
    UpButonCounter    := 0;
    UP_PressBit       := 0;
    viewbyte          := 1;
    
    ACVolt_Different  := 0;
    AC_ProtectBit     := 0;
    ACVoltDifferentBit:= 0;
    
    U1Volt_Diff       := 0;
    U2Volt_Diff       := 0;
    U3Volt_Diff       := 0;
    
    KacakSensor       := 0;
    CalibValue        := 0;
    
    CaseHeaterActiveBit := 0;
    DiodeValue          := 0;
    
    DischargeProtect_Pin := 1;



    



    
    LogBit_Config(); // loglarýn datalarýný temizle
    


    HC595_CS3_Pin := 1;
    Delay_Cyc_Long(5);
    HC595_CS3_Pin := 0;
    Delay_Cyc_Long(5);

    SPI1_Write(0x00);

    HC595_CS3_Pin := 1;
    Delay_Cyc_Long(5);




    HC595_CS2_Pin := 1;
    Delay_Cyc_Long(5);
    HC595_CS2_Pin := 0;
    Delay_Cyc_Long(5);

    SPI1_Write(0x00);

    HC595_CS2_Pin := 1;
    Delay_Cyc_Long(5);





    HC595_CS1_Pin := 1;
    Delay_Cyc_Long(5);
    HC595_CS1_Pin := 0;
    Delay_Cyc_Long(5);

    SPI1_Write(0x00);

    HC595_CS1_Pin := 1;
    Delay_Cyc_Long(5);
    

    

    

 end;
//******************************************************************************
Function AnalogRead(Const Channel : byte; _Sample : word):word;
var ADC_Ham    : LongInt;
    TempSample : word;
 begin
     ADC_Ham    := 0;
     TempSample := 0;

     for TempSample := 1 to _Sample do
      begin

          asm
            clrwdt;
          end;

          ADC_Ham := (ADC_Ham + ADC1_Read(Channel));
          Delay_us(10);

      end;

     Result := ADC_Ham div _Sample;
     
 end;
//******************************************************************************
Procedure FanAmpsRead();
 begin
     {AnalogRead(2);
     FanAmpsRaw := Adc_Value;}
     
     FanAmpsRaw := AnalogRead(2,Adc_Sample);
     
     {
      24V DC Fan = ~200mA
      Direnç     = 0.1R
      
      Vf         = 0.2x0.1
      Vf         = 20mV
      Digital    = 0.02V/0.0012V
      Digital    = 16
      
      16 digital deðer bizim fan çalýþabilir deðerimiz.
      programda 5 digitalden küçükse fan hatalý diyeceðiz.
     
     iki fan paralel baðlý olursa bu deðer 2 katý olur yani 16 digital*2 = 32 digital
     
     iki fan çalýþýrken 33mV ölçüldü
     
     
     }
     
     if (FanAmpsRaw < 5) then
         FanFaultBit     := 1 else
         FanFaultBit     := 0;
     
 end;
//******************************************************************************
Procedure LoadVoltageRead();
 begin

      Inc(LV_ScreenCounter);

      if (LV_ScreenCounter < 8) then
        begin

          LoadVolt_Real := 0.0;

          {AnalogRead(9);
          Dig_LoadVolt  := Adc_Value;}
          
          Dig_LoadVolt := AnalogRead(9,Adc_Sample);

          {AnalogRead(5);
          ADC_LeakRAW := ADC_LeakRAW + Adc_Value; // Adc_Leakage}
          
          ADC_LeakRAW  := AnalogRead(5,Adc_Sample);
          ADC_LeakRAW2 := ADC_LeakRAW2 + ADC_LeakRAW;

          LoadVolt_Real    := Dig_LoadVolt - dV_LoadVolt;
          LoadVolt_Real    := ((LoadVolt_Real* Sample_RedVolt)/Sample_RedDigital);
          Read_LoadVoltRaw := (LoadVolt_Real * 10.0);

          LoadVoltRMS      := LoadVoltRMS + Read_LoadVoltRaw;

          Dig_LoadVoltLeakRAW := Dig_LoadVoltLeakRAW + Dig_LoadVolt; // kaçak için load volt digital deðerinin rms' i hesaplanacak, gürültüden etkilenmemesi için


        end else
      if (LV_ScreenCounter > 7) then
        begin

             Read_LoadVolt    := LoadVoltRMS div 7; // 25 ayrý zamanda alýnan örneklerin ortalamasý
             Dig_LoadVoltLeak := Dig_LoadVoltLeakRAW div 7; // kaçak için load volt' un digital deðeri rms olarak hesaplandý

             Adc_Leakage  := ADC_LeakRAW2 div 7;
             ADC_LeakRAW2 := 0;

             if (KacakSensor = 0) then // kaçak algýlama analog yapýlacaksa
               begin

                 Adc_Consideration;

                 Leakage_Status := (Read_LoadVolt/10)*(1833/((HucreSayisi*2)*1.36));
                 Leakage_Volt := Adc_Leakage; /// Dijital Deðer
                 if (Leakage_Volt <= 0) then Leakage_Volt := 0;

                 Leakage_Function; // kaçak akýmlarý kontrol et

               end else
             if (KacakSensor = 1) then // kaçak algýlama digital yapýlacaksa
               begin
               
                    if ((Adc_Leakage > 650)and(Adc_Leakage < 1638)) then // + kaçak durumunda 2,6V oluyor buna göre 2,40V (1965) ile 2,90V (2375) arasý + kaçak deðeri
                      begin                                               // PCB kart yanlýþ çizildiði için deðerler deðiþti. + kaçak durumunda 1,35V
                         if (Leakage_Pos_Set >= 1) then                    // - kaçak durumunda 0,2V gerilim ölçülüyor   17.05.2019
                           begin
                                posleakbit := 1;
                                negleakbit := 0;
                           end else
                         if (Leakage_Pos_Set < 1) then
                           begin
                                posleakbit := 0;
                                negleakbit := 0;
                           end;
                      end else
                   //if ((Adc_Leakage > 2457)and(Adc_Leakage < 2950)) then // - kaçak durumunda 3,27V oluyor buna göre 3,00V (2457) ile 3,60V (2950) arasý - kaçak deðeri
                   if (Adc_Leakage < 400) then // - kaçak durumunda 3,27V oluyor buna göre 3,00V (2457) ile 3,60V (2950) arasý - kaçak deðeri
                     begin                                               // PCB kart yanlýþ çizildiði için deðerler deðiþti. + kaçak durumunda 1,35V
                         if (Leakage_Neg_Set >= 1) then                   // - kaçak durumunda 0,2V gerilim ölçülüyor    17.05.2019
                           begin
                               posleakbit := 0;
                               negleakbit := 1;
                           end else
                         if (Leakage_Neg_Set < 1) then
                           begin
                               posleakbit := 0;
                               negleakbit := 0;
                           end;
                     end else
                     begin
                          posleakbit := 0;
                          negleakbit := 0;
                     end;
               
               end;


             LV_ScreenCounter    := 0;
             LoadVoltRMS         := 0;
             Read_LoadVoltRaw    := 0;
             Dig_LoadVoltLeakRAW := 0;

        end;

      if (BakimStartBit = 1) then
          begin
              if (Read_LoadVolt < QuitVolt) then
                  QuitVoltBit := 1 else QuitVoltBit := 0;
          end;

      if (Read_LoadVolt < 50) then // 5.0V küçükse sýfýr yaz
          Read_LoadVolt := 0;


      {

      hücre sayýsýna göre otomatik olarak hesap yapýlýr.
      Sample_RedDigital ve Sample_RedVolt deðerleri otomatik olarak hücre sayýsýna göre atanýr.
      Bknz. Data_EepromRead();
      Buna göre yukarýda formül uygulanýr.
      Böylelikle farklý redresör gerilimlerinde de ayný kod çalýþtýrýlýr.


      }




 
 
 
 
 end;
//******************************************************************************
{procedure BatteryVoltageRead();
  begin
  
      BatteryVolt_Real := 0.0;

      AnalogRead(10);
      Dig_BatteryVolt  := Adc_Value;


      BatteryVolt_Real := Dig_BatteryVolt - dV_BatteryVolt;
      BatteryVolt_Real := ((BatteryVolt_Real*Sample_RedVolt)/Sample_RedDigital);
      Read_BatteryVolt := (BatteryVolt_Real * 10);

      if (Read_BatteryVolt < 50) then // 5.0V küçükse sýfýr yaz
          Read_BatteryVolt := 0;


  
  end;
//****************************************************************************** }
Procedure TempCompansation_Measurement();
var TempCompRAW : word;
    TempRawReal : real;
 begin
      
      TempRawReal     := 0.0;
      TempCompRAW     := 0;
      {AnalogRead(14);//14. channel
      TempCompRAW     := Adc_Value;}
      TempCompRAW     := AnalogRead(14,Adc_Sample);

      //TempComp := (TempCompRAW * 1.0)/10.00;
      
      TempRawReal := (TempCompRAW/0.817);
      TempComp    := TempRawReal / 10;
      
      if (ChargeMode = TComp) then // þarj modu sýcaklýk komp. ise
       begin
           TCompV        := ((TempComp - 20.0)*0.003);
           Tcomp2        := NomHucreGerilim / 100.0;
           Tcomp2        := (HucreSayisi*(Tcomp2-TCompV))*10.0;
           TempComp_Volt := Tcomp2;
       end;



 end;
//******************************************************************************
Procedure Temperature_Measurement();
var PCBTempRawReal : real;
 begin
 
      PCBTempRawReal := 0.0;

      //PCB_Temperature := 0;
      PCB_TempHAM     := 0;
      {AnalogRead(15);
      PCB_TempHAM     := Adc_Value;}
      PCB_TempHAM     := AnalogRead(15,Adc_Sample);

      //PCB_Temperature := (PCB_TempHAM * 1.0)/10.00;
      
      PCBTempRawReal  := (PCB_TempHAM / 0.817);
      PCB_Temperature := PCBTempRawReal / 10;
      PCB_Temperature := PCB_Temperature - 7; // sýcaklýk sensörü iþlemciye çok yakýn olduðu için
                                              // 7C fark çýkýyor. Bu fark yazýlýmla çýkartýldý.
      
      byteToStr(PCB_Temperature, PCB_TempText);
      Glcd_Set_Font(@Small3x7, 3, 7, 32);
      Glcd_Write_Text(PCB_TempText,0,0,black);
      
      if ((PCB_Temperature > TempAlarmSet)or(Read_Temp = 1)) then // soðutucu sýcaklýðýndan kapandýðýnda da aþýrý sýcaklýk alarmý versin 27.01.2020
        TempHighBit := 1 else
        TempHighBit := 0;



      {if (PCB_Temperature > TemperatureSET) then
          HighTemp_Bit := 1 else
      if (PCB_Temperature < TemperatureSET -1) then
          HighTemp_Bit := 0;}
 end;
//******************************************************************************
{procedure RTC_Write( addr : byte; value : byte);
begin
  I2C1_Start();            // Issue start signal
  I2C1_Write(0xD0);        // Address DS1307
  I2C1_Write(addr);        // Start from address
  I2C1_Write(value);       // Write value to RTC register
  I2C1_Stop();             // Issue stop signal
end;      }
//******************************************************************************
procedure AkuBakim_Kontrol();
  begin


       if ((Bkm_Status = 1)and(BakimControlBit = 0)) then // bakým yapýlacaksa
         begin
              if (ServiceCycle = 1) then
                begin

                    if ((Year = (Service1_Date mod 100))and(Month =(Service1_Date div 100))and
                        (day = 15)) then
                      begin

                          if ((Hours = (Bakim_Start_Time div 100))and(Minutes = (Bakim_Start_Time mod 100))) then
                            begin
                                BakimStartBit     := 1;
                                BakimControlBit   := 1; // bir daha girme
                                BakimSelect       := 1;

                                DateCalculator(); // yeni tarih hesapla

                            end;

                      end;

                end else
              if (ServiceCycle = 2) then
                begin

                    if  (((Year = (Service1_Date mod 100))and(Month =(Service1_Date div 100))or
                          (Year = (Service2_Date mod 100))and(Month =(Service2_Date div 100)))and
                          (day = 15)) then
                      begin



                          if ((Hours = (Bakim_Start_Time div 100))and(Minutes = (Bakim_Start_Time mod 100))) then
                            begin
                                BakimStartBit     := 1;
                                BakimControlBit   := 1; // bir daha girme

                                if ((Year = (Service2_Date mod 100))and(Month =(Service2_Date div 100))) then
                                   begin
                                      BakimSelect       := 1;
                                      DateCalculator(); // yeni tarih hesapla
                                   end;


                            end;

                      end;

                end else
              if (ServiceCycle = 3) then
                begin

                    if  (((Year = (Service1_Date mod 100))and(Month =(Service1_Date div 100))or
                          (Year = (Service2_Date mod 100))and(Month =(Service2_Date div 100))or
                          (Year = (Service3_Date mod 100))and(Month =(Service3_Date div 100)))and
                          (day = 15)) then
                      begin


                          if ((Hours = (Bakim_Start_Time div 100))and(Minutes = (Bakim_Start_Time mod 100))) then
                            begin
                                BakimStartBit     := 1;
                                BakimControlBit   := 1; // bir daha girme

                                if ((Year = (Service3_Date mod 100))and(Month =(Service3_Date div 100))) then
                                   begin
                                      BakimSelect       := 1;
                                      DateCalculator(); // yeni tarih hesapla
                                   end;

                            end;

                      end;

                end else
              if (ServiceCycle = 4) then
                begin

                    if  (((Year = (Service1_Date mod 100))and(Month =(Service1_Date div 100))or
                          (Year = (Service2_Date mod 100))and(Month =(Service2_Date div 100))or
                          (Year = (Service3_Date mod 100))and(Month =(Service3_Date div 100))or
                          (Year = (Service4_Date mod 100))and(Month =(Service4_Date div 100)))and
                          (day = 15)) then
                      begin

                          if ((Hours = (Bakim_Start_Time div 100))and(Minutes = (Bakim_Start_Time mod 100))) then
                            begin
                                BakimStartBit     := 1;
                                BakimControlBit   := 1; // bir daha girme

                                if ((Year = (Service4_Date mod 100))and(Month =(Service4_Date div 100))) then
                                   begin
                                      BakimSelect       := 1;
                                      DateCalculator(); // yeni tarih hesapla
                                   end;

                            end;

                      end;

                end;



         end;


  end;
//******************************************************************************
procedure Read_Time( p_hours : ^byte; p_minutes : ^byte; p_seconds : ^byte; p_day : ^byte; p_week : ^byte; p_month : ^byte; p_year : ^byte);
  begin

      asm
        clrwdt;
      end;

      I2C1_Start();                   // Issue start signal
      I2C1_Write(0xD0);           // Address DS1307, see DS1307 datasheet
      I2C1_Write(0);                  // Start from address 0
      I2C1_Restart();                 // Issue repeated start signal
      I2C1_Write(0xD0 + 1);       // Address DS1307 for reading R/W=1

      p_seconds^ := I2C1_Read(0);     // Read seconds byte
      p_minutes^ := I2C1_Read(0);     // Read minutes byte
      p_hours^   := I2C1_Read(0);       // Read hours byte
      p_week^    := I2C1_Read(0);
      p_day^     := I2C1_Read(0);
      p_month^   := I2C1_Read(0);
      p_year^    := I2C1_Read(1);

      I2C1_Stop();                    // Issue stop signal
  end;
//******************************************************************************
procedure Write_Time( c_hours : byte; c_minutes : byte; c_seconds : byte; c_day : byte; c_week : byte; c_month : byte; c_year : byte);
  begin
       asm
         ClrWdt;
       end;

       I2C1_Start();                        // issue start signal
       I2C1_Write(0xD0);                // address DS1307
       I2C1_Write(0);                       // start from word at address (REG0)
       I2C1_Write(0x80);                    // write $80 to REG0. (Pause_ms counter + 0 sec)

       I2C1_Write(c_minutes);               // write 0 to minutes word to (REG1)
       I2C1_Write(c_hours);                 // write 17 to hours word (24-hours mode)(REG2)
       I2C1_Write(c_week);                  // write 2 - Monday (REG3)
       I2C1_Write(c_day);                   // write 4 to date word (REG4)
       I2C1_Write(c_month);                 // write 5 (May) to month word (REG5)
       I2C1_Write(c_year);                  // write 01 to year word (REG6)
       I2C1_Stop();                         // issue stop signal

       I2C1_Start();                        // issue start signal
       I2C1_Write(0xD0);                // address DS1307
       I2C1_Write(0);                       // start from word at address 0
       I2C1_Write(0 or c_seconds);          // write 0 to REG0 (enable counting + 0 sec)
       I2C1_Stop();                         // issue stop signal
  end;
//******************************************************************************
procedure Show_Time();
begin
        asm
          clrwdt;
        end;


        {seconds  :=  ((seconds and 0x70) shr 4)*10 + (seconds and 0x0F);
        minutes  :=  ((minutes and 0xF0) shr 4)*10 + (minutes and 0x0F);
        hours    :=  ((hours and 0x30) shr 4)*10 + (hours and 0x0F);
        week     :=  (week and 0x07);
        day      :=  ((day and 0xF0) shr 4)*10 + (day and 0x0F);
        month    :=  ((month and 0x10) shr 4)*10 + (month and 0x0F);
        year     :=  ((year and 0xF0) shr 4)*10+(year and 0x0F);
        bu kýsým aþaðýdaki fonksiyonla ayný }

        Seconds  :=  Bcd2Dec16(seconds);
        minutes  :=  Bcd2Dec16(minutes);
        hours    :=  Bcd2Dec16(hours);
        week     :=  Bcd2Dec16(Week);
        day      :=  Bcd2Dec16(Day);
        month    :=  Bcd2Dec16(Month);
        year     :=  Bcd2Dec16(Year);
        
        AkuBakim_Kontrol();


        {SendHour := Hours*100;
        SendHour := SendHour+minutes;  ModBUS için gerekli }


        Clock_Text[1]  := (Hours div 10)+48;
        Clock_Text[2]  := (hours mod 10)+48;
        //Clock_Text[3]  := ':';
        Clock_Text[4]  := (Minutes div 10)+48;
        Clock_Text[5]  := (Minutes mod 10)+48;

//        Glcd_Set_Font(@Digital5x7_3257,5,7,32); Untitled4x6
        Glcd_Set_Font(@Small3x7,3,7,32);
        Glcd_Write_Char(Clock_Text[1],111,0,Black);
        Glcd_Write_Char(Clock_Text[2],115,0,Black);
        Glcd_Write_Char(Clock_Text[4],121,0,Black);
        Glcd_Write_Char(Clock_Text[5],125,0,Black);
        

        Date_text[1] := (day div 10)+48;
        Date_text[2] := (day mod 10)+48;
        //Date_text[3] := '.';
        Date_text[4] := (Month div 10)+48;
        Date_text[5] := (Month mod 10)+48;
        //Date_text[6] := '.';
        Date_text[7] := '2';
        Date_text[8] := '0';
        Date_text[9] := (Year div 10)+48;
        Date_text[10]:= (Year mod 10)+48;

        Glcd_Write_Char(Date_text[1],68,0,Black);
        Glcd_Write_Char(Date_text[2],72,0,Black);
        Glcd_Write_Char(Date_text[4],79,0,Black);
        Glcd_Write_Char(Date_text[5],83,0,Black);
        Glcd_Write_Char(Date_text[7],90,0,Black);
        Glcd_Write_Char(Date_text[8],94,0,Black);
        Glcd_Write_Char(Date_text[9],98,0,Black);
        Glcd_Write_Char(Date_text[10],102,0,Black);




end;
//******************************************************************************
procedure Led_Write(Led1_Data, Led2_Data, Led3_Data : byte);
 begin
     HC595_CS1_Pin := 1;
     HC595_CS2_Pin := 1;
     HC595_CS3_Pin := 1;
     Delay_Cyc_Long(1);
     HC595_CS1_Pin := 0;
     Delay_Cyc_Long(1);
     
     SPI1_Write(Led1_Data);

     HC595_CS1_Pin := 1;
     Delay_Cyc_Long(1);

     HC595_CS1_Pin := 1;
     HC595_CS2_Pin := 1;
     HC595_CS3_Pin := 1;
     Delay_Cyc_Long(1);
     HC595_CS2_Pin := 0;
     Delay_Cyc_Long(1);

     SPI1_Write(Led2_Data);

     HC595_CS2_Pin := 1;
     Delay_Cyc_Long(1);

     HC595_CS1_Pin := 1;
     HC595_CS2_Pin := 1;
     HC595_CS3_Pin := 1;
     Delay_Cyc_Long(1);
     HC595_CS3_Pin := 0;
     Delay_Cyc_Long(1);

     SPI1_Write(Led3_Data);

     HC595_CS3_Pin := 1;
     Delay_Cyc_Long(1);


     
 end;
//******************************************************************************
Procedure ButonTimer();
 begin

    if ((Up_Button =0) or (Down_Button =0)) then
        begin

           ButonStop := 0;
           Inc(BtCounter1);


           if (BtCounter1 < 2000) then
             begin
                 ButonStart := 1;
                 ButonStop  := 0;
             end else
           if ((BtCounter1 > 2000)and(BtCounter1 < 7000)) then
             begin
                 ButonStart := 2;
                 ButonStop  := 0;
             end else
           if (BtCounter1 > 7000) then
             begin
                 ButonStart := 3;
                 ButonStop  := 0;
                 BtCounter1 := 7002;
             end;

        end else
        begin
            BtCounter1 := 0;
        end;


     if (ButonStart = 1) then
      begin
       Inc(BtCounterNormal);
       if (BtCounterNormal > 300) then
         begin
             BtCounterNormal := 0;
             ButonStop       := 1;
             ButonStart      := 0;
         end else ButonStop  := 0;
      end else
     if (ButonStart = 2) then
      begin
       Inc(BtCounterNormal);
       if (BtCounterNormal > 50) then
         begin
             BtCounterNormal := 0;
             ButonStop       := 1;
             ButonStart      := 0;
         end else ButonStop  := 0;
      end else
     if (ButonStart = 3) then
      begin
       Inc(BtCounterNormal);
       if (BtCounterNormal > 5) then
         begin
             BtCounterNormal := 0;
             ButonStop       := 1;
             ButonStart      := 0;
         end else ButonStop  := 0;
      end else BtCounterNormal := 0;

 end;
//******************************************************************************
procedure Run_Timers;
  begin


      T3CON := %1000000000010000; //start TMR3
      T4CON := 0x8000; //start TMR4

      //ModBus_TimeOut := 0;    //' clear down frame timeout TIMER0 on char reception (>3.5 chars without a char is a frame timeout)

  end;
//******************************************************************************
procedure InitFreqCalculateTmr();
 begin

      IPC0   := IPC0 or $0020; //Interrupt priority level IC1IP<4:6> = 2
      IEC0   := IEC0 or $0042; //Interrupt Input Compare module enable
      PR2    := 15000; //PR2 register at maximum, timer2 free-running
      //T2CON  := $8030; //Timer 2 operates with prescaler 1:256 and internal clock
      IC1CON := $0084; //Configuration of Input  Capture module 1, selected TMR2,
                       //capture on falling edge


 end;
//******************************************************************************
procedure Input1CaptureInt; org $16;
begin

   TMR2 := 0X0000;
   IC1CON.0 := 0;
   IC1CON.1 := 0;
   IC1CON.2 := 0;


   FreqHAM := IC1BUF ;
   FreqBit := 1;

   IFS0.1 := 0;      //Clear bit IC1IF (IFS<1>)
   IC1CON.0 := 0;
   IC1CON.1 := 0;
   IC1CON.2 := 1;


end;
//******************************************************************************
Function Explode(_Data : byte) : byte;
 begin
      _Data.7   := 0;
      _Data.6   := 0;
      Result    := _Data;
 end;
//******************************************************************************
Function Collect(_DataLo, _DataHi : byte):word;
var Temp_Word : word;
 begin
        Temp_Word := _DataHi Shl 8;
        Result    := (Temp_Word or _DataLo);

 end;
//------------------------------------------------------------------------------
Procedure Comm_Interface(Control, RW, Style, Addr : byte; _Data : word);
var Temp_Array :byte;
 begin
      Temp_Array := 0;

      Temp_Array.7 := Control;
      Temp_Array.6 := RW;
      Temp_Array.5 := Style.5;
      Temp_Array.4 := Style.4;
      Temp_Array.3 := Style.3;
      Temp_Array.2 := Style.2;
      Temp_Array.1 := Style.1;
      Temp_Array.0 := Style.0;

      MasterData[0] := Temp_Array;
      MasterData[1] := lo(_Data);
      MasterData[2] := Hi(_Data);
      MasterData[3] := 3;
      MasterData[4] := 0;
      MasterData[5] := 0;
      //MasterData[6] := Addr;

      Rs485master_Send(MasterData, 3, Addr);




 end;
//******************************************************************************
Procedure Gemta_Uart_Write(Buffer0, Addr : byte; Buffer1: word);
{
 Buffer[0] := sleave için iþlenecek veri bilgisi
 Buffer[1] := sleave için yazýlacak verinin low byte' ý
 Buffer[2] := sleave için yazýlacak verinin high byte' ý
 
 Buffer[0] := 60;       // akým bilgisini gönder
 Buffer[1] := lo(123);  // akým bilgisinin low byte' ý
 Buffer[1] := hi(123);  // akým bilgisinin high byte' ý
 
 yani Sleave Buffer[0]' ý 60 olarak alýrsa, master' a akým bilgisini gönderecektir.
 
 
 
 Buffer[0] := 62;       // nominal akým bilgisini al
 Buffer[1] := lo(60);   // Sleave 60 deðerininin low byte'ýný akým bilgisine iþleyecek
 Buffer[1] := hi(60);   // Sleave 60 deðerininin high byte'ýný akým bilgisine iþleyecek
 
 yani Sleave Buffer[0]' ý 62 olarak alýrsa gelecek olan data nominal akým bilgisidir ve sadece okunacaktýr.
 Burada Sleave alýnan datalarý tekrar master' a gönderir. Ve master datalarý kontrol eder.
 Master tarafýndan gönderilen data ile sleave' den cevap olarak gelen data ayný ise haberleþme baþarýlýdýr.
 
}
 begin
      
      //if ((OperationMode = 2)and(MasterSlave = 2)and(StopBit =1)) then // yedekli-slave ise ve yedek redresör çalýþmayacaksa
        //begin
        //     MCU_State_LED := not MCU_State_LED;
        //end else
      //if ((OperationMode = 1)or(OperationMode = 3)or StopBit = 0) then  // tekli or paralel ise veya redresör çalýþma bilgisi gelmiþse
        //begin
            MasterData[0]   := Buffer0;         // hangi verinin iþleneceði bilgisi
            MasterData[1]   := lo(Buffer1);     // yazýlacak verinin low byte' ý
            MasterData[2]   := hi(Buffer1);     // yazýlacak verinin high byte' ý
            MasterData[3]   := 3;               // 3 byte' lýk veri olduðu için
            MasterData[4]   := 0;
            MasterData[5]   := 0;
            MasterData[6]   := Addr;
            Rs485master_Send(MasterData, 3, Addr);

            ReceiveAddr := ReceiveData[6];
            ReceiveData[6] := 0;
        //end;

 end;
//******************************************************************************
procedure Uart2_Interrupt(); org IVT_ADDR_U2RXINTERRUPT;
  begin

    RS485Master_Receive(ReceiveData);
    
    U2RXIF_bit := 0;                  // ensure interrupt not pending

    //MCU_State_LED := not MCU_State_LED;

    
  end;
//******************************************************************************
Procedure Uart_Communication_Function(_Request : byte);
var IstekByte, Addr : byte;
    Veri, SaveData : word;
    Write_UartData : array [1..24] of word;

  begin
  
  
            Write_UartData[1]   := 0; // GTT-I Read_BattAmps
            Write_UartData[2]   := 0; // GTT-I Read_TotalAmps
            Write_UartData[3]   := 0; // GTT-I Read_RedVolt
            Write_UartData[4]   := 0; // GTT-I Read_Temp
            Write_UartData[5]   := RectifierVoltage_Set;
            Write_UartData[6]   := (HucreSayisi*20); // redresör nominal gerilimi  55*20=1100 þeklinde
            Write_UartData[7]   := (RedresorAkim*10);    // redresör nominal akým 60*10=600 þeklinde
            Write_UartData[8]   := BatteryAmpsSet;  // akü akým set
            Write_UartData[9]   := DcOutAmpsSet;    // dc çýkýþ akýmý set
            Write_UartData[10]  := 0; // tristör kartý þarj deþarj bilgisi
            Write_UartData[11]  := 0; // GTT-I Alpha Deðeri
            Write_UartData[12]  := 0; // GTT-I Fazlar
            Write_UartData[13]  := 0; // GTT-I Dip-Switchler
            Write_UartData[14]  := 0; // GTT-I NomVolt deðeri
            Write_UartData[15]  := 0; // GTT-I NomAmps deðeri
            Write_UartData[16]  := 0; // GTT-I BatRawAmps
            Write_UartData[17]  := 0; // GTT-I RedRawAmps
            Write_UartData[18]  := 0; // GTT-I RedRawVlt
            Write_UartData[19]  := 0; // GTT-I RatedVolt  GTT-I'ye kaydedilen data
            Write_UartData[20]  := 0; // GTT-I RatedAmps  GTT-I'ye kaydedilen data
            Write_UartData[21]  := StopBit; // durdurma biti   1 = Dur, 0 = Çalýþ
            Write_UartData[22]  := CalibValue;
            Write_UartData[23]  := Relay_Out_Data; //
            Write_UartData[24]  := DiodeValue;
            
            IstekByte     := _Request;
            Veri          := Write_UartData[_Request];


            if ((IstekByte >0)and(IstekByte <23)) then Addr := Comm_ThrystorModule_Addr else
            if (IstekByte = 23) then Addr := Comm_RelayModule;
            if (IstekByte = 24) then Addr := Comm_ThrystorModule_Addr;

            if ((ReceiveData[0] = IstekByte)and(ReceiveData[6] = Addr)) then // gelen data istenilen dataya eþit ise
              begin
                  Inc(Request_Counter);
                  SaveData := Collect(ReceiveData[1], ReceiveData[2]); // lo ve hi datalarý birleþtir
                  RequestFault_Counter   := 0; // hata olmadý sayacý sýfýrla

              end else
            if ((ReceiveData[0] <> IstekByte)or(ReceiveData[6] <> Addr)) then // gelen data istenilen dataya eþit deðil ise
              begin
                  Gemta_Uart_Write(_Request, Addr, Veri);
                  MCU_State_LED := not MCU_State_LED;
                  Inc(RequestFault_Counter);
                  if (RequestFault_Counter > 2) then
                    begin
                         RequestFault_Counter   := 0;
                         Inc(Request_Counter);
                    end;
              end;
          
          if (Request_Counter > 24) then Request_Counter := 1;
                  
           if (ReceiveData[6] = Comm_ThrystorModule_Addr) then
              begin
                if (IstekByte  = 1) then Read_BattAmps    := SaveData else
                if (IstekByte = 2)  then Read_TotalAmps   := SaveData else
                if (IstekByte = 3)  then Read_RedVolt     := SaveData else
                if (IstekByte = 4)  then Read_Temp        := SaveData else
                if (IstekByte = 10) then ChargeStatus     := savedata else
                if (IstekByte = 11) then Read_Alpha       := SaveData else
                if (IstekByte = 12) then Read_Phases      := SaveData else
                if (IstekByte = 13) then Read_DSW         := SaveData else
                if (IstekByte = 14) then Read_NomVolt     := SaveData else
                if (IstekByte = 15) then Read_NomAmp      := SaveData else
                if (IstekByte = 16) then Read_BatRawAmp   := SaveData else
                if (IstekByte = 17) then Read_RedRawAmp   := SaveData else
                if (IstekByte = 18) then Read_RedRawVlt   := SaveData else
                if (IstekByte = 19) then Read_RatedVolt   := SaveData else
                if (IstekByte = 20) then Read_RatedAmps   := SaveData;
              end;
  
  end;
//******************************************************************************
procedure Comm_Fault_Check();
 begin
      
      if (ReceiveAddr <> Comm_ThrystorModule_Addr) then // tristör kartýndan haberleþme hatasý varsa
        begin
             Inc(ThryFaultCount); // tristör haberleþme hata sayacýný artýr
             if (ThryFaultCount > 5000) then // 2sn boyunca hata varsa
               begin
                   ThryFaultCount     := 0;
                   ThryCommFault      := 255;
               end;
        end else
        begin
            ThryFaultCount     := 0;
            ThryCommFault      := 0;
            LogBit_GTTCommFault:= 0;
        end;
 
 
      if (ReceiveAddr <> Comm_RelayModule) then // röle kartýndan haberleþme hatasý varsa
        begin
             Inc(RlyFaultCount); // röle haberleþme hata sayacýný artýr
             if (RlyFaultCount > 5000) then // 2sn boyunca hata varsa
               begin
                   RlyFaultCount     := 0;
                   RlyCommFault      := 255;
               end;
        end else
        begin
            RlyFaultCount      := 0;
            RlyCommFault       := 0;
            LogBit_RlyCommFault:= 0;
        end;

 end;
//******************************************************************************
procedure Timer3Int; iv IVT_ADDR_T3INTERRUPT ; //modbus timeout timer
  begin

      IEC0.7 :=0;
      T3CON := %0000000000000000; //stop TMR2

      if ModBus_TimeOut < 250 then
      ModBus_TimeOut := ModBus_TimeOut+1;

      IFS0.7 :=0;
      IEC0.7 :=1;
      T3CON := %1000000000000000; //start TMR2

  end;
//******************************************************************************
procedure UART1_int(); org 0x26;
  begin

      IEC0.7 :=0; // disable TMR3IF
      T3CON := %0000000000000000; //stop TMR3



      Comm_Tmr := 0;
      
      UART1_Read_Text(test_Text,'*',10);

     {if Modbus_Adress <> 0 then
      begin
        if (UART1_Data_Ready()=1) then
          begin
              Modbus_Data := Uart1_Read();

              if Receive_Enable = 255 then
                begin
                  if Modbus_Rx_data_index < 10 then  //const_modbus_TxBufSize then
                  begin
                    Inc(Modbus_Rx_data_index);     // only interested in first few chars containing command others can be biffed

                    Modbus_Rx_data[Modbus_Rx_data_index] := Modbus_Data;  // read the received data from USART 1 into cmd buffer

                  end;
                end;
          end;
      end;}

      PR3  := ModBus_TimeOut_Timer3_PR3;
      IEC0.7 :=1;
      ModBus_TimeOut := 0;    //' clear down frame timeout TIMER0 on char reception (>3.5 chars without a char is a frame timeout)
      T3CON := %1000000000000000; //start TMR2


      IFS0.const_UART1_RX_IF_IFS0 := 0 ; //ensure interrupt not pending
  end;
//******************************************************************************
procedure Led_RelayControl();
 begin
      
      if (Read_LoadVolt < DeepDischargeVolt) then
        begin
            Inc(DDischargeCounter);
            if (DDischargeCounter > FltTime) then
              begin
                  Led2_Group.Led2_BattReverse           := 1;
                  Relay_Out_Data.RlyOut_11_BattReverse  := 1;
                  Rly_BattReverseBit                    := 1;
                  DDischargeCounter                     := FltTime + 5;
                  DDschargeBit                          := 1;
                  DDschargeControlBit                   := 1;
                  
                  DischargeProtect_Pin                  := 0; // derin deþarj koruma rölesi aktif yani kontaktör býrakýldý yük ayrýldý

              end;
        end;
      
      if (DDschargeControlBit = 1) then // sistem derin deþarja girmiþse
        begin
            if (Read_LoadVolt >= ((HucreSayisi*2)*(F_ChargePercentHi * 0.1))) then // derin deþarjdan çýkmak için nominal þarj gerilimine ulaþsýn ((55x2)*(115x0,1)) = 126,5
              begin
                   Led2_Group.Led2_BattReverse          := 0;
                   Relay_Out_Data.RlyOut_11_BattReverse := 0;
                   Rly_BattReverseBit                   := 0;
                   DDischargeCounter                    := 0;
                   DDschargeBit                         := 0;
                   LogBit_DdschFault                    := 0;
                   DDschargeControlBit                  := 0;
                   
                   DischargeProtect_Pin                 := 1; // derin deþarj koruma rölesi kapalý yani kontaktör çekildi yük devrede
                   
              end;
        end;
      
      if ((Read_U1Volt > ACMaxVoltSet)or(Read_U2Volt > ACMaxVoltSet)or(Read_U3Volt > ACMaxVoltSet)) then
       begin
           Inc(ACFltCounter1);
           if (ACFltCounter1 > FltTime) then
             begin
                  Led1_Group.Led1_AcHigh := 1;
                  Relay_Out_Data.RlyOut_1_AcHigh := 1;
                  Rly_AcHighBit                  := 1;
                  ACFltCounter1          := FltTime + 5; // fazlasý yazýlýr sürekli burada kalsýn diye
                  AcHighFaultBit             := 1;
             end;
             
       end else 
       begin
            Led1_Group.Led1_AcHigh         := 0;
            Relay_Out_Data.RlyOut_1_AcHigh := 0;
            Rly_AcHighBit                  := 0;
            ACFltCounter1                  := 0;
            AcHighFaultBit                 := 0;
            LogBit_AcHigh                  := 0; // olay kaydedicisi için
       end;
       
      if ((Read_U1Volt < ACMinVoltSet)or(Read_U2Volt < ACMinVoltSet)or(Read_U3Volt < ACMinVoltSet)) then
       begin
           Inc(ACFltCounter2);
           Inc(AcOnCounter);
           if (ACFltCounter2 > FltTime) then
             begin
                  Led1_Group.Led1_AcLow := 1;
                  Relay_Out_Data.RlyOut_2_AcLow   := 1;
                  Rly_AcLowBit                    := 1;
                  Relay_Out_Data.RlyOut_16_ExtOut := 0;
                  ACFltCounter2         := FltTime + 5; // fazlasý yazýlýr sürekli burada kalsýn diye
                  AclowFaultBit            := 1;
                  
             end;

           if ((AcOnCounter > 500)and(AcOnCounter < 1000)) then
             begin
                 Led1_Group.Led1_AcOn  := 1;
             end else
           if (AcOnCounter > 1000) then
             begin
                 Led1_Group.Led1_AcOn  := 0;
                 AcOnCounter           := 0;
             end;
           

       end else
       begin
            Led1_Group.Led1_AcLow           := 0;
            Relay_Out_Data.RlyOut_2_AcLow   := 0;
            Rly_AcLowBit                    := 0;
            Led1_Group.Led1_AcOn            := 1; // ac düþük deðilse AC gerilim var ve sürekli yan
            Relay_Out_Data.RlyOut_16_ExtOut := 1;
            ACFltCounter2                   := 0;
            AclowFaultBit                   := 0;
            LogBit_AcLow                    := 0; // olay kaydedicisi için
       end;

   if (AC_ProtectBit = 1) then // AC Koruma aktifse
    begin

         if ((abs(U1Volt_Diff) > ACVolt_Different) or (abs(U2Volt_Diff) > ACVolt_Different) or (abs(U3Volt_Diff) > ACVolt_Different) or(AcHighFaultBit = 1)or(AcLowFaultBit = 1)) then
            ACVoltDifferentBit := 1 else ACVoltDifferentBit := 0;
            
    end else ACVoltDifferentBit := 0;



        //***************Aþýrý-düþük dc gerilim bölümü************************************
          
      if ((StopBit = 0)or((OperationMode = 1)or(OperationMode = 3))) then // redresör çalýþýyorsa veya redresör tekli çalýþýyorsa
        begin
          
          RedVolt_HighPercent10Bit := (RectifierVoltage_Set*1.1);
          RedVolt_LowPercent10Bit  := (RectifierVoltage_Set*0.9);

          if ((BattAmpsLimitBit =0)and(RedAmpsLimitBit =0)) then // redresör ya da akü akým sýnýrlamaya girmemiþse kontrol et
            begin
                if ((Read_RedVolt > MaxvoltSet)or(Read_RedVolt > RedVolt_HighPercent10Bit)) then // ayarlanan gerilimden yüksekse ve ya set edilen deðerin %10'nundan fazla ise
                  begin
                      Inc(DcFaultRelayTime);
                      if (DcFaultRelayTime > (FltTime+2000)) then // burasý diðerlerinden farklý olarak 5sn sonra çalýþacak
                        begin
                            DcFaultRelayTime := FltTime + 5;
                            Led1_Group.Led1_DcHigh             := 1;
                            Led1_Group.Led1_DcLow              := 0;
                            Relay_Out_Data.RlyOut_3_DcHigh     := 1;
                            Relay_Out_Data.RlyOut_4_DcLow      := 0;
                            Rly_DcHighBit                      := 1;
                            Rly_DcLowBit                       := 0;
                            Relay_Out_Data.RlyOut_15_RedFault  := 1;
                            Rly_RedGenFaultBit                 := 1;
                            Led3_Group.Led3_RedFault           := 1;
                            RedFaultBit                        := 1;
                            DcHighBit                          := 1;
                        end;
                  end else
                if ((Read_RedVolt < MinVoltSet)or(Read_RedVolt < RedVolt_LowPercent10Bit)) then // ayarlanan gerilimden küçükse ve ya set edilen deðerin %10 altýnda ise
                  begin
                      Inc(DcFaultRelayTime);
                      if (DcFaultRelayTime > (FltTime+2000)) then  // burasý diðerlerinden farklý olarak 5sn sonra çalýþacak
                        begin
                            DcFaultRelayTime := FltTime + 5;
                            Led1_Group.Led1_DcLow              := 1;
                            Led1_Group.Led1_DcHigh             := 0;
                            Led3_Group.Led3_RedFault           := 1;
                            Relay_Out_Data.RlyOut_4_DcLow      := 1;
                            Relay_Out_Data.RlyOut_3_DcHigh     := 0;
                            Rly_DCHighBit                      := 0;
                            Relay_Out_Data.RlyOut_15_RedFault  := 1;
                            Rly_RedGenFaultBit                 := 1;
                            RedFaultBit                        := 1;
                            DcLowBit                           := 1;
                            DcHighBit                          := 0;
                        end;
                  end else
                  begin
                      DcFaultRelayTime                  := 0;
                      Led1_Group.Led1_DcLow             := 0;
                      Relay_Out_Data.RlyOut_4_DcLow     := 0;
                      Rly_DcLowBit                      := 0;
                      Led1_Group.Led1_DcHigh            := 0;
                      Relay_Out_Data.RlyOut_3_DcHigh    := 0;
                      Rly_DCHighBit                     := 0;
                      Relay_Out_Data.RlyOut_15_RedFault := 0;
                      Led3_Group.Led3_RedFault          := 0;
                      Rly_RedGenFaultBit                := 0;
                      if (Read_Temp =0) then RedFaultBit:= 0;
                      DcHighBit                         := 0;
                      DcLowBit                          := 0;
                      LogBit_DcHigh                     := 0; // olay kaydedicisi için
                      LogBit_DcLow                      := 0; // olay kaydedicisi için
                      LogBit_RedFault                   := 0;
                  end;
            end;
         end;
        //***************Aþýrý-düþük dc gerilim bölümü************************************


      if (Read_LoadVolt > 100) then // 10,0V' dan küçükse kaçak akýmlara bakma
        begin
          if (Pos_Leakage_bit = 1) then // + kaçak gelmiþse
           begin
                Inc(LeakFltCounter1);
                if (LeakFltCounter1 > FltTime) then
                  begin
                       Led1_Group.Led1_PLeakage         := 1;
                       Relay_Out_Data.RlyOut_5_PLeakage := 1;
                       Rly_PosLeakageBit                := 1;
                       LeakFltCounter1                  := FltTime + 5; // fazlasý yazýlýr sürekli burada kalsýn diye
                       P_LeakBit                        := 1;
                  end;
           end else
           begin
                Led1_Group.Led1_PLeakage         := 0;
                Relay_Out_Data.RlyOut_5_PLeakage := 0;
                Rly_PosLeakageBit                := 0;
                LeakFltCounter1                  := 0;
           end;

          if (Neg_Leakage_bit = 1) then // - kaçak gelmiþse
           begin
                Inc(LeakFltCounter2);
                if (LeakFltCounter2 > FltTime) then
                  begin
                       Led1_Group.Led1_NLeakage         := 1;
                       Relay_Out_Data.RlyOut_6_NLeakage := 1;
                       Rly_NegLeakageBit                := 1;
                       LeakFltCounter2                  := FltTime + 5; // fazlasý yazýlýr sürekli burada kalsýn diye
                       N_LeakBit                        := 1;
                  end;
           end else
           begin
                Led1_Group.Led1_NLeakage         := 0;
                Relay_Out_Data.RlyOut_6_NLeakage := 0;
                Rly_NegLeakageBit                := 0;
                LeakFltCounter2                  := 0;
           end;
        end else
        begin
                Led1_Group.Led1_PLeakage         := 0;
                Relay_Out_Data.RlyOut_5_PLeakage := 0;
                Rly_PosLeakageBit                := 0;
                Rly_NegLeakageBit                := 0;
                LeakFltCounter1                  := 0;
                Led1_Group.Led1_NLeakage         := 0;
                Relay_Out_Data.RlyOut_6_NLeakage := 0;
                LeakFltCounter2                  := 0;
                P_Leakbit                        := 0;
                N_Leakbit                        := 0;
                LogBit_Pleak                     := 0;
                LogBit_Nleak                     := 0;
        end;
       
       
      if (TempHighBit = 1) then
        begin
            Inc(TempFltCounter);
            if (TempFltCounter > FltTime) then
              begin
                   Led2_Group.Led2_HighTemp          := 1;
                   Relay_Out_Data.RlyOut_10_HighTemp := 1;
                   Rly_HighTempBit                   := 1;
                   TempFltCounter                    := FltTime + 5;
                   HighTempBit                       := 1;
                   
              end;

        end else
        begin
            Led2_Group.Led2_HighTemp          := 0;
            Relay_Out_Data.RlyOut_10_HighTemp := 0;
            Rly_HighTempBit                   := 0;
            TempFltCounter                    := 0;
            HighTempBit                       := 0;
            LogBit_HighTemp                   := 0;

        end;

      if (AC_MCB_Input =1) then // ac mcb sigortasý atýk
        begin
            Ac_MCB_Bit            := 1;
            Led3_Group.Led3_AcMCB := 1;
            Relay_Out_Data.RlyOut_12_AcMCB := 1;
            Rly_AcMcbBit                   := 1;
        end else
        begin
            Ac_MCB_Bit            := 0;
            Led3_Group.Led3_AcMCB := 0;
            Relay_Out_Data.RlyOut_12_AcMCB := 0;
            Rly_AcMcbBit                   := 0;
            LogBit_AcMCB                   := 0;
        end;

      if (Load_MCB_Input =1) then // yük mcb sigortasý atýk
        begin
            Load_MCB_Bit          := 1;
            Led3_Group.Led3_DcMCB := 1;
            Relay_Out_Data.RlyOut_13_DcMCB := 1;
            Rly_DcMcbBit                   := 1;
        end else
        begin
            Load_MCB_Bit          := 0;
            Led3_Group.Led3_DcMCB := 0;
            Relay_Out_Data.RlyOut_13_DcMCB := 0;
            Rly_DcMcbBit                   := 0;
            LogBit_LoadMCB                 := 0;
        end;

      if (Batt_MCB_Input =1) then // batt mcb sigortasý atýk
        begin
            Batt_MCB_Bit            := 1;
            Led3_Group.Led3_BattMCB := 1;
            Relay_Out_Data.RlyOut_14_BattMCB := 1;
            Rly_BattMcbBit                   := 1;
        end else
        begin
            Batt_MCB_Bit            := 0;
            Led3_Group.Led3_BattMCB := 0;
            Relay_Out_Data.RlyOut_14_BattMCB := 0;
            Rly_BattMcbBit                   := 0;
            LogBit_BatMCB                    := 0;
        end;

      if (Dropper_OutStatus = 1) then // bypass ise
        begin
            Inc(DropCounter);
            if ((DropCounter > 500)and(DropCounter < 1000)) then
              begin
                  Led3_Group.Led3_DropperStatus := 1;
              end else
            if (DropCounter > 1000) then
              begin
                  Led3_Group.Led3_DropperStatus := 0;
                  DropCounter                   := 0;
              end;
        end else
      if (Dropper_OutStatus = 2) then // disable ise
        begin
             Led3_Group.Led3_DropperStatus := 1;
        end else
      if (Dropper_OutStatus = 3) then // devrede ise
        begin
             Led3_Group.Led3_DropperStatus := 0;
        end;


      if (FanOnBit = 1) then
        begin
          if (FanFaultBit = 1) then
           begin
                Inc(FanFaultCounter);
                if (FanFaultCounter > FltTime) then
                  begin
                      FanFaultCounter := FltTime + 5;
                      Led2_Group.Led2_FanFault := 1;
                      Relay_Out_Data.RlyOut_9_FanFault := 1;
                      Rly_FanFaultBit                  := 1;
                      FanFltBit                        := 1;
                  end;
           end else
           begin
               FanFaultCounter := 0;
               Led2_Group.Led2_FanFault := 0;
               Relay_Out_Data.RlyOut_9_FanFault := 0;
               Rly_FanFaultBit                  := 0;
               FanFltBit                        := 0;
               LogBit_FanFault                  := 0;
           end;
        end;

 end;
//******************************************************************************
Procedure Fan_Heat_Control();
 begin

     if ((Dropper_Out_1 =0)or(Dropper_Out_2 =0)) then
       begin
            Dropper_Out_3 := 1; // faný aç, bu çýkýþ dropperlarýn fan çýkýþý yapýldý
       end else
     if ((Dropper_Out_1 =1)and(Dropper_Out_2 =1)) then
       begin
            Dropper_Out_3 := 0; // faný aç, bu çýkýþ dropperlarýn fan çýkýþý yapýldý
       end;

     if (PCB_Temperature >= TempFanOnSet) then
       begin
           Fan_Out := 1;
           FanOnBit:= 1;
       end else
     if (PCB_Temperature <= TempFanOffSet) then
       begin
           Fan_Out := 0;
           FanOnBit:= 0;
       end;



     if (PCB_Temperature < 10) then // kasa iç sýcaklýk 10C altýnda ýsýtýcýyý çalýþtýr
       begin
           Heater_Output       := 1;
           CaseHeaterActiveBit := 1;
       end else
     if (PCB_Temperature > 15) then // kasa iç sýcaklýk 15C üstünde ýsýtýcýyý kapat
       begin
           Heater_Output       := 0;
           CaseHeaterActiveBit := 0;
       end;


 end;
//******************************************************************************
Procedure Dropper_Control();
  begin

       if (Dropper_OutStatus <> 2) then  // dropper durumu devredýþý deðilse, dropper özelliði aktif
        begin
          DropperCloseCounter := 0;
          if (Read_LoadVolt > (HucreSayisi * 23)) then // gerilim %110' dan büyükse
            begin
                Inc(DropperInitCounter1);

                DropperInitCounter3 := 0;
                DropperInitCounter4 := 0;

                if (DropperInitCounter1 > DropperSayac) then
                  begin
                      DropperInitCounter1 := DropperSayac;
                      Dropper_Out_1       := 0; // dropper 1 devrede

                      if (Dropper_OutStatus = 3) then // dropper tamamý aktif ise burayý kullan, bypass ise sadece 1 çýkýþý kullan
                        begin
                            if (Read_LoadVolt > (HucreSayisi *23)) then // gerilim hala %110' dan büyükse
                              begin
                                  Inc(DropperInitCounter2);
                                  if (DropperInitCounter2 > DropperSayac) then
                                    begin
                                        DropperInitCounter2 := 1100;
                                        DropperInitCounter1 := 0;
                                        Dropper_Out_2       := 0; // dropper 2 de devrede
                                    end;
                              end;
                        end;
                  end;
            end else
          if (Read_LoadVolt < (HucreSayisi * 20)) then // gerilim %100' den küçükse
            begin
                Inc(DropperInitCounter3);

                DropperInitCounter1 := 0;
                DropperInitCounter2 := 0;

                if (DropperInitCounter3 > DropperSayac) then
                  begin
                      DropperInitCounter3  := DropperSayac;
                      Dropper_Out_2        := 1; // dropper 2 yi devreden çýkar

                      if (Dropper_OutStatus = 3) then // dropper tamamý aktif ise burayý kullan, bypass ise sadece 1 çýkýþý kullan
                        begin
                            if (Read_LoadVolt < (HucreSayisi * 20)) then // gerilim hala %100' den küçükse
                              begin
                                  Inc(DropperInitCounter4);
                                  if (DropperInitCounter4 > DropperSayac) then
                                    begin
                                         DropperInitCounter4 := DropperSayac;
                                         DropperInitCounter3 := 0;
                                         Dropper_Out_1       := 1; // dropper 1 i devreden çýkar
                                    end;

                              end;
                        end;
                  end;
            end;
        end else
     if (Dropper_OutStatus = 2) then // kapalý ise
       begin
           Dropper_Out_1 := 1;
           Inc(DropperCloseCounter);
           if (DropperCloseCounter > DropperSayac) then  // ikisi ayný anda çalýþmasýn 2sn sonra çalýþsýn
             begin
                  DropperCloseCounter := 0;
                  Dropper_Out_2       := 1;
             end;
       end;

  end;
//******************************************************************************
procedure InitTimer5();
 begin
      T5CON     := 0x8000;
      TMR5      := 0;
      PR5       := 3000; // 100us timer için
      T5IF_bit  := 0;
      T5IE_bit  := 1;
      IPC5      := IPC5 or %0000001100000000; // timer 5 priority level 3
 end;
//******************************************************************************
procedure Timer5Interrupt(); iv IVT_ADDR_T5INTERRUPT; // 100us
 begin

      IEC1.6 := 0;
      T5CON  := 0x0000;

      Check_Modbus();

      IFS1.6 :=0;
      IEC1.6 :=1;
      T5CON := 0x8000; //start TMR5
 end;
//******************************************************************************
procedure Timer4Interrupt(); iv IVT_ADDR_T4INTERRUPT;// 1ms
 begin
     IEC1.5 :=0;
     T4CON := %0000000000000000; //stop TMR3
     
     if (Up_Button =0) then
       begin

           UP_PressBit := 1;
           Inc(UpButonCounter);
           if (UpButonCounter > 2000) then // 2sn den fazla basýlmýþsa sadece lcd ekranda ac akým ve gerilim ekranýný deðiþtir
             begin
                  AcViewScreenBit := not AcViewScreenBit;
                  UpButonCounter  := 0;
             end;

       end else
     if (Up_Button) then
       begin
            if (UP_PressBit = 1) then // butona basýlarak geldiyse
              begin
                   if (UpButonCounter < 2000) then // 2sn den az basýlmýþsa sadece voltmetre-ampermetre ekranýný deðiþtir
                     begin
                          ScreenView      := not ScreenView;
                          UpButonCounter  := 0;
                     end;{else
                   if (UpButonCounter > 2000) then // 2sn den fazla basýlmýþsa sadece lcd ekranda ac akým ve gerilim ekranýný deðiþtir
                     begin
                          AcViewScreenBit := not AcViewScreenBit;
                          UpButonCounter  := 2000;
                     end;}
                     
                   UP_PressBit     := 0;
                   UpButonCounter  := 0;
              end;
       end;
     
     Inc(Start_Counter);
     if (Start_Counter >= 20000) then // program açýldýktan 20sn sonra hatalarý yazmaya baþlayacak  45000
       begin
           Start_Counter := 45000;
           Start_Bit     := 1;
       end;
     
     Inc(ScreenCounter);

     if (posleakbit = 0) then
       begin
           inc(PosCounter);
           if (PosCounter > 2000) then
             begin
                 Pos_Leakage_bit := 0;
                 PosCounter      := 2000;
             end;
       end else
       begin
            PosCounter      := 0;
            Pos_Leakage_bit := 1;

       end;

     if (negleakbit = 0) then
       begin
           inc(NegCounter);
           if (NegCounter > 2000) then
             begin
                 Neg_Leakage_bit := 0;
                 NegCounter      := 2000;
             end;
       end else
       begin
            NegCounter      := 0;
            Neg_Leakage_bit := 1;

       end;
     
     
     if (Bat_Service_Timer_bit = 1) then
        Inc(Bat_Service_Timer);

     if (Bakim_Start = 1) then
       begin
           Inc(QuitTimeCounter);
           if ((QuitTimeCounter >= QuitTime_Sec)or(QuitVoltBit = 1)) then // bakým süresi dolmuþsa veya deþarj olmuþsa
             begin
                 QuitTimeCounter         := 0;
                 BakimControlBit         := 0; // yeniden bakým kontrolü yapýlsýn
                 BakimStartBit           := 0; // bakýmý durdur
                 Bakim_Start             := 0;
                 BakimLockBit            := 1;
                 Bat_Service_Unit1       := 1;
                 Bat_Service_Unit2       := 1;
                 Bat_Service_Timer       := 0;
                 Bat_Service_Timer_bit   := 0;
                 BakimInitBit            := 0;
                 Service_Charge_StateBit := 10;

                 StopBit   := 0;


             end;
       end else QuitTimeCounter := 0;
    //------------------bakým çýkýþ kontrol-----------------------------
     
     

     

     if ((Ok_Button =0)or(Down_Button =0)or(Up_Button =0)) then 
       begin
            MenuExitCounter           := 0;
            Bat_Curve_Scan_State_bit  := 10;
            bat_curve_scan_fail       := 0;
       end;
       
     Inc(MenuExitCounter);
     if (MenuExitCounter > MenuExitValue) then // menuden otomatik çýkma sayacý
       begin
           MainMenuExit         := 255;
           MenuExit             := 255;
           Chng[1]              := 0;
           Chng[2]              := 0;
           Chng[3]              := 0;
           Chng[4]              := 0;
           Chng[5]              := 0;
           Chng[6]              := 0;
           Chng[7]              := 0;
           Chng[8]              := 0;
           Chng[9]              := 0;
           Chng[10]             := 0;
           Chng[11]             := 0;
           Chng[12]             := 0;
           Chng[13]             := 0;
           Chng[14]             := 0;
           Chng[15]             := 0;
       end;

     if (Program_StartBit =1) then
       begin
         
         if ((MenuBit =0)and(Start_Bit = 1)) then
           begin
                Dropper_Control();
                Led_RelayControl();
           end;
           
         Fan_Heat_Control();

       end;
       
       
     Modbus_Reg_Data_Fill();

     if (BCTimeCountBit = 255) then // hýzlý þarj sayacý izni verildiyse
       begin
           inc(BCTimeCounter);
           if (BCTimeCounter > 60000) then // 60 sn olmuþsa  60000
             begin
                 BCTimeCounter   := 0;
                 BoostChargeTime := BoostChargeTime - 1; // hýzlý þarj süresini bir azalt
                 if (BoostChargeTime < 1) then
                   begin
                        BCTimeCountBit := 0;// sayýcý izni devredýþý býrakýldý
                   end;
             end;
       end;


     Inc(TimeScreenCounter);


     if (Program_StartBit = 1) then // program çalýþmaya baþlamýþsa
      begin

         if (Haberlesme_izni = 255) then
           begin
               Uart_Communication_Function(Request_Counter);
               Haberlesme_izni := 0;
           end else
         if (Haberlesme_izni =0) then
           begin
               Inc(Request_RepeatCounter);
               if (Request_RepeatCounter > 100) then
                 begin
                     Request_RepeatCounter := 0;
                     Haberlesme_izni       := 255;
                 end;
           end;

         if (ReceiveData[4] <> 0) then // veri alýndýysa
           begin
               ReceiveData[4]   := 0;
               Haberlesme_izni  := 255;
           end;


      end; //
       
     ButonTimer(); // buton sayacý

     Comm_Fault_Check();

     if (Comm_FaultModbus =0) then // Modbus da hata yoksa
       begin
           Comm_ModbusFaultCounter := 0;
           Modbus_FaultBit         := 0;
       end else
     if (Comm_FaultModbus = 255) then
       begin
           Inc(Comm_ModbusFaultCounter);
           if (Comm_ModbusFaultCounter > 2000) then
             begin
                 Modbus_FaultBit := 1;
                 Comm_ModbusFaultCounter := 2100;
             end;
       end;
     
     Inc(AlarmSiraCounter);
     if (AlarmSiraCounter >= 750) then
       begin
            Comm_FaultModbus   := 255;
            AlarmSiraCounter := 0;
            Inc(AlarmSira);
            if (AlarmSira >= 24) then AlarmSira := 0;
       end;
        
     if (Buzzer_AllowBit = 1) then // Buzzer izni verildiyse bu iþi yap
       begin
           if (BuzzerBit = 1) then
             begin
                 Inc(Buzzer_Counter);
                   
                 if ((Buzzer_Counter > 2000)and(Buzzer_Counter < 2500)) then
                   begin
                       Buzzer := 1;
                   end else
                 if (Buzzer_Counter > 2500) then
                   begin
                       Buzzer         := 0;
                       Buzzer_Counter := 0;
                   end;
             end else
           if (BuzzerBit =0) then
             begin
                 Buzzer         := 0;
                 Buzzer_Counter := 0;
             end;
       end else
       begin
            Buzzer         := 0;
            Buzzer_Counter := 0;
       end;

     IFS1.5 :=0;
     IEC1.5 :=1;
     T4CON := %1000000000000000; //start TMR3
 end;
//******************************************************************************
Procedure ValueDivide(Value : word; Dot : byte); // sayýlarý digitlere ayýr
var Fnc_Temp_Byte,Dig1,Dig2, Dig3 : byte;
 begin
      Fnc_Temp_Byte := 0;
      Dig1          := 0;
      Dig2          := 0;
      Dig3          := 0;
      
      if (Value >= 60000) then Value := 0; // eepromdan veri saçma gelirse deðerleri 0 yazdýr
      
      if (Dot = 255) then // virgülden sonra 1 basamak
        begin

          Value_Text[4]    := '.';
          Value_Text[5]    := ((Value mod 10) + 48);
          Fnc_Temp_Byte    := (Value mod 100);
          Value_Text[3]    := ((Fnc_Temp_Byte div 10) + 48);

          Dig1 := value div 100;
          if (Dig1 < 1) then
             Value_Text[2] := ' '
           else
           begin
              Fnc_Temp_Byte    := (Value div 100);
              Value_Text[2]    := ((Fnc_Temp_Byte mod 10) + 48);
           end;

          Dig2 := value div 1000;
          if (Dig2 < 1) then
              Value_Text[1] := ' '
          else
          begin
              Value_Text[1] := (Value div 1000)+48;

          end;
        end else 
      if (Dot = 250) then  // virgülden sonra 2 basamak ise
        begin
          Value_Text[3]    := '.';
          Value_Text[5]    := ((Value mod 10) + 48);
          Fnc_Temp_Byte    := (Value div 10);
          Value_Text[4]    := ((Fnc_Temp_Byte mod 10) + 48);
          Fnc_Temp_Byte    := (Value div 100);
          Value_Text[2]    := ((Fnc_Temp_Byte mod 10) + 48);


          Dig2 := value div 1000;
          if (Dig2 < 1) then
              Value_Text[1] := ' '
          else
              Value_Text[1] := ((Value div 1000) + 48);
          
        end else
        if (Dot =0) then  // tam sayý ise
          begin
            Fnc_Temp_Byte      := 0;

            Value_Text[5]   := ((Value mod 10) + 48);
            Fnc_Temp_Byte   := (Value mod 100);
            Value_Text[4]   := ((Fnc_Temp_Byte div 10) + 48);

            Dig1 := value div 100;
            if (dig1 < 1) then 
                Value_Text[3] := ' '
             else
             begin
                Fnc_Temp_Byte      := (Value div 100);
                Value_Text[3]      := ((Fnc_Temp_Byte mod 10) + 48);
             end;

            Dig2 := value div 1000;
            if (Dig2 < 1) then
              begin
                   Value_Text[2] := ' ';
              end else
              begin
                Fnc_Temp_Byte   := (Value div 1000);
                Value_Text[2]   := ((Fnc_Temp_Byte mod 10)+48);
              end;
            
            Value_Text[1] := ' ';
            
            {Dig3 := Value mod 10000;
            if (Dig3 < 1) then
              begin
                 Value_Text[1] := ' ';
              end else
              begin
                 Value_Text[1]   := ((Value mod 10000)+48);
              end;}
          end else
       if (Dot =128) then // Akü%
         begin
             Fnc_Temp_Byte      := 0;
             ValueText2[4]   := '.';

             ValueText2[5]   := ((Value mod 10) + 48);

             Fnc_Temp_Byte      := (Value mod 100);
             ValueText2[3]   := ((Fnc_Temp_Byte div 10) + 48);

             dig2 := value div 100;
             if (dig2 < 1) then ValueText2[2] := ' ' else
              begin
                 Fnc_Temp_Byte      := (Value mod 1000);
                 ValueText2[2]   := ((Fnc_Temp_Byte div 100) + 48);
              end;

             dig1 := value div 1000;
             if (dig1 < 1) then ValueText2[1] := ' ' else ValueText2[1] := ((Value div 1000) + 48);
         end else
       if (Dot = 31) then  // tam sayý ise :)
          begin
            Fnc_Temp_Byte      := 0;

            Value_Text[5]   := ((Value mod 10) + 48);
            Fnc_Temp_Byte   := (Value mod 100);
            Value_Text[4]   := ((Fnc_Temp_Byte div 10) + 48);

            Fnc_Temp_Byte      := (Value div 100);
            Value_Text[3]      := ((Fnc_Temp_Byte mod 10) + 48);

            Fnc_Temp_Byte   := (Value div 1000);
            Value_Text[2]   := ((Fnc_Temp_Byte mod 10)+48);

            Fnc_Temp_Byte   := (Value div 1000);
            Value_Text[2]   := ((Fnc_Temp_Byte mod 10)+48);
            
            Fnc_Temp_Byte   := (Value div 10000);
            Value_Text[1]   := ((Fnc_Temp_Byte mod 10)+48);
          end;
          




 end;
//******************************************************************************
Function MenuButtonRead(Sayac, Menu : byte):short; // Sayac max. satýr sayýsýdýr
//var Temp : byte;
 begin
      if (Down_Button =0) then
       begin
          Pause_ms(100);
          while (Down_Button =0) do
            begin
                asm ClrWDT; end;
            end;

          if (MenuSayacValue < 8) then
            begin
               Glcd_Write_Char(' ',0, MenuSayacValue, Black);
            end else
          if (MenuSayacValue >= 8) then
            begin
               Glcd_Write_Char(' ',0, (MenuSayacValue-7), Black);
            end;
          
          Inc(MenuSayacValue);
          if (MenuSayacValue > Sayac) then MenuSayacValue := 1;
       end else
      if (Up_Button =0) then
       begin
          Pause_ms(100);
          while (Up_Button =0) do
            begin
                asm ClrWDT; end;
            end;
          
          if (MenuSayacValue < 8) then
            begin
               Glcd_Write_Char(' ',0, MenuSayacValue, Black);
            end else
          if (MenuSayacValue >= 8) then
            begin
               Glcd_Write_Char(' ',0, (MenuSayacValue-7), Black);
            end;
            
          Dec(MenuSayacValue);
          if (MenuSayacValue < 1) then MenuSayacValue := Sayac;
       end;
      
      if (Menu = 255) then   // program menüleri için ise iþaretleri satýrlara ">" iþaretini koy
        begin
          if (MenuSayacValue < 8) then
            begin
               Glcd_Write_Char('>',0, MenuSayacValue, Black);
            end else
          if (MenuSayacValue >= 8) then
            begin
               Glcd_Write_Char('>',0, (MenuSayacValue-7), Black);
            end;
        end;
        
      Result := MenuSayacValue;
 
 end;
//******************************************************************************
Procedure HiddenMenu();
var Chng : array[0..8] of short;
    HiddenMenuExit : byte;
 begin
      
      Glcd_Fill(0x00);
      Glcd_Set_Font(@NewFont5x7, 5, 7, 32);     // Change font
      
      //Glcd_Image(@HiddenMenuTable);
      
      Glcd_Write_Text('KAÇAK SENSOR,', 6, Row1,Black);
      Glcd_Write_Text('HÜCRE SAYISI,', 6, Row2, Black); // , yazýlmasý -> anlamýna gelir
      Glcd_Write_Text('HÜCRE GERÝLM,', 6, Row3, Black);
      Glcd_Write_Text('ÞARJ AKIMI  ,', 6, Row4, Black);
      Glcd_Write_Text('N.ÞARJ MIN. ,', 6, Row5, Black);
      Glcd_Write_Text('N.ÞARJ MAX. ,', 6, Row6, Black);
      Glcd_Write_Text('H.ÞARJ MIN. ,', 6, Row7, Black);
      Glcd_Write_Text('H.ÞARJ MAX. ,', 6, Row8, Black);

      asm ClrWDT; end;
      
      KacakSensor         := 0; // ilk yüklendiðinde ekrana analog gelsin
      HucreSayisi         := EEPROM_Read(EE_HucreSayisiEeAddr);
      NomHucreGerilim     := EEPROM_Read(EE_NomHucreGerilimEeAddr);
      F_ChargePercentLo   := EEPROM_Read(EE_F_ChargePercentLoEeAddr);
      F_ChargePercentHi   := EEPROM_Read(EE_F_ChargePercentHiEeAddr);
      B_ChargePercentLo   := EEPROM_Read(EE_B_ChargePercentLoEeAddr);
      B_ChargePercentHi   := EEPROM_Read(EE_B_ChargePercentHiEeAddr);
      RedresorAkim        := EEPROM_Read(EE_RedresorAkimEeAddr);

      if (KacakSensor = 0) then Glcd_Write_Text('ANALOG ',84,Row1,Black) else Glcd_Write_Text('DIGITAL',84,Row1,Black);  // kaçak akým algýlama analog ve digital durumu

      ValueDivide(HucreSayisi, 0);
      Glcd_Write_Text(Value_Text, 84, Row2, Black);
      ValueDivide(NomHucreGerilim, 250);
      WriteText := Value_Text + 'V ';
      Glcd_Write_Text(WriteText, 84, Row3, Black);
      ValueDivide(RedresorAkim, 0);
      WriteText := Value_Text + 'A ';
      Glcd_Write_Text(WriteText, 84, Row4, Black);
      ValueDivide(F_ChargePercentLo, 0);
      WriteText := Value_Text + '% ';
      Glcd_Write_Text(WriteText, 84, Row5, Black);
      ValueDivide(F_ChargePercentHi, 0);
      WriteText := Value_Text + '% ';
      Glcd_Write_Text(WriteText, 84, Row6, Black);
      ValueDivide(B_ChargePercentLo, 0);
      WriteText := Value_Text + '% ';
      Glcd_Write_Text(WriteText, 84, Row7, Black);
      ValueDivide(B_ChargePercentHi, 0);
      WriteText := Value_Text + '% ';
      Glcd_Write_Text(WriteText, 84, Row8, Black);
      
      HiddenMenuExit  := 0x00;
      MenuSayacValue  := 1;
      
      while (Hidden_Button =0) do
          begin
              asm ClrWDT; end;
          end;
      
      While (HiddenMenuExit = 0x00) do
       begin
            asm ClrWDT; end;
            
            //MenuSayac := MenuButtonRead(8,255); // menu için butonlarý oku 7 satýr menü var
            
            if (Down_Button=0) then
             begin
             
                  while (Down_Button=0) do
                   begin
                       asm ClrWDT; end;
                   end;
                   
                   Inc(MenuSayac);
                   if (MenuSayac > 7) then MenuSayac := 0;
             
             end else
            if (Up_Button=0) then
             begin

                  while (Up_Button=0) do
                   begin
                       asm ClrWDT; end;
                   end;

                   Dec(MenuSayac);
                   if (MenuSayac < 0) then MenuSayac := 7;

             end;
             
            if (Hidden_Button =0) then
              begin
                  while (Hidden_Button =0) do
                    begin
                        asm ClrWDT; end;
                    end;
                  HiddenMenuExit := 0xFF;
              end;
       
            case (MenuSayac) of
             0: begin    // kacak akým durumu

                    Glcd_Write_Char('>',0, Row1, Black);
                    Glcd_Write_Char(' ',0, Row2, Black);
                    Glcd_Write_Char(' ',0, Row8, Black);
                    
                    asm ClrWDT; end;

                    if (Ok_Button =0) then
                      begin
                        while (Ok_Button =0) do
                          begin
                              asm ClrWDT; end;
                          end;


                        Chng[1] := 1;

                        While (Chng[1] =1) do
                         begin
                             asm ClrWDT; end;

                             if ((Up_Button =0)or(Down_Button =0)) then
                              begin
                                  while ((Up_Button =0)or(Down_Button =0)) do
                                     begin
                                         asm ClrWDT; end;
                                     end;
                                  KacakSensor := not KacakSensor;
                              end;

                             if (KacakSensor = 0) then Glcd_Write_Text('ANALOG ',84,Row1,White) else Glcd_Write_Text('DIGITAL',84,Row1,White);  // kaçak akým algýlama analog ve digital durumu

                             if (Ok_Button =0) then
                              begin
                                  while (Ok_Button =0) do
                                   begin
                                        asm ClrWDT; end;
                                   end;

                                   EEPROM_Write(EE_KacakSensorEeAddr, KacakSensor);
                                   while (WR_bit) do begin end; // write/erase cycle waiting

                                   Chng[1] := 0;
                                   if (KacakSensor = 0) then Glcd_Write_Text('ANALOG ',84,Row1,Black) else Glcd_Write_Text('DIGITAL',84,Row1,Black);  // kaçak akým algýlama analog ve digital durumu
                              end;


                         end;
                      end;



                end;
                
             1: begin    // hücre sayýsý
             
                    Glcd_Write_Char(' ',0, Row1, Black);
                    Glcd_Write_Char('>',0, Row2, Black);
                    Glcd_Write_Char(' ',0, Row3, Black);
                    
                    asm ClrWDT; end;
                    
                    if (Ok_Button =0) then
                      begin
                        while (Ok_Button =0) do
                          begin
                              asm ClrWDT; end;
                          end;
                        

                        Chng[2] := 1;
                        
                        While (Chng[2] =1) do
                         begin
                             asm ClrWDT; end;
                             
                             if (Up_Button =0) then
                              begin
                                  ButonStop       := 0;
                                  BtCounterNormal := 0;
                                  while (ButonStop = 0) do
                                    begin
                                        asm ClrWDT; end;
                                    end;
                                  Inc(HucreSayisi);
                                  if (HucreSayisi >200) then HucreSayisi := 2;
                              end else
                             if (Down_Button =0) then
                              begin
                                  ButonStop       := 0;
                                  BtCounterNormal := 0;
                                  while (ButonStop = 0) do
                                    begin
                                        asm ClrWDT; end;
                                    end;
                                  Dec(HucreSayisi);
                                  if (HucreSayisi < 2) then HucreSayisi := 200;
                              end;
                              
                             ValueDivide(HucreSayisi, 0);
                             Glcd_Write_Text(Value_Text, 84, Row2, White);
                             
                             if (Ok_Button =0) then
                              begin
                                  while (Ok_Button =0) do
                                   begin
                                        asm ClrWDT; end;
                                   end;

                                   EEPROM_Write(EE_HucreSayisiEeAddr, HucreSayisi);
                                   while (WR_bit) do begin end; // write/erase cycle waiting
                                   
                                   Chng[2] := 0;
                                   Glcd_Write_Text(Value_Text, 84, Row2, Black);
                              end;
                         
                         
                         end;
                      end;
                    

                    
                end;
             2: begin   // nominal hücre gerilimi
                    
                    Glcd_Write_Char(' ',0, Row2, Black);
                    Glcd_Write_Char('>',0, Row3, Black);
                    Glcd_Write_Char(' ',0, Row4, Black);
                    
                    if (Ok_Button =0) then
                      begin
                        while (Ok_Button =0) do
                          begin
                              asm ClrWDT; end;
                          end;


                        Chng[3] := 1;

                        While (Chng[3] =1) do
                         begin
                             asm ClrWDT; end;
                             
                             if (Up_Button =0) then
                              begin
                                  ButonStop       := 0;
                                  BtCounterNormal := 0;
                                  while (ButonStop = 0) do
                                    begin
                                        asm ClrWDT; end;
                                    end;
                                  Inc(NomHucreGerilim);
                                  if (NomHucreGerilim >500) then NomHucreGerilim := 2;
                              end else
                             if (Down_Button =0) then
                              begin
                                  ButonStop       := 0;
                                  BtCounterNormal := 0;
                                  while (ButonStop = 0) do
                                    begin
                                        asm ClrWDT; end;
                                    end;
                                  Dec(NomHucreGerilim);
                                  if (NomHucreGerilim < 2) then NomHucreGerilim := 500;
                              end;

                             ValueDivide(NomHucreGerilim, 250);
                             WriteText := Value_Text + 'V ';
                             Glcd_Write_Text(WriteText, 84, Row3, White);

                             if (Ok_Button =0) then
                              begin
                                  while (Ok_Button =0) do
                                   begin
                                        asm ClrWDT; end;
                                   end;
                                   
                                   EEPROM_Write(EE_NomHucreGerilimEeAddr, NomHucreGerilim);
                                   while (WR_bit) do begin end; // write/erase cycle waiting

                                   Chng[3] := 0;
                                   Glcd_Write_Text(WriteText, 84, Row3, Black);
                              end;


                         end;
                      end;
                    
                end;
             3: begin //þarj akýmý

                    Glcd_Write_Char(' ',0, Row3, Black);
                    Glcd_Write_Char('>',0, Row4, Black);
                    Glcd_Write_Char(' ',0, Row5, Black);

                    if (Ok_Button =0) then
                      begin
                        while (Ok_Button =0) do
                          begin
                              asm ClrWDT; end;
                          end;


                        Chng[4] := 1;

                        While (Chng[4] =1) do
                         begin
                             asm ClrWDT; end;
                             
                             if (Up_Button =0) then
                              begin
                                  ButonStop       := 0;
                                  BtCounterNormal := 0;
                                  while (ButonStop = 0) do
                                    begin
                                        asm ClrWDT; end;
                                    end;
                                  Inc(RedresorAkim);
                                  if (RedresorAkim >200) then RedresorAkim := 2;
                              end else
                             if (Down_Button =0) then
                              begin
                                  ButonStop       := 0;
                                  BtCounterNormal := 0;
                                  while (ButonStop = 0) do
                                    begin
                                        asm ClrWDT; end;
                                    end;
                                  Dec(RedresorAkim);
                                  if (RedresorAkim < 2) then RedresorAkim := 200;
                              end;

                             ValueDivide(RedresorAkim, 0);
                             WriteText := Value_Text + 'A ';
                             Glcd_Write_Text(WriteText, 84, Row4, White);

                             if (Ok_Button =0) then
                              begin
                                  while (Ok_Button =0) do
                                   begin
                                        asm ClrWDT; end;
                                   end;
                                   
                                   EEPROM_Write(EE_RedresorAkimEeAddr, RedresorAkim);
                                   while (WR_bit) do begin end; // write/erase cycle waiting

                                   Chng[4] := 0;
                                   Glcd_Write_Text(WriteText, 84, Row4, Black);

                              end;


                         end;
                      end;

                end;
             4: begin // float þarj minimum yüzde deðeri
                    
                    Glcd_Write_Char(' ',0, Row4, Black);
                    Glcd_Write_Char('>',0, Row5, Black);
                    Glcd_Write_Char(' ',0, Row6, Black);
                    
                    if (Ok_Button =0) then
                      begin
                        while (Ok_Button =0) do
                          begin
                              asm ClrWDT; end;
                          end;


                        Chng[5] := 1;

                        While (Chng[5] =1) do
                         begin
                             asm ClrWDT; end;
                             
                             if (Up_Button =0) then
                              begin
                                  ButonStop       := 0;
                                  BtCounterNormal := 0;
                                  while (ButonStop = 0) do
                                    begin
                                        asm ClrWDT; end;
                                    end;
                                  Inc(F_ChargePercentLo);
                                  if (F_ChargePercentLo >150) then F_ChargePercentLo := 80;
                              end else
                             if (Down_Button =0) then
                              begin
                                  ButonStop       := 0;
                                  BtCounterNormal := 0;
                                  while (ButonStop = 0) do
                                    begin
                                        asm ClrWDT; end;
                                    end;
                                  Dec(F_ChargePercentLo);
                                  if (F_ChargePercentLo < 80) then F_ChargePercentLo := 150;
                              end;

                             ValueDivide(F_ChargePercentLo, 0);
                             WriteText := Value_Text + '% ';
                             Glcd_Write_Text(WriteText, 84, Row5, White);

                             if (Ok_Button =0) then
                              begin
                                  while (Ok_Button =0) do
                                   begin
                                        asm ClrWDT; end;
                                   end;
                                   
                                   EEPROM_Write(EE_F_ChargePercentLoEeAddr, F_ChargePercentLo);
                                   while (WR_bit) do begin end; // write/erase cycle waiting

                                   Chng[5] := 0;
                                   Glcd_Write_Text(WriteText, 84, Row5, Black);



                              end;


                         end;
                      end;

                end;
             5: begin // float þarj maximum yüzde deðeri

                    Glcd_Write_Char(' ',0, Row5, Black);
                    Glcd_Write_Char('>',0, Row6, Black);
                    Glcd_Write_Char(' ',0, Row7, Black);

                    if (Ok_Button =0) then
                      begin
                        while (Ok_Button =0) do
                          begin
                              asm ClrWDT; end;
                          end;

                        Chng[6] := 1;

                        While (Chng[6] =1) do
                         begin
                             asm ClrWDT; end;

                             if (Up_Button =0) then
                              begin
                                  ButonStop       := 0;
                                  BtCounterNormal := 0;
                                  while (ButonStop = 0) do
                                    begin
                                        asm ClrWDT; end;
                                    end;
                                  Inc(F_ChargePercentHi);
                                  if (F_ChargePercentHi >150) then F_ChargePercentHi := 80;
                              end else
                             if (Down_Button =0) then
                              begin
                                  ButonStop       := 0;
                                  BtCounterNormal := 0;
                                  while (ButonStop = 0) do
                                    begin
                                        asm ClrWDT; end;
                                    end;
                                  Dec(F_ChargePercentHi);
                                  if (F_ChargePercentHi < 80) then F_ChargePercentHi := 150;
                              end;

                             ValueDivide(F_ChargePercentHi, 0);
                             WriteText := Value_Text + '% ';
                             Glcd_Write_Text(WriteText, 84, Row6, White);

                             if (Ok_Button =0) then
                              begin
                                  while (Ok_Button =0) do
                                   begin
                                        asm ClrWDT; end;
                                   end;

                                   EEPROM_Write(EE_F_ChargePercentHiEeAddr, F_ChargePercentHi);
                                   while (WR_bit) do begin end; // write/erase cycle waiting

                                   Chng[6] := 0;
                                   Glcd_Write_Text(WriteText, 84, Row6, Black);



                              end;


                         end;
                      end;
                    
                end;
             6: begin  // boost þarj minimum yüzde deðeri

                    Glcd_Write_Char(' ',0, Row6, Black);
                    Glcd_Write_Char('>',0, Row7, Black);
                    Glcd_Write_Char(' ',0, Row8, Black);

                    if (Ok_Button =0) then
                      begin
                        while (Ok_Button =0) do
                          begin
                              asm ClrWDT; end;
                          end;

                        Chng[7] := 1;

                        While (Chng[7] =1) do
                         begin
                             asm ClrWDT; end;

                             if (Up_Button =0) then
                              begin
                                  ButonStop       := 0;
                                  BtCounterNormal := 0;
                                  while (ButonStop = 0) do
                                    begin
                                        asm ClrWDT; end;
                                    end;
                                  Inc(B_ChargePercentLo);
                                  if (B_ChargePercentLo >180) then B_ChargePercentLo := 100;
                              end else
                             if (Down_Button =0) then
                              begin
                                  ButonStop       := 0;
                                  BtCounterNormal := 0;
                                  while (ButonStop = 0) do
                                    begin
                                        asm ClrWDT; end;
                                    end;
                                  Dec(B_ChargePercentLo);
                                  if (B_ChargePercentLo < 100) then B_ChargePercentLo := 180;
                              end;

                             ValueDivide(B_ChargePercentLo, 0);
                             WriteText := Value_Text + '% ';
                             Glcd_Write_Text(WriteText, 84, Row7, White);

                             if (Ok_Button =0) then
                              begin
                                  while (Ok_Button =0) do
                                   begin
                                        asm ClrWDT; end;
                                   end;

                                   EEPROM_Write(EE_B_ChargePercentLoEeAddr, B_ChargePercentLo);
                                   while (WR_bit) do begin end; // write/erase cycle waiting

                                   Chng[7] := 0;
                                   Glcd_Write_Text(WriteText, 84, Row7, Black);



                              end;


                         end;
                      end;
                    
                end;
            
             7: begin  // boost þarj maximum yüzde deðeri

                    Glcd_Write_Char(' ',0, Row7, Black);
                    Glcd_Write_Char('>',0, Row8, Black);
                    Glcd_Write_Char(' ',0, Row1, Black);

                    if (Ok_Button =0) then
                      begin
                        while (Ok_Button =0) do
                          begin
                              asm ClrWDT; end;
                          end;

                        Chng[8] := 1;

                        While (Chng[8] =1) do
                         begin
                             asm ClrWDT; end;

                             if (Up_Button =0) then
                              begin
                                  ButonStop       := 0;
                                  BtCounterNormal := 0;
                                  while (ButonStop = 0) do
                                    begin
                                        asm ClrWDT; end;
                                    end;
                                  Inc(B_ChargePercentHi);
                                  if (B_ChargePercentHi >180) then B_ChargePercentHi := 100;
                              end else
                             if (Down_Button =0) then
                              begin
                                  ButonStop       := 0;
                                  BtCounterNormal := 0;
                                  while (ButonStop = 0) do
                                    begin
                                        asm ClrWDT; end;
                                    end;
                                  Dec(B_ChargePercentHi);
                                  if (B_ChargePercentHi < 100) then B_ChargePercentHi := 180;
                              end;

                             ValueDivide(B_ChargePercentHi, 0);
                             WriteText := Value_Text + '% ';
                             Glcd_Write_Text(WriteText, 84, Row8, White);

                             if (Ok_Button =0) then
                              begin
                                  while (Ok_Button =0) do
                                   begin
                                        asm ClrWDT; end;
                                   end;

                                   EEPROM_Write(EE_B_ChargePercentHiEeAddr, B_ChargePercentHi);
                                   while (WR_bit) do begin end; // write/erase cycle waiting

                                   Chng[8] := 0;
                                   Glcd_Write_Text(WriteText, 84, Row8, Black);



                              end;


                         end;
                      end;

                end;
            
            
            
            end; // MenuSayac case end
       
       
 
 
 
       end; // hiddenmenuexit biti 0x00 olana kadar döngüde kal
       
       Glcd_Fill(0x00);
       Glcd_Write_Text('Please Wait...',0,Row1,Black);
       Pause_ms(500);

 
 
 end;
//******************************************************************************
Procedure Language_Settings;
 begin
      Glcd_Fill(0x00);
      MenuExit        := 0;
      MenuSayacValue  := 1;
      Chng[2]         := 2;

      Glcd_Set_Font(@NewFont5x7, 5, 7, 32);     // Change font

    //  if (LanguageBit = English) then Glcd_Image(@LanguageSet_Page1_En) else
      Glcd_Write_Text(Title_LangMenu,      0, Row1, Black);
      Glcd_Write_Text(Subtitle_Lang,       6, Row2, Black);
      Glcd_Write_Text(SubTitle_Back,       6, Row3, Black);

      LanguageBit := EEPROM_Read(EE_LanguageBitEeAddr);
      Case (LanguageBit) of
         English: Glcd_Write_Text('ENGLISH', 84, Row2, Black);
         Turkish: Glcd_Write_Text('TÜRKÇE ', 84, Row2, Black);
      end;


      While (MenuExit =0) do
       begin
          

          
          MenuSayac := MenuButtonRead(2, 255);  // menu için butonlarý oku 2 satýr menü var

          asm ClrWDT; end;

          Case (MenuSayac) of
            1: begin // dil

                    if (Ok_Button =0) then
                      begin
                        while (Ok_Button =0) do
                          begin
                              asm ClrWDT; end;
                          end;

                        Chng[1] := 1;

                        While (Chng[1] =1) do
                          begin

                             asm ClrWDT; end;

                             if (Up_Button =0) then
                               begin
                                   while (Up_Button =0) do
                                    begin
                                        asm ClrWDT; end;
                                    end;
                                   
                                   Inc(LanguageBit);
                                   if (LanguageBit >3) then LanguageBit := 2;
                                    
                               end else
                             if (Down_Button =0) then
                               begin
                                   while (Down_Button =0) do
                                    begin
                                        asm ClrWDT; end;
                                    end;

                                   Dec(LanguageBit);
                                   if (LanguageBit <2) then LanguageBit := 3;

                               end;

                              Case (LanguageBit) of
                                 English: Glcd_Write_Text('ENGLISH', 84, Row2, White);
                                 Turkish: Glcd_Write_Text('TÜRKÇE ', 84, Row2, White);
                              end;


                             if (Ok_Button =0) then
                              begin
                                  while (Ok_Button =0) do
                                   begin
                                        asm ClrWDT; end;
                                   end;

                                   EEPROM_Write(EE_LanguageBitEeAddr, LanguageBit);
                                   while (WR_bit) do begin end; // write/erase cycle waiting

                                   Chng[1] := 0;
                                   LanguageBit := EEPROM_Read(EE_LanguageBitEeAddr);
                                    Case (LanguageBit) of
                                       English: Glcd_Write_Text('ENGLISH', 84, Row2, Black);
                                       Turkish: Glcd_Write_Text('TÜRKÇE ', 84, Row2, Black);
                                    end;



                              end;




                          end; // chng[1] while end


                      end;

               end;

            2:  begin // geri

                    if (Ok_Button =0) then
                      begin
                        while (Ok_Button =0) do
                          begin
                              asm ClrWDT; end;
                          end;
                        MenuExit := 1;

                      end;



                 end;

          end; // menu sayac case


       end;

      if (LanguageBit = Turkish) then 
        begin
             Turkish_Lang;
        end else
      if (LanguageBit = English) then 
        begin
             English_Lang;
        end;

      Glcd_Fill(0x00);
      MenuSayacValue := 10;

 end;
//******************************************************************************
Procedure Dropper_Module;
var FirstMasterSlaveValue : word;
 begin
      Glcd_Fill(0x00);
      MenuExit        := 0;
      MenuSayacValue  := 1;
      Chng[5]         := 2;
      
     // if (LanguageBit = English) then Glcd_Image(@DropperSet_Page1_En3) else
      //if (LanguageBit = Turkish) then Glcd_Image(@DropperSet_Page1_Tr3);
//     Glcd_Image(@DropperSet_Page1_Tr3);
       Glcd_Write_Text(Title_DroppMenu,     0, Row1, Black);
       Glcd_Write_Text(SubTitle_DropMod,    6, Row2, Black);
       Glcd_Write_Text(SubTitle_OpMod,      6, Row3, Black);
       Glcd_Write_Text(SubTitle_MS,         6, Row4, Black);
       Glcd_Write_Text(SubTitle_Back,       6, Row5, Black);

      {Dropper_LoadVolt := EEPROM_Read(EE_DropperLoadVoltEeAddr);
      ValueDivide(Dropper_LoadVolt, 255);
      Glcd_Write_Text(Value_Text, 84, Row2, Black);}
      
      Dropper_OutStatus := EEPROM_Read(EE_DropperOutStatusEeAddr);
      Case (Dropper_OutStatus) of
         1: Glcd_Write_Text('ByPass1', 84, Row2, Black);
         2: Glcd_Write_Text(DisableText, 84, Row2, Black);
         3: Glcd_Write_Text(EnableText, 84, Row2, Black);
      end;
      
      OperationMode  := EEPROM_Read(EE_OperationModeEeAddr);
      Case (OperationMode) of
         1: Glcd_Write_Text(SingleText, 84, Row3, Black);
         2: Glcd_Write_Text(BackupText, 84, Row3, Black);
         3: Glcd_Write_Text(ParalelText, 84, Row3, Black);
      end;
      
      MasterSlave  := EEPROM_Read(EE_MasterSlaveEeAddr);
      Case (MasterSlave) of
         1: Glcd_Write_Text('Master', 84, Row4, Black);
         2: Glcd_Write_Text('Slave ', 84, Row4, Black);
      end;
      
      FirstMasterSlaveValue := MasterSlave;
      
      While (MenuExit =0) do
       begin
          

          MenuSayac := MenuButtonRead(4, 255);  // menu için butonlarý oku 4 satýr menü var

          asm ClrWDT; end;
          
          MenuBit := 0;
          
          Case (MenuSayac) of
            {1: begin // yük gerilimi     DC-DC Converter yapýldýðýnda burasý aktif edilecek

                    if (Ok_Button =0) then
                      begin
                        while (Ok_Button =0) do
                          begin
                              asm ClrWDT; end;
                          end;

                        Chng[1] := 1;

                        While (Chng[1] =1) do
                          begin

                             asm ClrWDT; end;

                             if (Up_Button =0) then
                              begin
                                  ButonStop       := 0;
                                  BtCounterNormal := 0;
                                  while (ButonStop = 0) do
                                    begin
                                        asm ClrWDT; end;
                                    end;
                                  Inc(Dropper_LoadVolt);
                                  if (Dropper_LoadVolt > ((HucreSayisi*2)*11.5)) then  //%115' ine kadar
                                      Dropper_LoadVolt := ((HucreSayisi*2)*11.5);
                              end else
                             if (Down_Button =0) then
                              begin
                                  ButonStop       := 0;
                                  BtCounterNormal := 0;
                                  while (ButonStop = 0) do
                                    begin
                                        asm ClrWDT; end;
                                    end;
                                  Dec(Dropper_LoadVolt);
                                  if (Dropper_LoadVolt < (HucreSayisi*20)) then // nominal gerilime kadar
                                      Dropper_LoadVolt := (HucreSayisi*20);
                              end;

                             ValueDivide(Dropper_LoadVolt, 255);
                             Glcd_Write_Text(Value_Text, 84, Row2, White);

                             if (Ok_Button =0) then
                              begin
                                  while (Ok_Button =0) do
                                   begin
                                        asm ClrWDT; end;
                                   end;

                                   EEPROM_Write(EE_DropperLoadVoltEeAddr, Dropper_LoadVolt);
                                   while (WR_bit) do begin end; // write/erase cycle waiting

                                   Chng[1] := 0;
                                   Glcd_Write_Text(Value_Text, 84, Row2, Black);



                              end;




                          end; // chng[1] while end


                      end;

               end;}
          
            1: begin // dropper durumu

                    if (Ok_Button =0) then
                      begin
                        while (Ok_Button =0) do
                          begin
                              asm ClrWDT; end;
                          end;

                        MenuBit := 1;

                        Chng[2] := 1;

                        While (Chng[2] =1) do
                          begin

                             asm ClrWDT; end;

                             if (Up_Button =0) then
                              begin
                                  while (Up_Button =0) do
                                    begin
                                        asm ClrWDT; end;
                                    end;
                                  Inc(Dropper_OutStatus);
                                  if (Dropper_OutStatus > 3) then
                                      Dropper_OutStatus := 1;
                              end else
                             if (Down_Button =0) then
                              begin
                                  while (Down_Button =0) do
                                    begin
                                        asm ClrWDT; end;
                                    end;
                                  Dec(Dropper_OutStatus);
                                  if (Dropper_OutStatus < 1) then //
                                      Dropper_OutStatus := 3;
                              end;


                             Case (Dropper_OutStatus) of
                                 1: Glcd_Write_Text('ByPass1', 84, Row2, White);
                                 2: Glcd_Write_Text(DisableText, 84, Row2, White);
                                 3: Glcd_Write_Text(EnableText, 84, Row2, White);
                             end;


                             if (Ok_Button =0) then
                              begin
                                  while (Ok_Button =0) do
                                   begin
                                        asm ClrWDT; end;
                                   end;

                                   EEPROM_Write(EE_DropperOutStatusEeAddr, Dropper_OutStatus);
                                   while (WR_bit) do begin end; // write/erase cycle waiting

                                   Chng[2] := 0;
                                   Case (Dropper_OutStatus) of
                                     1: Glcd_Write_Text('ByPass1', 84, Row2, Black);
                                     2: Glcd_Write_Text(DisableText, 84, Row2, Black);
                                     3: Glcd_Write_Text(EnableText, 84, Row2, Black);
                                   end;



                              end;




                          end; // chng[2] while end


                      end;

               end;
               
            2: begin // çalýþma durumu

                    if (Ok_Button =0) then
                      begin
                        while (Ok_Button =0) do
                          begin
                              asm ClrWDT; end;
                          end;

                        Chng[3] := 1;

                        While (Chng[3] =1) do
                          begin

                             asm ClrWDT; end;

                             if (Up_Button =0) then
                              begin
                                  while (Up_Button =0) do
                                    begin
                                        asm ClrWDT; end;
                                    end;
                                  Inc(OperationMode);
                                  if (OperationMode > 3) then
                                      OperationMode := 1;
                              end else
                             if (Down_Button =0) then
                              begin
                                  while (Down_Button =0) do
                                    begin
                                        asm ClrWDT; end;
                                    end;
                                  Dec(OperationMode);
                                  if (OperationMode < 1) then //
                                      OperationMode := 3;
                              end;


                             Case (OperationMode) of
                                 1: Glcd_Write_Text(SingleText, 84, Row3, White);
                                 2: Glcd_Write_Text(BackupText, 84, Row3, White);
                                 3: Glcd_Write_Text(ParalelText, 84, Row3, White);
                             end;


                             if (Ok_Button =0) then
                              begin
                                  while (Ok_Button =0) do
                                   begin
                                        asm ClrWDT; end;
                                   end;

                                   EEPROM_Write(EE_OperationModeEeAddr, OperationMode);
                                   while (WR_bit) do begin end; // write/erase cycle waiting

                                   Chng[3] := 0;
                                   Case (OperationMode) of
                                     1: Glcd_Write_Text(SingleText, 84, Row3, Black);
                                     2: Glcd_Write_Text(BackupText, 84, Row3, Black);
                                     3: Glcd_Write_Text(ParalelText, 84, Row3, Black);
                                   end;



                              end;




                          end; // chng[2] while end


                      end;

               end;
            3: begin // master sleave

                    if (Ok_Button =0) then
                      begin
                        while (Ok_Button =0) do
                          begin
                              asm ClrWDT; end;
                          end;

                        Chng[4] := 1;

                        While (Chng[4] =1) do
                          begin

                             asm ClrWDT; end;

                             if (Up_Button =0) then
                              begin
                                  while (Up_Button =0) do
                                    begin
                                        asm ClrWDT; end;
                                    end;
                                  Inc(MasterSlave);
                                  if (MasterSlave > 2) then
                                      MasterSlave := 1;
                              end else
                             if (Down_Button =0) then
                              begin
                                  while (Down_Button =0) do
                                    begin
                                        asm ClrWDT; end;
                                    end;
                                  Dec(MasterSlave);
                                  if (MasterSlave < 1) then //
                                      MasterSlave := 2;
                              end;


                             Case (MasterSlave) of
                               1: Glcd_Write_Text('Master', 84, Row4, white);
                               2: Glcd_Write_Text('Slave ', 84, Row4, white);
                             end;


                             if (Ok_Button =0) then
                              begin
                                  while (Ok_Button =0) do
                                   begin
                                        asm ClrWDT; end;
                                   end;
                                   
                                   EEPROM_Write(EE_MasterSlaveEeAddr, MasterSlave);
                                   while (WR_bit) do begin end; // write/erase cycle waiting

                                   Chng[4] := 0;
                                   Case (MasterSlave) of
                                     1: Glcd_Write_Text('Master', 84, Row4, black);
                                     2: Glcd_Write_Text('Slave ', 84, Row4, black);
                                   end;



                              end;




                          end; // chng[2] while end


                      end;

               end;

               
            4:  begin // geri

                    if (Ok_Button =0) then
                      begin
                        while (Ok_Button =0) do
                          begin
                              asm ClrWDT; end;
                          end;
                        MenuExit := 1;

                      end;



                 end;
          
          end; // menu sayac case
       
       
       end;
       
       if ((MasterSlave = 1)and(OperationMode = 2)) then // slave den mastera geçiþte açýlýþ counter deðerini sýfýrla
         begin
             Start_Counter := 15000;
             RedFaultBit   := 0;
             StopBit       := 0;
             Start_Bit     := 0;
         end;
       

       
      
      Glcd_Fill(0x00);
      MenuSayacValue := 3;
      
 end;
//******************************************************************************
Procedure AC_Settings;
 begin
      Glcd_Fill(0x00);
      MenuExit        := 0;
      MenuSayacValue  := 1;
      Chng[3]         := 2;
      
      //if (LanguageBit = English) then Glcd_Image(@ACSet_Page1_En) else
      //if (LanguageBit = Turkish) then Glcd_Image(@ACSet_Page1_Tr);
      //Glcd_Image(@ACSet_Page1_Tr);

      Glcd_Write_Text(Title_AcMenu,     0, Row1, Black);
      Glcd_Write_Text(SubTitle_MaxVolt, 6, Row2, Black);
      Glcd_Write_Text(SubTitle_MinVolt, 6, Row3, Black);
      Glcd_Write_Text(SubTitle_VoltDiff,6, Row4, Black);
      Glcd_Write_Text(SubTitle_VoltProt,6, Row5, Black);
      Glcd_Write_Text(SubTitle_Back,    6, Row6, Black);
      
      ACMaxVoltSet := EEPROM_Read(EE_ACMaxVoltSetEeAddr);
      ValueDivide(ACMaxVoltSet, 0);
      WriteText := Value_Text + 'V ';
      Glcd_Write_Text(WriteText, 84, Row2, Black);

      ACMinVoltSet := EEPROM_Read(EE_ACMinVoltSetEeAddr);
      ValueDivide(ACMinVoltSet, 0);
      WriteText := Value_Text + 'V ';
      Glcd_Write_Text(WriteText, 84, Row3, Black);
      
      ACVolt_Different := EEPROM_Read(EE_ACVoltDifferentEeAddr);
      ValueDivide(ACVolt_Different, 0);
      WriteText := Value_Text + 'V ';
      Glcd_Write_Text(WriteText, 84, Row4, Black);
      
      AC_ProtectBit   := EEPROM_Read(EE_ACProtectEeAddr);
      if (AC_ProtectBit = 0) then
        begin
           Glcd_Write_Text(DisableText, 84, Row5, Black);
        end else
        begin
           Glcd_Write_Text(EnableText, 84, Row5, Black);
        end;

      
      
      While (MenuExit =0) do
       begin
       

       
          {ValueDivide(Read_U1Amps, 255);
          Glcd_Write_Text(Value_Text, 90, Row6, Black);
          ValueDivide(Read_U2Amps, 255);
          Glcd_Write_Text(Value_Text, 90, Row7, Black);
          ValueDivide(Read_U3Amps, 255);
          Glcd_Write_Text(Value_Text, 90, Row8, Black);}
       
          MenuSayac := MenuButtonRead(5, 255);  // menu için butonlarý oku 5 satýr menü var

          asm ClrWDT; end;
            
          Case (MenuSayac) of
           1: begin // AC Max Gerilimi
                 if (Ok_Button =0) then
                    begin
                      while (Ok_Button =0) do
                        begin
                            asm ClrWDT; end;
                        end;

                      Chng[1] := 1;

                      While (Chng[1] =1) do
                        begin

                           asm ClrWDT; end;

                           if (Up_Button =0) then
                            begin
                                ButonStop       := 0;
                                BtCounterNormal := 0;
                                while (ButonStop = 0) do
                                  begin
                                      asm ClrWDT; end;
                                  end;
                                Inc(ACMaxVoltSet);
                                if (ACMaxVoltSet > 480) then
                                    ACMaxVoltSet := 480;
                            end else
                           if (Down_Button =0) then
                            begin
                                ButonStop       := 0;
                                BtCounterNormal := 0;
                                while (ButonStop = 0) do
                                  begin
                                      asm ClrWDT; end;
                                  end;
                                Dec(ACMaxVoltSet);
                                if (ACMaxVoltSet < 320) then
                                    ACMaxVoltSet := 320;
                            end;

                           ValueDivide(ACMaxVoltSet, 0);
                           WriteText := Value_Text + 'V ';

                           Glcd_Write_Text(WriteText, 84, Row2, White);

                           if (Ok_Button =0) then
                            begin
                                while (Ok_Button =0) do
                                 begin
                                      asm ClrWDT; end;
                                 end;

                                 EEPROM_Write(EE_ACMaxVoltSetEeAddr, ACMaxVoltSet);
                                 while (WR_bit) do begin end; // write/erase cycle waiting

                                 Chng[1] := 0;
                                 Glcd_Write_Text(WriteText, 84, Row2, Black);


                            end;


                        end; // chng[1] while end

                 end;
              end;

           2: begin // AC Min Gerilimi
                 if (Ok_Button =0) then
                    begin
                      while (Ok_Button =0) do
                        begin
                            asm ClrWDT; end;
                        end;

                      Chng[2] := 1;

                      While (Chng[2] =1) do
                        begin

                           asm ClrWDT; end;

                           if (Up_Button =0) then
                            begin
                                ButonStop       := 0;
                                BtCounterNormal := 0;
                                while (ButonStop = 0) do
                                  begin
                                      asm ClrWDT; end;
                                  end;
                                Inc(ACMinVoltSet);
                                if (ACMinVoltSet > 480) then
                                    ACMinVoltSet := 480;
                            end else
                           if (Down_Button =0) then
                            begin
                                ButonStop       := 0;
                                BtCounterNormal := 0;
                                while (ButonStop = 0) do
                                  begin
                                      asm ClrWDT; end;
                                  end;
                                Dec(ACMinVoltSet);
                                if (ACMinVoltSet < 320) then
                                    ACMinVoltSet := 320;
                            end;

                           ValueDivide(ACMinVoltSet, 0);
                           WriteText := Value_Text + 'V ';
                           Glcd_Write_Text(WriteText, 84, Row3, White);

                           if (Ok_Button =0) then
                            begin
                                while (Ok_Button =0) do
                                 begin
                                      asm ClrWDT; end;
                                 end;

                                 EEPROM_Write(EE_ACMinVoltSetEeAddr, ACMinVoltSet);
                                 while (WR_bit) do begin end; // write/erase cycle waiting

                                 Chng[2] := 0;
                                 Glcd_Write_Text(WriteText, 84, Row3, Black);


                            end;


                        end; // chng[2] while end

                 end;
              end;
            
            3: begin // AC Volt farký
                 if (Ok_Button =0) then
                    begin
                      while (Ok_Button =0) do
                        begin
                            asm ClrWDT; end;
                        end;

                      Chng[3] := 1;

                      While (Chng[3] =1) do
                        begin

                           asm ClrWDT; end;

                           if (Up_Button =0) then
                            begin
                                ButonStop       := 0;
                                BtCounterNormal := 0;
                                while (ButonStop = 0) do
                                  begin
                                      asm ClrWDT; end;
                                  end;
                                Inc(ACVolt_Different);
                                if (ACVolt_Different > 30) then // 30V' a kadar ayarlanacak
                                    ACVolt_Different := 30;
                            end else
                           if (Down_Button =0) then
                            begin
                                ButonStop       := 0;
                                BtCounterNormal := 0;
                                while (ButonStop = 0) do
                                  begin
                                      asm ClrWDT; end;
                                  end;
                                Dec(ACVolt_Different);
                                if (ACVolt_Different < 15) then
                                    ACVolt_Different := 15;
                            end;

                           ValueDivide(ACVolt_Different, 0);
                           WriteText := Value_Text + 'V ';
                           Glcd_Write_Text(WriteText, 84, Row4, White);

                           if (Ok_Button =0) then
                            begin
                                while (Ok_Button =0) do
                                 begin
                                      asm ClrWDT; end;
                                 end;

                                 EEPROM_Write(EE_ACVoltDifferentEeAddr, ACVolt_Different);
                                 while (WR_bit) do begin end; // write/erase cycle waiting

                                 Chng[3] := 0;
                                 Glcd_Write_Text(WriteText, 84, Row4, Black);


                            end;


                        end; // chng[2] while end

                 end;
              end;
              
            4: begin // AC Koruma

                    if (Ok_Button =0) then
                      begin
                        while (Ok_Button =0) do
                          begin
                              asm ClrWDT; end;
                          end;

                        Chng[4] := 1;

                        While (Chng[4] =1) do
                          begin

                             asm ClrWDT; end;

                             if ((Up_Button =0)or(Down_Button =0)) then
                              begin
                              
                                   while ((Up_Button =0)or(Down_Button =0)) do
                                     begin
                                         asm ClrWDT; end;
                                     end;
                                   
                                   AC_ProtectBit := not AC_ProtectBit;
                              
                              end;



                             if (AC_ProtectBit = 0) then
                              begin
                                 Glcd_Write_Text(DisableText, 84, Row5, White);
                              end else
                              begin
                                 Glcd_Write_Text(EnableText, 84, Row5, White);
                              end;


                             if (Ok_Button =0) then
                              begin
                                  while (Ok_Button =0) do
                                   begin
                                        asm ClrWDT; end;
                                   end;

                                   EEPROM_Write(EE_ACProtectEeAddr, AC_ProtectBit);
                                   while (WR_bit) do begin end; // write/erase cycle waiting

                                   Chng[4] := 0;
                                   if (AC_ProtectBit = 0) then
                                    begin
                                       Glcd_Write_Text(DisableText, 84, Row5, Black);
                                    end else
                                    begin
                                       Glcd_Write_Text(EnableText, 84, Row5, Black);
                                    end;

                              end;

                          end; // chng[4] while end

                      end;

               end;

            {3: begin // röle tepki süresi

                    if (Ok_Button =0) then
                      begin
                        while (Ok_Button =0) do
                          begin
                              asm ClrWDT; end;
                          end;

                        Chng[3] := 1;

                        While (Chng[3] =1) do
                          begin
                            asm ClrWDT; end;

                            if (Up_Button =0) then
                              begin
                                  ButonStop       := 0;
                                  BtCounterNormal := 0;
                                  while (ButonStop = 0) do
                                    begin
                                        asm ClrWDT; end;
                                    end;
                                  Inc(ACSetResponseTime);
                                  if (ACSetResponseTime > 10) then      // 10sn
                                      ACSetResponseTime := 10;
                              end else
                             if (Down_Button =0) then
                              begin
                                  ButonStop       := 0;
                                  BtCounterNormal := 0;
                                  while (ButonStop = 0) do
                                    begin
                                        asm ClrWDT; end;
                                    end;
                                  Dec(ACSetResponseTime);
                                  if (ACSetResponseTime < 1) then      // 1sn
                                      ACSetResponseTime := 1;
                              end;

                             ValueDivide(ACSetResponseTime, 0);
                             Glcd_Write_Text(Value_Text,84 , Row4, 0);

                             if (Ok_Button =0) then
                              begin
                                  while (Ok_Button =0) do
                                   begin
                                        asm ClrWDT; end;
                                   end;

                                   EEPROM_Write(EE_ACSetResponseTimeEeAddr, ACSetResponseTime);
                                   while (WR_bit) do begin end; // write/erase cycle waiting

                                   Chng[3] := 0;
                                   Glcd_Write_Text(Value_Text,84 , Row4, Black);



                              end;




                          end; // chng[5] while end


                      end;
                 end;}

            5: begin // geri

                    if (Ok_Button =0) then
                      begin
                        while (Ok_Button =0) do
                          begin
                              asm ClrWDT; end;
                          end;
                        MenuExit := 1;

                      end;



                 end;
            
          end; // case MenuSayac end;
      
       end; // MenuExit while
       
      Glcd_Fill(0x00);
      MenuSayacValue := 1;
      
 end;
//******************************************************************************
Procedure Leakage_Settings;
 begin
      Glcd_Fill(0x00);
      MenuExit         := 0;
      MenuSayacValue   := 1;
      Chng[3]          := 2;

     // if (LanguageBit = English) then Glcd_Image(@LeakageSet_Page1_En) else
      //if (LanguageBit = Turkish) then Glcd_Image(@LeakageSet_Page1_Tr);

//      Glcd_Image(@LeakageSet_Page1_Tr);


      Glcd_Write_Text(Title_LeakMenu,     0, Row1, Black);
      Glcd_Write_Text(SubTitle_Pleak,     6, Row2, Black);
      Glcd_Write_Text(SubTitle_Nleak,     6, Row3, Black);
      Glcd_Write_Text(SubTitle_Back,      6, Row4, Black);
      

      Leakage_Pos_Set         := EEPROM_Read(EE_LeakagePosEeAddr);
      Leakage_Neg_Set         := EEPROM_Read(EE_LeakageNegEeAddr);

      if (Leakage_Pos_Set <1) then
       begin
            Glcd_Write_Text(DisableText, 84, Row2, black);
       end else
     if (Leakage_Pos_Set >0) then
       begin
         if (KacakSensor =0) then
          begin
             ValueDivide(Leakage_Pos_Set, 0);
             WriteText := Value_Text + 'k';
             Glcd_Write_Text(WriteText, 84, Row2, black);
          end else
         if (KacakSensor =1) then
          begin
             Glcd_Write_Text(EnableText, 84, Row2, black);
          end;
       end;

      if (Leakage_Neg_Set <1) then
       begin
            Glcd_Write_Text(DisableText, 84, Row3, black);
       end else
     if (Leakage_Neg_Set >0) then
       begin
         if (KacakSensor =0) then
          begin
             ValueDivide(Leakage_Neg_Set, 0);
             WriteText := Value_Text + 'k';
             Glcd_Write_Text(WriteText, 84, Row3, black);
          end else
         if (KacakSensor =1) then
          begin
             Glcd_Write_Text(EnableText, 84, Row3, black);
          end;
       end;


      while (MenuExit = 0) do
       begin
       
            MenuSayac := MenuButtonRead(3, 255);  // menu için butonlarý oku 3 satýr menü var

            asm ClrWDT; end;

          Case (MenuSayac) of
            1: begin // + kaçak deðeri
                    if (Ok_Button =0) then
                          begin
                            while (Ok_Button =0) do
                              begin
                                  asm ClrWDT; end;
                              end;

                            Chng[1] := 1;

                            While (Chng[1] =1) do
                              begin

                                 asm ClrWDT; end;

                                 if (Up_Button =0) then
                                  begin
                                      ButonStop       := 0;
                                      BtCounterNormal := 0;
                                      while (ButonStop = 0) do
                                        begin
                                            asm ClrWDT; end;
                                        end;
                                      if (KacakSensor =0) then
                                        begin
                                          Inc(Leakage_Pos_Set);
                                          if (Leakage_Pos_Set > 100) then // 100k ya kadar
                                              Leakage_Pos_Set := 100;
                                        end else
                                      if (KacakSensor =1) then
                                        begin
                                            Leakage_Pos_Set := 1; // + kaçak algýlama açýk
                                        end;
                                  end else
                                 if (Down_Button =0) then
                                  begin
                                      ButonStop       := 0;
                                      BtCounterNormal := 0;
                                      while (ButonStop = 0) do
                                        begin
                                            asm ClrWDT; end;
                                        end;
                                      if (KacakSensor =0) then
                                        begin
                                          Dec(Leakage_Pos_Set);
                                          if (Leakage_Pos_Set < 1) then // 100k ya kadar
                                              Leakage_Pos_Set := 0;
                                        end else
                                      if (KacakSensor =1) then
                                        begin
                                            Leakage_Pos_Set := 0; // + kaçak algýlama kapalý
                                        end;
                                  end;

                                 if (Leakage_Pos_Set <1) then
                                   begin
                                        Glcd_Write_Text(DisableText, 84, Row2, White);
                                   end else
                                 if (Leakage_Pos_Set >0) then
                                   begin
                                     if (KacakSensor =0) then
                                      begin
                                         ValueDivide(Leakage_Pos_Set, 0);
                                         WriteText := Value_Text + 'k';
                                         Glcd_Write_Text(WriteText, 84, Row2, White);
                                      end else
                                     if (KacakSensor =1) then
                                      begin
                                         Glcd_Write_Text(EnableText, 84, Row2, White);
                                      end;
                                   end;

                                 if (Ok_Button =0) then
                                  begin
                                      while (Ok_Button =0) do
                                       begin
                                            asm ClrWDT; end;
                                       end;

                                       EEPROM_Write(EE_LeakagePosEeAddr, Leakage_Pos_Set);
                                       while (WR_bit) do begin end; // write/erase cycle waiting

                                       Chng[1] := 0;

                                       if (Leakage_Pos_Set <1) then
                                         begin
                                              Glcd_Write_Text(DisableText, 84, Row2, black);
                                         end else
                                       if (Leakage_Pos_Set >0) then
                                         begin
                                           if (KacakSensor =0) then
                                            begin
                                               ValueDivide(Leakage_Pos_Set, 0);
                                               WriteText := Value_Text + 'k';
                                               Glcd_Write_Text(WriteText, 84, Row2, black);
                                            end else
                                           if (KacakSensor =1) then
                                            begin
                                               Glcd_Write_Text(EnableText, 84, Row2, black);
                                            end;
                                         end;

                                  end;




                              end; // chng[1] while end

                       end;
               end;

            2: begin // - kaçak
                    if (Ok_Button =0) then
                          begin
                            while (Ok_Button =0) do
                              begin
                                  asm ClrWDT; end;
                              end;

                            Chng[2] := 1;

                            While (Chng[2] =1) do
                              begin

                                 asm ClrWDT; end;

                                 if (Up_Button =0) then
                                  begin
                                      ButonStop       := 0;
                                      BtCounterNormal := 0;
                                      while (ButonStop = 0) do
                                        begin
                                            asm ClrWDT; end;
                                        end;
                                      if (KacakSensor =0) then
                                        begin
                                          Inc(Leakage_Neg_Set);
                                          if (Leakage_Neg_Set > 100) then // 100k ya kadar
                                              Leakage_Neg_Set := 100;
                                        end else
                                      if (KacakSensor =1) then
                                        begin
                                            Leakage_Neg_Set := 1; // - kaçak algýlama açýk
                                        end;
                                  end else
                                 if (Down_Button =0) then
                                  begin
                                      ButonStop       := 0;
                                      BtCounterNormal := 0;
                                      while (ButonStop = 0) do
                                        begin
                                            asm ClrWDT; end;
                                        end;
                                      if (KacakSensor =0) then
                                        begin
                                          Dec(Leakage_Neg_Set);
                                          if (Leakage_Neg_Set < 1) then // 100k ya kadar
                                              Leakage_Neg_Set := 0;
                                        end else
                                      if (KacakSensor =1) then
                                        begin
                                            Leakage_Neg_Set := 0; // - kaçak algýlama kapalý
                                        end;
                                  end;

                                 if (Leakage_Neg_Set <1) then
                                   begin
                                        Glcd_Write_Text(DisableText, 84, Row3, White);
                                   end else
                                 if (Leakage_Neg_Set >0) then
                                   begin
                                     if (KacakSensor =0) then
                                      begin
                                         ValueDivide(Leakage_Neg_Set, 0);
                                         WriteText := Value_Text + 'k';
                                         Glcd_Write_Text(WriteText, 84, Row3, White);
                                      end else
                                     if (KacakSensor =1) then
                                      begin
                                         Glcd_Write_Text(EnableText, 84, Row3, White);
                                      end;
                                   end;

                                 if (Ok_Button =0) then
                                  begin
                                      while (Ok_Button =0) do
                                       begin
                                            asm ClrWDT; end;
                                       end;

                                       EEPROM_Write(EE_LeakageNegEeAddr, Leakage_Neg_Set);
                                       while (WR_bit) do begin end; // write/erase cycle waiting

                                       Chng[2] := 0;

                                       if (Leakage_Neg_Set <1) then
                                         begin
                                              Glcd_Write_Text(DisableText, 84, Row3, black);
                                         end else
                                       if (Leakage_Neg_Set >0) then
                                         begin
                                           if (KacakSensor =0) then
                                            begin
                                               ValueDivide(Leakage_Neg_Set, 0);
                                               WriteText := Value_Text + 'k';
                                               Glcd_Write_Text(WriteText, 84, Row3, black);
                                            end else
                                           if (KacakSensor =1) then
                                            begin
                                               Glcd_Write_Text(EnableText, 84, Row3, black);
                                            end;
                                         end;

                                  end;




                              end; // chng[2] while end

                       end;
               end;
             3: begin // geri

                        if (Ok_Button =0) then
                          begin
                            while (Ok_Button =0) do
                              begin
                                  asm ClrWDT; end;
                              end;
                            MenuExit := 1;

                          end;



                     end;






          end;
      end;

      Glcd_Fill(0x00);
      MenuSayacValue := 10;

 end;
//******************************************************************************
Procedure Clock_Settings;
var //TextLast, TextPrev : array[1..2] of char;
//Last, Prev : short;
HourText, MinText, DayText,MonthText : array[1..2] of char;
YearText : array[1..4] of char;
SaveBit : bit;
 begin
      Glcd_Fill(0x00);
      MenuExit        := 0;
      MenuSayacValue  := 1;
      Chng[6]         := 2;
      //TextLast        := '  ';
      //TextPrev        := '  ';
      HourText        := '  ';
      MinText         := '  ';
      DayText         := '  ';
      MonthText       := '  ';
      YearText        := '    ';
      SaveBit         := 0; // menüden çýkarken sürekli saati ayarlama deðiþiklik yapýlmýþsa ayarla

      //if (LanguageBit = English) then Glcd_Image(@ClockSet_Page1_En) else
      //if (LanguageBit = Turkish) then Glcd_Image(@ClockSet_Page1_Tr);

      //Glcd_Image(@ClockSet_Page1_Tr);
      
      Glcd_Set_Font(@NewFont5x7, 5, 7, 32);     // Change font
      
      Glcd_Write_Text(Title_ClockMenu,     0, Row1, Black);
      Glcd_Write_Text(SubTitle_Back,       6, Row8, Black);
      Glcd_Write_Char(':', 63, Row4, Black);
      Glcd_Write_Char('.', 48, Row6, Black);
      Glcd_Write_Char('.', 66, Row6, Black);



//      Glcd_Image(@ClockSet_Page1_En);

      Read_Time(@hours, @minutes, @seconds, @day, @week, @month, @year);

      Seconds  :=  Bcd2Dec16(seconds);
      minutes  :=  Bcd2Dec16(minutes);
      hours    :=  Bcd2Dec16(hours);
      week     :=  Bcd2Dec16(Week);
      day      :=  Bcd2Dec16(Day);
      month    :=  Bcd2Dec16(Month);
      year     :=  Bcd2Dec16(Year);


      //TextLast[1]    := (last div 10)+48;
      //TextLast[2]    := (last mod 10)+48;
      //TextPrev[1]    := (prev div 10)+48;
      //TextPrev[2]    := (prev mod 10)+48;

      //Glcd_Set_Font(@SevenSegment5x7, 5, 7, 32);

      HourText[1]  := (Hours div 10)+48;
      HourText[2]  := (hours mod 10)+48;

      MinText[1]  := (Minutes div 10)+48;
      MinText[2]  := (Minutes mod 10)+48;


      DayText[1]   := (day div 10)+48;
      DayText[2]   := (day mod 10)+48;

      MonthText[1]   := (Month div 10)+48;
      MonthText[2]   := (Month mod 10)+48;

      YearText[1]   := '2';
      YearText[2]   := '0';
      YearText[3]   := (Year div 10)+48;
      YearText[4]   := (Year mod 10)+48;

      Glcd_Write_Text(HourText,51,row4,Black);
      Glcd_Write_Text(MinText,69,row4,Black);

      Glcd_Write_Text(DayText,36,row6,Black);
      Glcd_Write_Text(MonthText,54,row6,Black);
      Glcd_Write_Text(YearText,72,row6,Black);



      While (MenuExit =0) do
       begin


            MenuSayac := MenuButtonRead(6, 0);  // menu için butonlarý oku 6 satýr menü var
            asm ClrWDT; end;

            Case (MenuSayac) of
             1: begin  // saat ayarý

                   {Glcd_H_Line(51,61,32,Black); // saat
                   Glcd_H_Line(68,79,32,White); // dakika
                   Glcd_H_Line(72,94,48,White); // yýl}
                   

                   
                   Glcd_Write_Char('*', 54, Row5, Black); // saat
                   Glcd_Write_Char(' ', 72, Row5, Black); // dakika
                   Glcd_Write_Text(' ', 0,  row8, Black);

                   if (Ok_Button =0) then
                      begin
                        while (Ok_Button =0) do
                          begin
                              asm ClrWDT; end;
                          end;

                        Chng[1] := 1;

                        While (Chng[1] =1) do
                          begin

                             asm ClrWDT; end;

                             if (Up_Button =0) then
                              begin
                                  ButonStop       := 0;
                                  BtCounterNormal := 0;
                                  while (ButonStop = 0) do
                                    begin
                                        asm ClrWDT; end;
                                    end;
                                  Inc(Hours);
                                  if (Hours > 23) then
                                      Hours := 0;
                              end else
                             if (Down_Button =0) then
                              begin
                                  ButonStop       := 0;
                                  BtCounterNormal := 0;
                                  while (ButonStop = 0) do
                                    begin
                                        asm ClrWDT; end;
                                    end;
                                  Dec(Hours);
                                  if (Hours < 0) then
                                      Hours := 23;
                              end;

                             HourText[1]  := (Hours div 10)+48;
                             HourText[2]  := (Hours mod 10)+48;
                             Glcd_Write_Text(HourText,51,row4,White);

                             if (Ok_Button =0) then
                              begin
                                  while (Ok_Button =0) do
                                   begin
                                        asm ClrWDT; end;
                                   end;

                                   Glcd_Write_Text(HourText,51,row4,Black);

                                   Chng[1] := 0;
                                   SaveBit := 1;

                              end;




                          end; // chng[1] while end

                   end;

                end;

             2: begin  // dakika ayarý

                   
                   {Glcd_H_Line(51,61,32,White); // saat
                   Glcd_H_Line(68,79,32,Black); // dakika
                   Glcd_H_Line(36,46,48,White); // gün}
                   
                   Glcd_Write_Char(' ', 54, Row5, Black); // saat (*) yukarý ok anlamýna gelir
                   Glcd_Write_Char('*', 72, Row5, Black); // dakika
                   Glcd_Write_Char(' ', 39, Row7, Black); // gün


                   if (Ok_Button =0) then
                      begin
                        while (Ok_Button =0) do
                          begin
                              asm ClrWDT; end;
                          end;

                        Chng[2] := 1;


                        While (Chng[2] =1) do
                          begin

                             asm ClrWDT; end;

                             if (Up_Button =0) then
                              begin
                                  ButonStop       := 0;
                                  BtCounterNormal := 0;
                                  while (ButonStop = 0) do
                                    begin
                                        asm ClrWDT; end;
                                    end;
                                  Inc(Minutes);
                                  if (Minutes > 59) then
                                      Minutes := 0;
                              end else
                             if (Down_Button =0) then
                              begin
                                  ButonStop       := 0;
                                  BtCounterNormal := 0;
                                  while (ButonStop = 0) do
                                    begin
                                        asm ClrWDT; end;
                                    end;
                                  Dec(Minutes);
                                  if (Minutes < 0) then
                                      Minutes := 59;
                              end;

                             MinText[1]  := (Minutes div 10)+48;
                             MinText[2]  := (Minutes mod 10)+48;
                             Glcd_Write_Text(MinText,69,row4,White);

                             if (Ok_Button =0) then
                              begin
                                  while (Ok_Button =0) do
                                   begin
                                        asm ClrWDT; end;
                                   end;

                                   //Glcd_Set_Font(@SevenSegment5x7, 5, 7, 32);
                                   Glcd_Write_Text(minText,69,row4,Black);

                                   Chng[2] := 0;
                                   SaveBit := 1;


                              end;




                          end; // chng[2] while end

                   end;

                end;

             3: begin  // gün ayarý

                   {Glcd_H_Line(68,79,32,White); // dakika
                   Glcd_H_Line(36,46,48,Black); // gün
                   Glcd_H_Line(54,64,48,White); // ay}
                   
                   Glcd_Write_Char(' ', 72, Row5, Black); // dakika
                   Glcd_Write_Char('*', 39, Row7, Black); // gün
                   Glcd_Write_Char(' ', 57, Row7, Black); // ay



                   if (Ok_Button =0) then
                      begin
                        while (Ok_Button =0) do
                          begin
                              asm ClrWDT; end;
                          end;

                        Chng[3] := 1;


                        While (Chng[3] =1) do
                          begin

                             asm ClrWDT; end;

                             if (Up_Button =0) then
                              begin
                                  ButonStop       := 0;
                                  BtCounterNormal := 0;
                                  while (ButonStop = 0) do
                                    begin
                                        asm ClrWDT; end;
                                    end;
                                  Inc(day);
                                  if ((Month = 4)or(Month = 6)or(Month= 9)or(Month = 11)) then
                                    begin
                                        if (Day > 30) then Day := 1;
                                    end else
                                  if (((Year mod 4) = 0)and(Month = 2)) then // 4 yýlda bir þubat ise 29' a kadar ayarlat
                                    begin
                                        if (Day > 29) then Day := 1;
                                    end else
                                  if (((Year mod 4) <> 0)and(Month = 2)) then // þubat ise 28' a kadar ayarlat
                                    begin
                                        if (Day > 28) then Day := 1;
                                    end else
                                  if ((Month <> 4)or(Month <> 6)or(Month<> 9)or(Month <> 11)) then
                                    begin
                                         if (day > 31) then
                                         day := 1;
                                    end;

                              end else
                             if (Down_Button =0) then
                              begin
                                  ButonStop       := 0;
                                  BtCounterNormal := 0;
                                  while (ButonStop = 0) do
                                    begin
                                        asm ClrWDT; end;
                                    end;
                                  Dec(day);
                                  if ((Month = 4)or(Month = 6)or(Month= 9)or(Month = 11)) then
                                    begin
                                        if (day < 1) then day := 30;
                                    end else
                                   if (((Year mod 4) = 0)and(Month = 2)) then // 4 yýlda bir þubat ise 29' a kadar ayarlat
                                     begin
                                         if (day < 1) then day := 29;
                                     end else
                                   if (((Year mod 4) <> 0)and(Month = 2)) then // þubat ise 28' a kadar ayarlat
                                     begin
                                         if (day < 1) then day := 28;
                                     end else
                                   if ((Month <> 4)or(Month <> 6)or(Month<> 9)or(Month <> 11)) then
                                     begin
                                          if (day < 1) then
                                          day := 31;
                                     end;
                              end;

                             dayText[1]  := (day div 10)+48;
                             dayText[2]  := (day mod 10)+48;
                             Glcd_Write_Text(dayText,36,row6,White);

                             if (Ok_Button =0) then
                              begin
                                  while (Ok_Button =0) do
                                   begin
                                        asm ClrWDT; end;
                                   end;

                                   Glcd_Write_Text(dayText,36,row6,Black);

                                   Chng[3] := 0;
                                   SaveBit := 1;

                              end;




                          end; // chng[2] while end

                   end;

                end;

             4: begin  // ay ayarý

                   {Glcd_H_Line(36,46,48,White); // gün
                   Glcd_H_Line(54,64,48,Black); // ay
                   Glcd_H_Line(72,94,48,White); // yýl}
                   
                   Glcd_Write_Char(' ', 39, Row7, Black); // gün
                   Glcd_Write_Char('*', 57, Row7, Black); // ay
                   Glcd_Write_Char(' ', 81, Row7, Black); // yýl

                   if (Ok_Button =0) then
                      begin
                        while (Ok_Button =0) do
                          begin
                              asm ClrWDT; end;
                          end;

                        Chng[4] := 1;


                        While (Chng[4] =1) do
                          begin

                             asm ClrWDT; end;

                             if (Up_Button =0) then
                              begin
                                  ButonStop       := 0;
                                  BtCounterNormal := 0;
                                  while (ButonStop = 0) do
                                    begin
                                        asm ClrWDT; end;
                                    end;
                                  Inc(month);
                                  if (month > 12) then
                                      month := 1;
                              end else
                             if (Down_Button =0) then
                              begin
                                  ButonStop       := 0;
                                  BtCounterNormal := 0;
                                  while (ButonStop = 0) do
                                    begin
                                        asm ClrWDT; end;
                                    end;
                                  Dec(month);
                                  if (month < 1) then
                                      month := 12;
                              end;

                             MonthText[1]  := (month div 10)+48;
                             MonthText[2]  := (month mod 10)+48;
                             Glcd_Write_Text(monthText,54,row6,White);


                             if (Ok_Button =0) then
                              begin
                                  while (Ok_Button =0) do
                                   begin
                                        asm ClrWDT; end;
                                   end;

                                   Glcd_Write_Text(monthText,54,row6,Black);

                                   Chng[4] := 0;
                                   SaveBit := 1;


                              end;




                          end; // chng[4] while end

                   end;

                end;

             5: begin  // yýl ayarý

                   {Glcd_H_Line(51,61,32,White); // saat
                   Glcd_H_Line(54,64,48,White); // ay
                   Glcd_H_Line(72,94,48,Black); // yýl
                   Glcd_Write_Text(' ',0,row8,Black);}
                   

                   Glcd_Write_Char(' ', 57, Row7, Black); // ay
                   Glcd_Write_Char('*', 81, Row7, Black); // yýl
                   Glcd_Write_Text(' ', 0,  row8, Black);

                   if (Ok_Button =0) then
                      begin
                        while (Ok_Button =0) do
                          begin
                              asm ClrWDT; end;
                          end;

                        Chng[5] := 1;


                        While (Chng[5] =1) do
                          begin

                             asm ClrWDT; end;

                             if (Up_Button =0) then
                              begin
                                  ButonStop       := 0;
                                  BtCounterNormal := 0;
                                  while (ButonStop = 0) do
                                    begin
                                        asm ClrWDT; end;
                                    end;
                                  Inc(year);
                                  if (year > 99) then
                                      year := 12;
                              end else
                             if (Down_Button =0) then
                              begin
                                  ButonStop       := 0;
                                  BtCounterNormal := 0;
                                  while (ButonStop = 0) do
                                    begin
                                        asm ClrWDT; end;
                                    end;
                                  Dec(year);
                                  if (year < 12) then
                                      year := 99;
                              end;

                             YearText[1]  := '2';
                             YearText[2]  := '0';
                             YearText[3]  := (year div 10)+48;
                             YearText[4]  := (year mod 10)+48;
                             Glcd_Write_Text(yearText,72,row6,White);


                             if (Ok_Button =0) then
                              begin
                                  while (Ok_Button =0) do
                                   begin
                                        asm ClrWDT; end;
                                   end;

                                   Glcd_Write_Text(yearText,72,row6,black);

                                   Chng[5] := 0;
                                   SaveBit := 1;

                              end;




                          end; // chng[5] while end

                   end;

                end;


             6: begin // geri


                   {Glcd_H_Line(51,61,32,White); // saat
                   Glcd_H_Line(72,94,48,White); // yýl}
                   
                   Glcd_Write_Char(' ', 54, Row5, Black); // saat
                   Glcd_Write_Char(' ', 81, Row7, Black); // yýl
                   Glcd_Write_Text('>', 0,  Row8, Black);

                    if (Ok_Button =0) then
                      begin
                        while (Ok_Button =0) do
                          begin
                              asm ClrWDT; end;
                          end;

                        if (SaveBit = 1) then // ayar yapýlmýþsa kaydet, yapýlmamýþsa kaydetme
                         begin
                          Hours   := Dec2Bcd16(Hours);
                          Minutes := Dec2Bcd16(Minutes);
                          Day     := Dec2Bcd16(Day);
                          Month   := Dec2Bcd16(Month);
                          Year    := Dec2Bcd16(Year);

                          Write_Time(Hours,Minutes,0x00,Day,0x01,Month,Year);
                         end;

                        MenuExit := 1;

                      end;
                 end;






            end;
       end;

      Glcd_Fill(0x00);
      MenuSayacValue := 7;

 end;
//******************************************************************************
procedure Uart_Procedures;
 begin

     asm ClrWDT; end;

     if (ModbusBaudRate = 1) then ModBus_Baud := 0 else
     if (ModbusBaudRate = 2) then ModBus_Baud := 9600 else
     if (ModbusBaudRate = 3) then ModBus_Baud := 19200 else
     if (ModbusBaudRate = 4) then ModBus_Baud := 38400 else
     if (ModbusBaudRate = 5) then ModBus_Baud := 57600;



     if (ModBus_Baud = 0) then
        ModBus_TimeOut_Timer3_PR3 := const_ModBus_TimeOut_Timer3_PR3_9600*0 else
     if (ModBus_Baud = 9600) then
        ModBus_TimeOut_Timer3_PR3 := const_ModBus_TimeOut_Timer3_PR3_9600*5 else
     if (ModBus_Baud = 19200) then
        ModBus_TimeOut_Timer3_PR3 := Const_ModBus_TimeOut_Timer3_PR3_19200*5 else
     if (ModBus_Baud = 38400) then
        ModBus_TimeOut_Timer3_PR3 := Const_ModBus_TimeOut_Timer3_PR3_38400*5 else
     if (ModBus_Baud = 57600) then
         ModBus_TimeOut_Timer3_PR3 := Const_ModBus_TimeOut_Timer3_PR3_57600*5;

     ModBus_TimeOut := 0;

     UART1_Init(ModBus_Baud);
     Pause_ms(10);

     asm ClrWDT; end;

     UART2_Init(19200); // kartlar arasý haberleþme hýzý
     Pause_ms(100);
     
     asm ClrWDT; end;

     Rs485master_Init;
     Pause_ms(100);
     
     asm ClrWDT; end;

     U2BRG := U2BRG_Value;


     UART_Set_Active(@UART1_Read, @UART1_Write, @UART1_Data_Ready, @UART1_Tx_Idle);
     
     asm ClrWDT; end;
     
     UART_Set_Active(@UART2_Read, @UART2_Write, @UART2_Data_Ready, @UART2_Tx_Idle);

     asm ClrWDT; end;

     Start_Modbus_Init;
     
     asm ClrWDT; end;

 end;
//******************************************************************************
Procedure Modbus_Settings;
var BaudRateSet : byte;
 begin
      Glcd_Fill(0x00);
      MenuExit         := 0;
      MenuSayacValue   := 1;
      Chng[3]          := 2;
      BaudRateSet      := 0;
      
      //if (LanguageBit = English) then Glcd_Image(@ModBusSet_Page1_En) else
      //if (LanguageBit = Turkish) then Glcd_Image(@ModBusSet_Page1_Tr);
      
//      Glcd_Image(@ModBusSet_Page1_Tr);

      Glcd_Write_Text(Title_ModbusMenu,     0, Row1, Black);
      Glcd_Write_Text(SubTitle_Id,          6, Row2, Black);
      Glcd_Write_Text(SubTitle_BaudRate,    6, Row3, Black);
      Glcd_Write_Text(SubTitle_Back,        6, Row4, Black);
      
      ModbusID         := EEPROM_Read(EE_ModbusIDEeAddr);
      BaudRateSet      := EEPROM_Read(EE_ModbusBaudRate);
      
      ValueDivide(ModbusID, 0);
      Glcd_Write_Text(Value_Text, 84, Row2, Black);
      
      case (BaudRateSet) of
        1: Glcd_Write_Text(DisableText,84,row3,Black);
        2: Glcd_Write_Text(' 9600  ',84,row3,Black);
        3: Glcd_Write_Text('19200  ',84,row3,Black);
        4: Glcd_Write_Text('38400  ',84,row3,Black);
        5: Glcd_Write_Text('57600  ',84,row3,Black);
      end;

      while (MenuExit = 0) do
       begin
       
       
            MenuSayac := MenuButtonRead(3, 255);  // menu için butonlarý oku 3 satýr menü var

            asm ClrWDT; end;

          Case (MenuSayac) of
            1: begin // modbus id
                    if (Ok_Button =0) then
                          begin
                            while (Ok_Button =0) do
                              begin
                                  asm ClrWDT; end;
                              end;

                            Chng[1] := 1;

                            While (Chng[1] =1) do
                              begin

                                 asm ClrWDT; end;

                                 if (Up_Button =0) then
                                  begin
                                      ButonStop       := 0;
                                      BtCounterNormal := 0;
                                      while (ButonStop = 0) do
                                        begin
                                            asm ClrWDT; end;
                                        end;
                                      Inc(ModbusID);
                                      if (ModbusID > 254) then
                                          ModbusID := 254;
                                  end else
                                 if (Down_Button =0) then
                                  begin
                                      ButonStop       := 0;
                                      BtCounterNormal := 0;
                                      while (ButonStop = 0) do
                                        begin
                                            asm ClrWDT; end;
                                        end;
                                      Dec(ModbusID);
                                      if (ModbusID < 1) then
                                          ModbusID := 1;
                                  end;

                                 ValueDivide(ModbusID, 0);
                                 Glcd_Write_Text(Value_Text, 84, Row2, White);

                                 if (Ok_Button =0) then
                                  begin
                                      while (Ok_Button =0) do
                                       begin
                                            asm ClrWDT; end;
                                       end;

                                       EEPROM_Write(EE_ModbusIDEeAddr, ModbusID);
                                       while (WR_bit) do begin end; // write/erase cycle waiting

                                       Chng[1] := 0;
                                       Glcd_Write_Text(Value_Text, 84, Row2, Black);

                                  end;




                              end; // chng[1] while end

                       end;
               end;

            2: begin // modbus baud rate
                    if (Ok_Button =0) then
                          begin
                            while (Ok_Button =0) do
                              begin
                                  asm ClrWDT; end;
                              end;

                            Chng[2] := 1;

                            While (Chng[2] =1) do
                              begin

                                 asm ClrWDT; end;

                                 if (Up_Button =0) then
                                  begin
                                      ButonStop       := 0;
                                      BtCounterNormal := 0;
                                      while (ButonStop = 0) do
                                        begin
                                            asm ClrWDT; end;
                                        end;
                                      Inc(BaudRateSet);
                                      if (BaudRateSet > 5) then
                                          BaudRateSet := 5;
                                  end else
                                 if (Down_Button =0) then
                                  begin
                                      ButonStop       := 0;
                                      BtCounterNormal := 0;
                                      while (ButonStop = 0) do
                                        begin
                                            asm ClrWDT; end;
                                        end;
                                      Dec(BaudRateSet);
                                      if (BaudRateSet < 1) then
                                          BaudRateSet := 1;
                                  end;

                                 case (BaudRateSet) of
                                   1: Glcd_Write_Text(DisableText,84,row3,White);
                                   2: Glcd_Write_Text(' 9600  ',84,row3,White);
                                   3: Glcd_Write_Text('19200  ',84,row3,White);
                                   4: Glcd_Write_Text('38400  ',84,row3,White);
                                   5: Glcd_Write_Text('57600  ',84,row3,White);
                                 end;


                                 if (Ok_Button =0) then
                                  begin
                                      while (Ok_Button =0) do
                                       begin
                                            asm ClrWDT; end;
                                       end;

                                       EEPROM_Write(EE_ModbusBaudRate, BaudRateSet);
                                       while (WR_bit) do begin end; // write/erase cycle waiting

                                       Chng[2] := 0;

                                       case (BaudRateSet) of
                                         1: Glcd_Write_Text(DisableText,84,row3,Black);
                                         2: Glcd_Write_Text(' 9600  ',84,row3,Black);
                                         3: Glcd_Write_Text('19200  ',84,row3,Black);
                                         4: Glcd_Write_Text('38400  ',84,row3,Black);
                                         5: Glcd_Write_Text('57600  ',84,row3,Black);
                                       end;
                                       
                                       


                                  end;




                              end; // chng[2] while end

                       end;
               end;
             3: begin // geri

                        if (Ok_Button =0) then
                          begin
                            while (Ok_Button =0) do
                              begin
                                  asm ClrWDT; end;
                              end;
                            MenuExit := 1;

                          end;



                     end;






          end;
      end;
      
      Modbus_Adress  := ModbusID;
      ModbusBaudRate := BaudRateSet; // ayarlanan deðeri yükle

      Uart_Procedures;
        
        
      Glcd_Fill(0x00);
      MenuSayacValue := 8;

 end;
//******************************************************************************
Procedure Temperature_Settings;
 begin
      Glcd_Fill(0x00);
      MenuExit        := 0;
      MenuSayacValue  := 1;
      Chng[5]         := 2;

      //if (LanguageBit = English) then Glcd_Image(@TempSet_Page1_En2) else
      //if (LanguageBit = Turkish) then Glcd_Image(@TempSet_Page1_Tr2);
      
//      Glcd_Image(@TempSet_Page1_Tr2);
      
      {TempSetResponseTime   := EEPROM_Read(EE_TempSetResponseTimeEeAddr);
      ValueDivide(TempSetResponseTime, 0);
      Glcd_Write_Text(Value_Text,84 , Row5, Black);}
      
      Glcd_Write_Text(Title_TempMenu,     0, Row1, Black);
      Glcd_Write_Text(SubTitle_TempAlarm, 6, Row2, Black);
      Glcd_Write_Text(SubTitle_FanOn,     6, Row3, Black);
      Glcd_Write_Text(SubTitle_FanOff,    6, Row4, Black);
      Glcd_Write_Text(SubTitle_Back,      6, Row5, Black);
      Glcd_Write_Text(SubTitle_TempComp,  0, Row7, Black);
      Glcd_Write_Text('Ext. Sensor,',     6, Row8, Black);

      TempFanOffSet         := EEPROM_Read(EE_TempFanOffSetEeAddr);
      ValueDivide(TempFanOffSet, 0);
      WriteText := Value_Text + '^'; // derece iþareti eklendi
      Glcd_Write_Text(WriteText,84 , Row4, Black);
      
      TempFanOnSet          := EEPROM_Read(EE_TempFanOnSetEeAddr);
      ValueDivide(TempFanOnSet, 0);
      WriteText := Value_Text + '^'; // derece iþareti eklendi
      Glcd_Write_Text(WriteText,84 , Row3, Black);

      TempAlarmSet          := EEPROM_Read(EE_TempAlarmSetEeAddr);
      ValueDivide(TempAlarmSet, 0);
      WriteText := Value_Text + '^'; // derece iþareti eklendi
      Glcd_Write_Text(WriteText,84 , Row2, Black);
      

      While (MenuExit =0) do
       begin
          
          TempCompansation_Measurement;
          
          MenuSayac := MenuButtonRead(4, 255);  // menu için butonlarý oku 5 satýr menü var
          
          if ((TempComp > 0)and(TempComp < 100)) then
            begin
                 ValueDivide(TempComp, 0);
                 WriteText := Value_Text + '^'; // derece iþareti eklendi
                 Glcd_Write_Text(WriteText,82,Row8,Black);
            end else
            if ((TempComp < 0)or(TempComp > 100)) then
              begin
                   Glcd_Write_Text('-----',82,Row8,Black);
              end;

          asm ClrWDT; end;
          
          Case (MenuSayac) of
           1: begin // temp. alarm value
                   if (Ok_Button =0) then
                      begin
                        while (Ok_Button =0) do
                          begin
                              asm ClrWDT; end;
                          end;

                        Chng[1] := 1;

                        While (Chng[1] =1) do
                          begin

                             asm ClrWDT; end;

                             if (Up_Button =0) then
                              begin
                                  ButonStop       := 0;
                                  BtCounterNormal := 0;
                                  while (ButonStop = 0) do
                                    begin
                                        asm ClrWDT; end;
                                    end;
                                  Inc(TempAlarmSet);
                                  if (TempAlarmSet > 99) then
                                      TempAlarmSet := 99;
                              end else
                             if (Down_Button =0) then
                              begin
                                  ButonStop       := 0;
                                  BtCounterNormal := 0;
                                  while (ButonStop = 0) do
                                    begin
                                        asm ClrWDT; end;
                                    end;
                                  Dec(TempAlarmSet);
                                  if (TempAlarmSet < 5) then
                                      TempAlarmSet := 5;
                              end;

                             ValueDivide(TempAlarmSet, 0);
                             WriteText := Value_Text + '^'; // derece iþareti eklendi
                             Glcd_Write_Text(WriteText, 84, Row2, White);

                             if (Ok_Button =0) then
                              begin
                                  while (Ok_Button =0) do
                                   begin
                                        asm ClrWDT; end;
                                   end;

                                   EEPROM_Write(EE_TempAlarmSetEeAddr, TempAlarmSet);
                                   while (WR_bit) do begin end; // write/erase cycle waiting

                                   Chng[1] := 0;
                                   Glcd_Write_Text(WriteText, 84, Row2, Black);

                              end;




                          end; // chng[1] while end

                   end;
              end;
       
           2: begin   // fan on value
                   if (Ok_Button =0) then
                      begin
                        while (Ok_Button =0) do
                          begin
                              asm ClrWDT; end;
                          end;

                        Chng[2] := 1;

                        While (Chng[2] =1) do
                          begin

                             asm ClrWDT; end;

                             if (Up_Button =0) then
                              begin
                                  ButonStop       := 0;
                                  BtCounterNormal := 0;
                                  while (ButonStop = 0) do
                                    begin
                                        asm ClrWDT; end;
                                    end;
                                  Inc(TempFanOnSet);
                                  if (TempFanOnSet > 99) then
                                      TempFanOnSet := 99;
                              end else
                             if (Down_Button =0) then
                              begin
                                  ButonStop       := 0;
                                  BtCounterNormal := 0;
                                  while (ButonStop = 0) do
                                    begin
                                        asm ClrWDT; end;
                                    end;
                                  Dec(TempFanOnSet);
                                  if (TempFanOnSet < 5) then
                                      TempFanOnSet := 5;
                              end;

                             ValueDivide(TempFanOnSet, 0);
                             WriteText := Value_Text + '^'; // derece iþareti eklendi
                             Glcd_Write_Text(WriteText, 84, Row3, White);

                             if (Ok_Button =0) then
                              begin
                                  while (Ok_Button =0) do
                                   begin
                                        asm ClrWDT; end;
                                   end;

                                   EEPROM_Write(EE_TempFanOnSetEeAddr, TempFanOnSet);
                                   while (WR_bit) do begin end; // write/erase cycle waiting

                                   Chng[2] := 0;
                                   Glcd_Write_Text(WriteText, 84, Row3, Black);

                              end;




                          end; // chng[2] while end

                   end;
              end;
       
           3: begin   // fan off value
                   if (Ok_Button =0) then
                      begin
                        while (Ok_Button =0) do
                          begin
                              asm ClrWDT; end;
                          end;

                        Chng[3] := 1;

                        While (Chng[3] =1) do
                          begin

                             asm ClrWDT; end;

                             if (Up_Button =0) then
                              begin
                                  ButonStop       := 0;
                                  BtCounterNormal := 0;
                                  while (ButonStop = 0) do
                                    begin
                                        asm ClrWDT; end;
                                    end;
                                  Inc(TempFanOffSet);
                                  if (TempFanOffSet > 99) then
                                      TempFanOffSet := 99;
                              end else
                             if (Down_Button =0) then
                              begin
                                  ButonStop       := 0;
                                  BtCounterNormal := 0;
                                  while (ButonStop = 0) do
                                    begin
                                        asm ClrWDT; end;
                                    end;
                                  Dec(TempFanOffSet);
                                  if (TempFanOffSet < 5) then
                                      TempFanOffSet := 5;
                              end;

                             ValueDivide(TempFanOffSet, 0);
                             WriteText := Value_Text + '^'; // derece iþareti eklendi
                             Glcd_Write_Text(WriteText, 84, Row4, White);

                             if (Ok_Button =0) then
                              begin
                                  while (Ok_Button =0) do
                                   begin
                                        asm ClrWDT; end;
                                   end;

                                   EEPROM_Write(EE_TempFanOffSetEeAddr, TempFanOffSet);
                                   while (WR_bit) do begin end; // write/erase cycle waiting

                                   Chng[3] := 0;
                                   Glcd_Write_Text(WriteText, 84, Row4, Black);

                              end;




                          end; // chng[3] while end

                   end;
              end;
       
           {4: begin // röle tepki süresi

                    if (Ok_Button =0) then
                      begin
                        while (Ok_Button =0) do
                          begin
                              asm ClrWDT; end;
                          end;

                        Chng[4] := 1;

                        While (Chng[4] =1) do
                          begin
                            asm ClrWDT; end;

                            if (Up_Button =0) then
                              begin
                                  ButonStop       := 0;
                                  BtCounterNormal := 0;
                                  while (ButonStop = 0) do
                                    begin
                                        asm ClrWDT; end;
                                    end;
                                  Inc(TempSetResponseTime);
                                  if (TempSetResponseTime > 10) then      // 10sn
                                      TempSetResponseTime := 10;
                              end else
                             if (Down_Button =0) then
                              begin
                                  ButonStop       := 0;
                                  BtCounterNormal := 0;
                                  while (ButonStop = 0) do
                                    begin
                                        asm ClrWDT; end;
                                    end;
                                  Dec(TempSetResponseTime);
                                  if (TempSetResponseTime < 1) then      // 1sn
                                      TempSetResponseTime := 1;
                              end;

                             ValueDivide(TempSetResponseTime, 0);
                             Glcd_Write_Text(Value_Text,84 , Row5, 0);

                             if (Ok_Button =0) then
                              begin
                                  while (Ok_Button =0) do
                                   begin
                                        asm ClrWDT; end;
                                   end;

                                   EEPROM_Write(EE_TempSetResponseTimeEeAddr, TempSetResponseTime);
                                   while (WR_bit) do begin end; // write/erase cycle waiting

                                   Chng[4] := 0;
                                   Glcd_Write_Text(Value_Text,84 , Row5, Black);



                              end;




                          end; // chng[4] while end


                      end;
                 end;}
                 
            4: begin // geri

                    if (Ok_Button =0) then
                      begin
                        while (Ok_Button =0) do
                          begin
                              asm ClrWDT; end;
                          end;
                        MenuExit := 1;

                      end;



                 end;
       
       
       
          end; //case MenuSayac end;
       end;
 
      Glcd_Fill(0x00);
      MenuSayacValue := 6;
 
 end;
//******************************************************************************
Procedure DC_Settings;
 begin
      Glcd_Fill(0x00);
      MenuExit        := 0;
      MenuSayacValue  := 1;
      Chng[6]         := 2;
      
      //if (LanguageBit = English) then Glcd_Image(@DCSet_Page1_En2) else
      //if (LanguageBit = Turkish) then Glcd_Image(@DCSet_Page1_Tr2);
      
//      Glcd_Image(@DCSet_Page1_Tr2);

      Glcd_Write_Text(Title_DcMenu,     0, Row1, Black);
      Glcd_Write_Text(SubTitle_SetVolt, 6, Row2, Black);
      Glcd_Write_Text(SubTitle_SetAmps, 6, Row3, Black);
      Glcd_Write_Text(SubTitle_MaxVolt, 6, Row4, Black);
      Glcd_Write_Text(SubTitle_MinVolt, 6, Row5, Black);
      Glcd_Write_Text(SubTitle_Back,    6, Row6, Black);
      
      ChargeMode     := EEPROM_Read(EE_ChargeModeEeAddr);
      DCOutVoltSet   := EEPROM_Read(EE_DCOutVoltSetEeAddr);
      RedresorAkim   := EEPROM_Read(EE_RedresorAkimEeAddr);
      DCOutAmpsSet   := EEPROM_Read(EE_DcOutAmpsSetEeAddr);
      MaxVoltSet     := EEPROM_Read(EE_MaxVoltSetEeAddr);
      MinVoltSet     := EEPROM_Read(EE_MinVoltSetEeAddr);
      
      ValueDivide(DCOutVoltSet, 255);
      WriteText := Value_Text + 'V';
      Glcd_Write_Text(WriteText, 84, Row2, Black);

      ValueDivide(DcOutAmpsSet, 255);
      WriteText := Value_Text + 'A';
      Glcd_Write_Text(WriteText, 84, Row3, Black);

      ValueDivide(MaxVoltSet, 255);
      WriteText := Value_Text + 'V';
      Glcd_Write_Text(WriteText, 84, Row4, Black);

      ValueDivide(MinVoltSet, 255);
      WriteText := Value_Text + 'V';
      Glcd_Write_Text(WriteText, 84, Row5, Black);
      
      {DCSetResponseTime := EEPROM_Read(EE_DCSetResponseTimeEeAddr);
      ValueDivide(DCSetResponseTime, 0);
      Glcd_Write_Text(Value_Text,84 , Row6, Black);}
      
      While (MenuExit =0) do
       begin

          MenuSayac := MenuButtonRead(5, 255);  // menu için butonlarý oku 6 satýr menü var
          
          asm ClrWDT; end;
            
          case (MenuSayac) of
            1: begin  // çýkýþ gerilimi

                  if (ChargeMode = Manuel) then // þarj modu Manuel ise ayar yap deðilse yapma
                   begin
                    if (Ok_Button =0) then
                      begin
                        while (Ok_Button =0) do
                          begin
                              asm ClrWDT; end;
                          end;

                        Chng[1] := 1;

                        While (Chng[1] =1) do
                          begin

                             asm ClrWDT; end;

                             if (Up_Button =0) then
                              begin
                                  ButonStop       := 0;
                                  BtCounterNormal := 0;
                                  while (ButonStop = 0) do
                                    begin
                                        asm ClrWDT; end;
                                    end;
                                  Inc(DCOutVoltSet);
                                  if (DCOutVoltSet > ((HucreSayisi*2)*(B_ChargePercentHi * 0.1))) then
                                      DCOutVoltSet := ((HucreSayisi*2)*(B_ChargePercentHi * 0.1));
                              end else
                             if (Down_Button =0) then
                              begin
                                  ButonStop       := 0;
                                  BtCounterNormal := 0;
                                  while (ButonStop = 0) do
                                    begin
                                        asm ClrWDT; end;
                                    end;
                                  Dec(DCOutVoltSet);
                                  if (DCOutVoltSet < ((HucreSayisi*2)*(F_ChargePercentlo * 0.1))) then
                                      DCOutVoltSet := ((HucreSayisi*2)*(F_ChargePercentLo * 0.1));
                              end;

                             ValueDivide(DCOutVoltSet, 255);
                             WriteText := Value_Text + 'V';
                             Glcd_Write_Text(WriteText, 84, Row2, White);

                             if (Ok_Button =0) then
                              begin
                                  while (Ok_Button =0) do
                                   begin
                                        asm ClrWDT; end;
                                   end;

                                   EEPROM_Write(EE_DCOutVoltSetEeAddr, DCOutVoltSet);
                                   while (WR_bit) do begin end; // write/erase cycle waiting

                                   Chng[1] := 0;
                                   Glcd_Write_Text(WriteText, 84, Row2, Black);
                                   
                                  // ana ekranda eþitlenecek RectifierVoltage_Set    := DCOutVoltSet; // Manuel þarjda gerilimi redresör geirlimi oldu



                              end;




                          end; // chng[1] while end


                      end;
                   end else Glcd_Write_Text('------',84,Row2, Black); // þarj modu Manuel deðilse ekrana ---- iþaretlerini yaz

               end;
          
            2: begin  // çýkýþ akýmý


                    if (Ok_Button =0) then
                      begin
                        while (Ok_Button =0) do
                          begin
                              asm ClrWDT; end;
                          end;

                        Chng[2] := 1;

                        While (Chng[2] =1) do
                          begin

                             asm ClrWDT; end;

                             if (Up_Button =0) then
                              begin
                                  ButonStop       := 0;
                                  BtCounterNormal := 0;
                                  while (ButonStop = 0) do
                                    begin
                                        asm ClrWDT; end;
                                    end;
                                  Inc(DcOutAmpsSet);
                                  if (DcOutAmpsSet > RedresorAkim*10) then
                                      DcOutAmpsSet := RedresorAkim*10;
                              end else
                             if (Down_Button =0) then
                              begin
                                  ButonStop       := 0;
                                  BtCounterNormal := 0;
                                  while (ButonStop = 0) do
                                    begin
                                        asm ClrWDT; end;
                                    end;
                                  Dec(DcOutAmpsSet);
                                  if (DcOutAmpsSet < 1) then
                                      DcOutAmpsSet := 1;
                              end;

                             ValueDivide(DcOutAmpsSet, 255);
                             WriteText := Value_Text + 'A';
                             Glcd_Write_Text(WriteText, 84, Row3, White);

                             if (Ok_Button =0) then
                              begin
                                  while (Ok_Button =0) do
                                   begin
                                        asm ClrWDT; end;
                                   end;

                                   EEPROM_Write(EE_DcOutAmpsSetEeAddr, DcOutAmpsSet);
                                   while (WR_bit) do begin end; // write/erase cycle waiting

                                   Chng[2] := 0;
                                   Glcd_Write_Text(WriteText, 84, Row3, Black);



                              end;




                          end; // chng[2] while end


                      end;


               end;
          
            3: begin  // max gerilimi

                    if (Ok_Button =0) then
                      begin
                        while (Ok_Button =0) do
                          begin
                              asm ClrWDT; end;
                          end;

                        Chng[3] := 1;

                        While (Chng[3] =1) do
                          begin

                             asm ClrWDT; end;

                             if (Up_Button =0) then
                              begin
                                  ButonStop       := 0;
                                  BtCounterNormal := 0;
                                  while (ButonStop = 0) do
                                    begin
                                        asm ClrWDT; end;
                                    end;
                                  Inc(MaxVoltSet);
                                  if (MaxVoltSet > ((HucreSayisi*2)*((B_ChargePercentHi+10) * 0.1))) then
                                      MaxVoltSet := ((HucreSayisi*2)*((B_ChargePercentHi+10) * 0.1));
                              end else
                             if (Down_Button =0) then
                              begin
                                  ButonStop       := 0;
                                  BtCounterNormal := 0;
                                  while (ButonStop = 0) do
                                    begin
                                        asm ClrWDT; end;
                                    end;
                                  Dec(MaxVoltSet);
                                  if (MaxVoltSet < ((HucreSayisi*2)*(F_ChargePercentlo * 0.1))) then
                                      MaxVoltSet := ((HucreSayisi*2)*(F_ChargePercentLo * 0.1));
                              end;

                             ValueDivide(MaxVoltSet, 255);
                             WriteText := Value_Text + 'V';
                             Glcd_Write_Text(WriteText, 84, Row4, White);

                             if (Ok_Button =0) then
                              begin
                                  while (Ok_Button =0) do
                                   begin
                                        asm ClrWDT; end;
                                   end;

                                   EEPROM_Write(EE_MaxVoltSetEeAddr, MaxVoltSet);
                                   while (WR_bit) do begin end; // write/erase cycle waiting

                                   Chng[3] := 0;
                                   Glcd_Write_Text(WriteText, 84, Row4, Black);



                              end;




                          end; // chng[3] while end

                   end;

               end;
          
            4: begin  // min gerilimi

                    if (Ok_Button =0) then
                      begin
                        while (Ok_Button =0) do
                          begin
                              asm ClrWDT; end;
                          end;

                        Chng[4] := 1;

                        While (Chng[4] =1) do
                          begin

                             asm ClrWDT; end;

                             if (Up_Button =0) then
                              begin
                                  ButonStop       := 0;
                                  BtCounterNormal := 0;
                                  while (ButonStop = 0) do
                                    begin
                                        asm ClrWDT; end;
                                    end;
                                  Inc(MinVoltSet);
                                  if (MinVoltSet > ((HucreSayisi*2)*(B_ChargePercentHi * 0.1))) then
                                      MinVoltSet := ((HucreSayisi*2)*(B_ChargePercentHi * 0.1));
                              end else
                             if (Down_Button =0) then
                              begin
                                  ButonStop       := 0;
                                  BtCounterNormal := 0;
                                  while (ButonStop = 0) do
                                    begin
                                        asm ClrWDT; end;
                                    end;
                                  Dec(MinVoltSet);
                                  if (MinVoltSet < ((HucreSayisi*2)*((F_ChargePercentlo-10) * 0.1))) then
                                      MinVoltSet := ((HucreSayisi*2)*((F_ChargePercentLo-10) * 0.1));
                              end;

                             ValueDivide(MinVoltSet, 255);
                             WriteText := Value_Text + 'V';
                             Glcd_Write_Text(WriteText, 84, Row5, White);

                             if (Ok_Button =0) then
                              begin
                                  while (Ok_Button =0) do
                                   begin
                                        asm ClrWDT; end;
                                   end;

                                   EEPROM_Write(EE_MinVoltSetEeAddr, MinVoltSet);
                                   while (WR_bit) do begin end; // write/erase cycle waiting

                                   Chng[4] := 0;
                                   Glcd_Write_Text(WriteText, 84, Row5, Black);



                              end;




                          end; // chng[4] while end


                      end;

               end;
       
            {5: begin // röle tepki süresi

                    if (Ok_Button =0) then
                      begin
                        while (Ok_Button =0) do
                          begin
                              asm ClrWDT; end;
                          end;

                        Chng[5] := 1;

                        While (Chng[5] =1) do
                          begin
                            asm ClrWDT; end;

                            if (Up_Button =0) then
                              begin
                                  ButonStop       := 0;
                                  BtCounterNormal := 0;
                                  while (ButonStop = 0) do
                                    begin
                                        asm ClrWDT; end;
                                    end;
                                  Inc(DCSetResponseTime);
                                  if (DCSetResponseTime > 10) then      // 10sn
                                      DCSetResponseTime := 10;
                              end else
                             if (Down_Button =0) then
                              begin
                                  ButonStop       := 0;
                                  BtCounterNormal := 0;
                                  while (ButonStop = 0) do
                                    begin
                                        asm ClrWDT; end;
                                    end;
                                  Dec(DCSetResponseTime);
                                  if (DCSetResponseTime < 1) then      // 1sn
                                      DCSetResponseTime := 1;
                              end;

                             ValueDivide(DCSetResponseTime, 0);
                             Glcd_Write_Text(Value_Text,84 , Row6, 0);

                             if (Ok_Button =0) then
                              begin
                                  while (Ok_Button =0) do
                                   begin
                                        asm ClrWDT; end;
                                   end;

                                   EEPROM_Write(EE_DCSetResponseTimeEeAddr, DCSetResponseTime);
                                   while (WR_bit) do begin end; // write/erase cycle waiting

                                   Chng[5] := 0;
                                   Glcd_Write_Text(Value_Text,84 , Row6, Black);



                              end;




                          end; // chng[5] while end


                      end;
                 end;}
                 
            5: begin // geri

                    if (Ok_Button =0) then
                      begin
                        while (Ok_Button =0) do
                          begin
                              asm ClrWDT; end;
                          end;
                        MenuExit := 1;

                      end;



                 end;
          end; // MenuSayac case end;
          
          asm ClrWDT; end;
          
       end; // MenuExit while end
       
       Glcd_Fill(0x00);
       MenuSayacValue := 2;
 
 end;
//******************************************************************************
procedure ChargeModeWrite(Value, State : byte);
 begin
     Case (Value) of
      1: begin
              Glcd_Write_Text(BoostChargeText,84,row4,State);
         end;
     
      2: begin
              Glcd_Write_Text(FloatChargeText,84,row4,State);
         end;
         
      3: begin
              Glcd_Write_Text(TCompChargeText,84,row4,State);
         end;
     
      4: begin
              Glcd_Write_Text(ManualChargeText,84,row4,State);
         end;
     end;
 end;
//******************************************************************************
Procedure Battery_Settings;
var AkuAkimText : string[13];
 begin
      Glcd_Fill(0x00);
      MenuExit        := 0;
      MenuSayacValue  := 1;
      Chng[11]        := 2;
      AkuAkimText     := '             ';

      Glcd_Set_Font(@NewFont5x7, 5, 7, 32);     // Change font

      BatteryAh           := EEPROM_Read(EE_BatteryAhEeAddr);
      ChargeMode          := EEPROM_Read(EE_ChargeModeEeAddr);
      HucreSayisi         := EEPROM_Read(EE_HucreSayisiEeAddr);
      NomHucreGerilim     := EEPROM_Read(EE_NomHucreGerilimEeAddr);
      F_ChargePercentLo   := EEPROM_Read(EE_F_ChargePercentLoEeAddr);
      F_ChargePercentHi   := EEPROM_Read(EE_F_ChargePercentHiEeAddr);
      B_ChargePercentLo   := EEPROM_Read(EE_B_ChargePercentLoEeAddr);
      B_ChargePercentHi   := EEPROM_Read(EE_B_ChargePercentHiEeAddr);
      BoostChargeLimit    := EEPROM_Read(EE_BoostChargeLimitEeAddr);
      FloatChargeLimit    := EEPROM_Read(EE_FloatChargeLimitEeAddr);
      DeepDischargeVolt   := EEPROM_Read(EE_DeepDischargeVoltEeAddr);

      While (MenuExit =0) do
       begin


            MenuSayac := MenuButtonRead(11,255); // menu için butonlarý oku 11 satýr menü var

            if (Hidden_Button =0) then // fabrikadan gönderilirken bu butona basýlacak. ilk devreye almada akü ayarlarý menüsü açýlacak.
              begin
                  Glcd_Write_Text('+',0,Row1,Black);
                  FirstStartUpBattMenu := 120;
                  EEPROM_Write(EE_FirstBattMenuEeAddr, FirstStartUpBattMenu);
                  while (WR_bit) do begin end; // write/erase cycle waiting

                  Pause_ms(100);

              end;

            asm ClrWDT; end;

            if (MenuSayac < 8) then
             begin

                 if (Chng[11] = 2) then // ekrana sürekli resmi basma
                   begin              // diðer ekrandan gelince bir kere bas
                       // if (LanguageBit = English) then Glcd_Image(@BatterySet_Page1_En) else
                        //if (LanguageBit = Turkish) then Glcd_Image(@BatterySet_Page1_Tr);

//                        Glcd_Image(@BatterySet_Page1_Tr);

                        Glcd_Fill(0x00);

                        // 1. sayfa
                        Glcd_Write_Text(Title_BattMenu1,      0, Row1, Black);
                        Glcd_Write_Text(SubTitle_BattAh,      6, Row2, Black);
                        Glcd_Write_Text(SubTitle_BattAmps,    6, Row3, Black);
                        Glcd_Write_Text(SubTitle_ChrgMode,    6, Row4, Black);
                        Glcd_Write_Text(SubTitle_BoostVolt,   6, Row5, Black);
                        Glcd_Write_Text(SubTitle_FloatVolt,   6, Row6, Black);
                        Glcd_Write_Text(SubTitle_BoostTime,   6, Row7, Black);
                        Glcd_Write_Text(SubTitle_DeepVolt,    6, Row8, Black);

                        Chng[11] := 1;

                        WordToStr(BatteryAh, Value_Text);
                        WriteText := Value_Text + 'Ah';
                        Glcd_Write_Text(WriteText, 84, Row2, Black);

                        ChargeModeWrite(ChargeMode,Black);

                        case (ChargeMode) of
                           Boost : begin
                                        BatteryAmpsSet := EEPROM_Read(EE_BatteryAmpsBoostEeAddr);
                                   end;

                           Float : begin
                                        BatteryAmpsSet := EEPROM_Read(EE_BatteryAmpsFloatEeAddr);
                                   end;

                           TComp : begin
                                        BatteryAmpsSet := EEPROM_Read(EE_BatteryAmpsTCompEeAddr);
                                   end;

                           Manuel: begin
                                        BatteryAmpsSet := EEPROM_Read(EE_BatteryAmpsManuelEeAddr);
                                   end;

                         end;

                        Temp_RealAku  := ((BatteryAmpsSet*10.0) / (BatteryAh*1.0));
                        Temp_WordAku  := Temp_RealAku * 10.0;
                        ValueDivide(Temp_WordAku, 128);
                        ValueDivide(BatteryAmpsSet, 255);
                        AkuAkimText   := ValueText2 + '% - '+ Value_Text+'A';
                        Glcd_Write_Text(AkuAkimText,36 , Row3, Black);

                        BoostChargeVoltage := EEPROM_Read(EE_BoostChargeVoltEeAddr);
                        ValueDivide(BoostChargeVoltage,255);
                        WriteText := Value_Text + 'V';
                        Glcd_Write_Text(WriteText,84 , Row5, Black);

                        FloatChargeVoltage := EEPROM_Read(EE_FloatChargeVoltEeAddr);
                        ValueDivide(FloatChargeVoltage,255);
                        WriteText := Value_Text + 'V';
                        Glcd_Write_Text(WriteText,84 , Row6, Black);

                        BoostChargeTimeSet    := EEPROM_Read(EE_BoostChargeTimeEeAddr);
                        ValueDivide(BoostChargeTimeSet,0);
                        WriteText := Value_Text + MinuteText;
                        Glcd_Write_Text(WriteText,84 , Row7, Black);

                        DeepDischargeVolt    := EEPROM_Read(EE_DeepDischargeVoltEeAddr);
                        ValueDivide(DeepDischargeVolt,255);
                        WriteText := Value_Text + 'V';
                        Glcd_Write_Text(WriteText,84 , Row8, Black);


                   end;
             end else
            if (MenuSayac >= 8) then
             begin
               if (Chng[11] = 1) then   // ekrana sürekli resmi basma
                   begin              // diðer ekrandan gelince bir kere bas
                      //  if (LanguageBit = English) then Glcd_Image(@BatterySet_Page2_En) else
                        //if (LanguageBit = Turkish) then Glcd_Image(@BatterySet_Page2_Tr);

//                        Glcd_Image(@BatterySet_Page2_Tr);

                        Glcd_Fill(0x00);

                        // 2. sayfa
                        Glcd_Write_Text(Title_BattMenu2,      0, Row1, Black);
                        Glcd_Write_Text(SubTitle_BFMode,      6, Row2, Black);
                        Glcd_Write_Text(SubTitle_Blimit,      6, Row3, Black);
                        Glcd_Write_Text(SubTitle_Flimit,      6, Row4, Black);
                        Glcd_Write_Text(SubTitle_Back,        6, Row5, Black);

                        Chng[11] := 2;

                        AutoBFMode := EEPROM_Read(EE_AutoBFModeEeAddr);

                        if (AutoBFMode =0) then Glcd_Write_Text(DisableText, 84, Row2, Black) else
                        if (AutoBFMode =1) then Glcd_Write_Text(EnableText, 84, Row2, Black);

                        BoostChargeLimit    := EEPROM_Read(EE_BoostChargeLimitEeAddr);
                        ValueDivide(BoostChargeLimit, 255);
                        WriteText := Value_Text + 'A';
                        Glcd_Write_Text(WriteText,84 , Row3, Black);

                        FloatChargeLimit    := EEPROM_Read(EE_FloatChargeLimitEeAddr);
                        ValueDivide(FloatChargeLimit, 255);
                        WriteText := Value_Text + 'A';
                        Glcd_Write_Text(WriteText,84 , Row4, Black);

                   end;
             end;





             case (MenuSayac) of
              1: begin // akü ah

                    if (Ok_Button =0) then
                      begin
                        while (Ok_Button =0) do
                          begin
                              asm ClrWDT; end;
                          end;

                        Chng[1] := 1;

                        While (Chng[1] =1) do
                          begin

                             asm ClrWDT; end;

                             if (Up_Button =0) then
                              begin
                                  ButonStop       := 0;
                                  BtCounterNormal := 0;
                                  while (ButonStop = 0) do
                                    begin
                                        asm ClrWDT; end;
                                    end;
                                  Inc(BatteryAh);
                                  if (BatteryAh >1000) then BatteryAh := 7;  // 7 - 500Ah arasý
                              end else
                             if (Down_Button =0) then
                              begin
                                  ButonStop       := 0;
                                  BtCounterNormal := 0;
                                  while (ButonStop = 0) do
                                    begin
                                        asm ClrWDT; end;
                                    end;
                                  Dec(BatteryAh);
                                  if (BatteryAh < 7) then BatteryAh := 1000;
                              end;



                             WordToStr(BatteryAh, Value_Text);
                             WriteText := Value_Text + 'Ah';
                             Glcd_Write_Text(WriteText, 84, Row2, White);

                             if (ChargeMode = Boost) then // þarj modu hýzlý ise
                               begin

                                    
                                    BatteryAmpsSet := BatteryAh*2;
                                    if (BatteryAmpsSet > (RedresorAkim*10)) then BatteryAmpsSet := (RedresorAkim*10); // 06.01.2020 TEÝAÞ isteðiyle akü ah deðeri ayarlanýrken akü þarj akýmý, redresör akýmýnýn üzerine çýkmayacak.
                                    
                                    //if (BatteryAmpsSet > (BatteryAh * 2)) then BatteryAmpsSet := (BatteryAh *2); // 0.2C ile

                                    Temp_RealAku  := ((BatteryAmpsSet*10.0) / (BatteryAh*1.0));
                                    Temp_WordAku  := Temp_RealAku * 10.0;
                                    ValueDivide(Temp_WordAku, 128);
                                    ValueDivide(BatteryAmpsSet, 255);
                                    AkuAkimText   := ValueText2 + '% - '+ Value_Text+'A';
                                    Glcd_Write_Text(AkuAkimText,36 , Row3, Black);

                               end else
                             if ((ChargeMode = Float)or(ChargeMode = Tcomp)or(ChargeMode = Manuel))then // þarj modu hýzlý deðilse
                               begin

                                    BatteryAmpsSet := BatteryAh;
                                    if (BatteryAmpsSet > (RedresorAkim*10)) then BatteryAmpsSet := (RedresorAkim*10); // 06.01.2020 TEÝAÞ isteðiyle akü ah deðeri ayarlanýrken akü þarj akýmý, redresör akýmýnýn üzerine çýkmayacak.
                                    //if (BatteryAmpsSet > (BatteryAh * 1)) then BatteryAmpsSet := (BatteryAh *1); // 0.1C ile

                                    Temp_RealAku  := ((BatteryAmpsSet*10.0) / (BatteryAh*1.0));
                                    Temp_WordAku  := Temp_RealAku * 10.0;
                                    ValueDivide(Temp_WordAku, 128);
                                    ValueDivide(BatteryAmpsSet, 255);
                                    AkuAkimText   := ValueText2 + '% - '+ Value_Text+'A';
                                    Glcd_Write_Text(AkuAkimText,36 , Row3, Black);

                               end;




                             if (Ok_Button =0) then
                              begin
                                  while (Ok_Button =0) do
                                   begin
                                        asm ClrWDT; end;
                                   end;

                                   EEPROM_Write(EE_BatteryAhEeAddr, BatteryAh);
                                   while (WR_bit) do begin end; // write/erase cycle waiting

                                   BoostChargeLimit := BatteryAh *2;
                                   EEPROM_Write(EE_BoostChargeLimitEeAddr, BoostChargeLimit);
                                   while (WR_bit) do begin end; // write/erase cycle waiting

                                   FloatChargeLimit := BatteryAh;
                                   EEPROM_Write(EE_FloatChargeLimitEeAddr, FloatChargeLimit);
                                   while (WR_bit) do begin end; // write/erase cycle waiting


                                   if (BatteryAmpsSet > (BatteryAh*2)) then BatteryAmpsSet := RedresorAkim*10; // 06.01.2020 TEÝAÞ isteðiyle akü ah deðeri ayarlanýrken akü þarj akýmý, redresör akýmýnýn üzerine çýkmayacak.
                                   EEPROM_Write(EE_BatteryAmpsBoostEeAddr, BatteryAmpsSet);
                                   while (WR_bit) do begin end; // write/erase cycle waiting

                                   EEPROM_Write(EE_BatteryAmpsFloatEeAddr, BatteryAmpsSet);
                                   while (WR_bit) do begin end; // write/erase cycle waiting

                                   EEPROM_Write(EE_BatteryAmpsManuelEeAddr, BatteryAmpsSet);
                                   while (WR_bit) do begin end; // write/erase cycle waiting

                                   EEPROM_Write(EE_BatteryAmpsTCompEeAddr, BatteryAmpsSet);
                                   while (WR_bit) do begin end; // write/erase cycle waiting

                                   Chng[1] := 0;
                                   Glcd_Write_Text(WriteText, 84, Row2, Black);

                                   case (ChargeMode) of
                                     Boost : begin
                                                  BatteryAmpsSet := EEPROM_Read(EE_BatteryAmpsBoostEeAddr);
                                             end;

                                     Float : begin
                                                  BatteryAmpsSet := EEPROM_Read(EE_BatteryAmpsFloatEeAddr);
                                             end;

                                     TComp : begin
                                                  BatteryAmpsSet := EEPROM_Read(EE_BatteryAmpsTCompEeAddr);
                                             end;

                                     Manuel: begin
                                                  BatteryAmpsSet := EEPROM_Read(EE_BatteryAmpsManuelEeAddr);
                                             end;

                                   end;

                                   Temp_RealAku  := ((BatteryAmpsSet*10.0) / (BatteryAh*1.0));
                                   Temp_WordAku  := Temp_RealAku * 10.0;
                                   ValueDivide(Temp_WordAku, 128);
                                   ValueDivide(BatteryAmpsSet, 255);
                                   AkuAkimText   := ValueText2 + '% - '+ Value_Text+'A';
                                   Glcd_Write_Text(AkuAkimText,36 , Row3, Black);

                              end;




                          end; // chng[1] while end


                      end;


                 end;

              2: begin // akü akým


                    if (Ok_Button =0) then
                      begin
                        while (Ok_Button =0) do
                          begin
                              asm ClrWDT; end;
                          end;

                        Chng[2] := 1;

                        While (Chng[2] =1) do
                          begin
                             asm ClrWDT; end;

                             if (Up_Button =0) then
                              begin
                                  ButonStop       := 0;
                                  BtCounterNormal := 0;
                                  while (ButonStop = 0) do
                                    begin
                                        asm ClrWDT; end;
                                    end;
                                  Inc(BatteryAmpsSet);
                                  if ((ChargeMode = Boost)or(ChargeMode = Manuel)) then // þarj modu hýzlýysa veya manuelse
                                    begin
                                         if (BatteryAmpsSet > (BatteryAh * 2)) then BatteryAmpsSet := (BatteryAh *2); // 0.2C ile
                                         if (BatteryAmpsSet > (RedresorAkim*10)) then BatteryAmpsSet := (RedresorAkim*10); // 06.01.2020 TEÝAÞ isteðiyle akü ah deðeri ayarlanýrken akü þarj akýmý, redresör akýmýnýn üzerine çýkmayacak.
                                    end else
                                  if ((ChargeMode = Float)or(ChargeMode = TComp)) then // þarj normal veya sýcaklýk kompanzasyonsa
                                    begin
                                         if (BatteryAmpsSet > (BatteryAh * 1)) then BatteryAmpsSet := (BatteryAh *1); // 0.1C ile
                                         if (BatteryAmpsSet > (RedresorAkim*10)) then BatteryAmpsSet := (RedresorAkim*10); // 06.01.2020 TEÝAÞ isteðiyle akü ah deðeri ayarlanýrken akü þarj akýmý, redresör akýmýnýn üzerine çýkmayacak.
                                    end;
                              end else
                             if (Down_Button =0) then
                              begin
                                  ButonStop       := 0;
                                  BtCounterNormal := 0;
                                  while (ButonStop = 0) do
                                    begin
                                        asm ClrWDT; end;
                                    end;
                                  Dec(BatteryAmpsSet);
                                  if (ChargeMode = Boost) then // þarj modu hýzlýysa
                                    begin
                                         if (BatteryAmpsSet < (BatteryAh * 1)) then BatteryAmpsSet := (BatteryAh *1); // 0.1C ye kadar
                                         if (BatteryAmpsSet > (RedresorAkim*10)) then BatteryAmpsSet := (RedresorAkim*10); // 06.01.2020 TEÝAÞ isteðiyle akü ah deðeri ayarlanýrken akü þarj akýmý, redresör akýmýnýn üzerine çýkmayacak.
                                    end else
                                  if ((ChargeMode = Float)or(ChargeMode = TComp)or(ChargeMode = Manuel)) then // þarj normal veya sýcaklýk kompanzasyon veya Manuel ise
                                    begin
                                         if (BatteryAmpsSet < 1) then BatteryAmpsSet := 1; // 0.1A e kadar
                                         if (BatteryAmpsSet > (RedresorAkim*10)) then BatteryAmpsSet := (RedresorAkim*10); // 06.01.2020 TEÝAÞ isteðiyle akü ah deðeri ayarlanýrken akü þarj akýmý, redresör akýmýnýn üzerine çýkmayacak.
                                    end;
                              end;

                             Temp_RealAku  := ((BatteryAmpsSet*10.0) / (BatteryAh*1.0));
                             Temp_WordAku  := Temp_RealAku * 10.0;
                             ValueDivide(Temp_WordAku, 128);
                             ValueDivide(BatteryAmpsSet, 255);
                             AkuAkimText   := ValueText2 + '% - '+ Value_Text+'A';
                             Glcd_Write_Text(AkuAkimText,36 , Row3, 0);


                             if (Ok_Button =0) then
                              begin
                                  while (Ok_Button =0) do
                                   begin
                                        asm ClrWDT; end;
                                   end;


                                   case (ChargeMode) of
                                     Boost : begin
                                                  EEPROM_Write(EE_BatteryAmpsBoostEeAddr, BatteryAmpsSet);
                                             end;

                                     Float : begin
                                                  EEPROM_Write(EE_BatteryAmpsFloatEeAddr, BatteryAmpsSet);
                                             end;

                                     TComp : begin
                                                  EEPROM_Write(EE_BatteryAmpsTCompEeAddr, BatteryAmpsSet);
                                             end;

                                     Manuel: begin
                                                  EEPROM_Write(EE_BatteryAmpsManuelEeAddr, BatteryAmpsSet);
                                             end;

                                   end;


                                   while (WR_bit) do begin end; // write/erase cycle waiting

                                   Chng[2] := 0;
                                   Glcd_Write_Text(AkuAkimText,36 , Row3, Black);



                              end;




                          end; // chng[2] while end


                      end;


                 end;

              3: begin // þarj modu

                    if (Ok_Button =0) then
                      begin
                        while (Ok_Button =0) do
                          begin
                              asm ClrWDT; end;
                          end;

                        Chng[3] := 1;

                        While (Chng[3] =1) do
                          begin
                             asm ClrWDT; end;

                             if (Up_Button =0) then
                              begin
                                  while (Up_Button = 0) do
                                    begin
                                        asm ClrWDT; end;
                                    end;
                                  Inc(ChargeMode);
                                  if (ChargeMode >4) then ChargeMode := 1;
                              end else
                             if (Down_Button =0) then
                              begin
                                  while (Down_Button = 0) do
                                    begin
                                        asm ClrWDT; end;
                                    end;
                                  Dec(ChargeMode);
                                  if (ChargeMode < 1) then ChargeMode := 4;
                              end;

                             ChargeModeWrite(ChargeMode,0);


                             if (Ok_Button =0) then
                              begin
                                  while (Ok_Button =0) do
                                   begin
                                        asm ClrWDT; end;
                                   end;

                                   EEPROM_Write(EE_ChargeModeEeAddr, ChargeMode);
                                   while (WR_bit) do begin end; // write/erase cycle waiting

                                   Chng[3] := 0;
                                   ChargeModeWrite(ChargeMode,black);

                                   case (ChargeMode) of
                                     Boost : begin
                                                  BatteryAmpsSet := EEPROM_Read(EE_BatteryAmpsBoostEeAddr);
                                                 // RectifierVoltage_Set := BoostChargeVoltage;
                                             end;

                                     Float : begin
                                                  BatteryAmpsSet := EEPROM_Read(EE_BatteryAmpsFloatEeAddr);
                                                 // RectifierVoltage_Set := BoostChargeVoltage;
                                             end;

                                     TComp : begin
                                                  BatteryAmpsSet := EEPROM_Read(EE_BatteryAmpsTCompEeAddr);
                                             end;

                                     Manuel: begin
                                                  BatteryAmpsSet := EEPROM_Read(EE_BatteryAmpsManuelEeAddr);
                                                 // RectifierVoltage_Set    := DCOutVoltSet; // Manuel þarjda gerilimi redresör geirlimi oldu
                                             end;

                                   end;

                                   Temp_RealAku  := ((BatteryAmpsSet*10.0) / (BatteryAh*1.0));
                                   Temp_WordAku  := Temp_RealAku * 10.0;
                                   ValueDivide(Temp_WordAku, 128);
                                   ValueDivide(BatteryAmpsSet, 255);
                                   AkuAkimText   := ValueText2 + '% - '+ Value_Text;
                                   Glcd_Write_Text(AkuAkimText,36 , Row3, Black);



                              end;




                          end; // chng[3] while end


                      end;
                 end;

              4: begin // hýzlý þarj gerilim

                    if (Ok_Button =0) then
                      begin
                        while (Ok_Button =0) do
                          begin
                              asm ClrWDT; end;
                          end;

                        Chng[4] := 1;

                        While (Chng[4] =1) do
                          begin

                            asm ClrWDT; end;

                            if (Up_Button =0) then
                              begin
                                  ButonStop       := 0;
                                  BtCounterNormal := 0;
                                  while (ButonStop = 0) do
                                    begin
                                        asm ClrWDT; end;
                                    end;
                                  Inc(BoostChargeVoltage);
                                  if (BoostChargeVoltage > ((HucreSayisi*2)*(B_ChargePercentHi * 0.1))) then      // örneðin (24 eleman *2 yani 48V için) (%135 div 10 =13.5) 48*13,5=648 yani 64,8V
                                      BoostChargeVoltage := ((HucreSayisi*2)*(B_ChargePercentHi * 0.1));
                              end else
                             if (Down_Button =0) then
                              begin
                                  ButonStop       := 0;
                                  BtCounterNormal := 0;
                                  while (ButonStop = 0) do
                                    begin
                                        asm ClrWDT; end;
                                    end;
                                  Dec(BoostChargeVoltage);
                                  if (BoostChargeVoltage < ((HucreSayisi*2)*(B_ChargePercentLo * 0.1))) then      // örneðin (24 eleman *2 yani 48V için) (%115 div 10 =11.5) 48*11,5=552 yani 55,2V
                                      BoostChargeVoltage := ((HucreSayisi*2)*(B_ChargePercentLo * 0.1));
                              end;

                             ValueDivide(BoostChargeVoltage, 255);
                             WriteText := Value_Text + 'V';
                             Glcd_Write_Text(WriteText,84 , Row5, 0);

                             if (Ok_Button =0) then
                              begin
                                  while (Ok_Button =0) do
                                   begin
                                        asm ClrWDT; end;
                                   end;

                                   EEPROM_Write(EE_BoostChargeVoltEeAddr, BoostChargeVoltage);
                                   while (WR_bit) do begin end; // write/erase cycle waiting

                                   Chng[4] := 0;
                                   Glcd_Write_Text(WriteText,84 , Row5, Black);


                              end;


                          end; // chng[4] while end


                      end;
                 end;

              5: begin // normal þarj gerilim

                    if (Ok_Button =0) then
                      begin
                        while (Ok_Button =0) do
                          begin
                              asm ClrWDT; end;
                          end;

                        Chng[5] := 1;

                        While (Chng[5] =1) do
                          begin

                             asm ClrWDT; end;

                            if (Up_Button =0) then
                              begin
                                  ButonStop       := 0;
                                  BtCounterNormal := 0;
                                  while (ButonStop = 0) do
                                    begin
                                        asm ClrWDT; end;
                                    end;
                                  Inc(FloatChargeVoltage);
                                  if (FloatChargeVoltage > ((HucreSayisi*2)*(F_ChargePercentHi * 0.1))) then      // örneðin (24 eleman *2 yani 48V için) (%135 div 10 =13.5) 48*13,5=648 yani 64,8V
                                      FloatChargeVoltage := ((HucreSayisi*2)*(F_ChargePercentHi * 0.1));
                              end else
                             if (Down_Button =0) then
                              begin
                                  ButonStop       := 0;
                                  BtCounterNormal := 0;
                                  while (ButonStop = 0) do
                                    begin
                                        asm ClrWDT; end;
                                    end;
                                  Dec(FloatChargeVoltage);
                                  if (FloatChargeVoltage < ((HucreSayisi*2)*(F_ChargePercentLo * 0.1))) then      // örneðin (24 eleman *2 yani 48V için) (%115 div 10 =11.5) 48*11,5=552 yani 55,2V
                                      FloatChargeVoltage := ((HucreSayisi*2)*(F_ChargePercentLo * 0.1));
                              end;

                             ValueDivide(FloatChargeVoltage, 255);
                             WriteText := Value_Text + 'V';
                             Glcd_Write_Text(WriteText,84 , Row6, 0);

                             if (Ok_Button =0) then
                              begin
                                  while (Ok_Button =0) do
                                   begin
                                        asm ClrWDT; end;
                                   end;

                                   EEPROM_Write(EE_FloatChargeVoltEeAddr, FloatChargeVoltage);
                                   while (WR_bit) do begin end; // write/erase cycle waiting

                                   Chng[5] := 0;
                                   Glcd_Write_Text(WriteText,84 , Row6, Black);


                              end;



                          end; // chng[5] while end


                      end;
                 end;

              6: begin // hýzlý þarj süresi

                    if (Ok_Button =0) then
                      begin
                        while (Ok_Button =0) do
                          begin
                              asm ClrWDT; end;
                          end;

                        Chng[6] := 1;

                        While (Chng[6] =1) do
                          begin
                            asm ClrWDT; end;

                            if (Up_Button =0) then
                              begin
                                  ButonStop       := 0;
                                  BtCounterNormal := 0;
                                  while (ButonStop = 0) do
                                    begin
                                        asm ClrWDT; end;
                                    end;
                                  Inc(BoostChargeTimeSet);
                                  if (BoostChargeTimeSet > 4320) then      // 4320dk 72s
                                      BoostChargeTimeSet := 4320;
                              end else
                             if (Down_Button =0) then
                              begin
                                  ButonStop       := 0;
                                  BtCounterNormal := 0;
                                  while (ButonStop = 0) do
                                    begin
                                        asm ClrWDT; end;
                                    end;
                                  Dec(BoostChargeTimeSet);
                                  if (BoostChargeTimeSet < 1) then      // 1dk
                                      BoostChargeTimeSet := 1;
                              end;

                             ValueDivide(BoostChargeTimeSet, 0);
                             WriteText := Value_Text + MinuteText;
                             Glcd_Write_Text(WriteText,84 , Row7, 0);

                             if (Ok_Button =0) then
                              begin
                                  while (Ok_Button =0) do
                                   begin
                                        asm ClrWDT; end;
                                   end;

                                   EEPROM_Write(EE_BoostChargeTimeEeAddr, BoostChargeTimeSet);
                                   while (WR_bit) do begin end; // write/erase cycle waiting

                                   Chng[6] := 0;
                                   Glcd_Write_Text(WriteText,84 , Row7, Black);

                                   BoostChargeTime := BoostChargeTimeSet;



                              end;




                          end; // chng[6] while end


                      end;
                 end;

              7: begin // deþarj gerilimi

                    if (Ok_Button =0) then
                      begin
                        while (Ok_Button =0) do
                          begin
                              asm ClrWDT; end;
                          end;

                        Chng[7] := 1;

                        While (Chng[7] =1) do
                          begin
                            asm ClrWDT; end;

                            if (Up_Button =0) then
                              begin
                                  ButonStop       := 0;
                                  BtCounterNormal := 0;
                                  while (ButonStop = 0) do
                                    begin
                                        asm ClrWDT; end;
                                    end;
                                  Inc(DeepDischargeVolt);
                                  if (DeepDischargeVolt > (HucreSayisi*20)) then      //
                                      DeepDischargeVolt := (HucreSayisi*20);
                              end else
                             if (Down_Button =0) then
                              begin
                                  ButonStop       := 0;
                                  BtCounterNormal := 0;
                                  while (ButonStop = 0) do
                                    begin
                                        asm ClrWDT; end;
                                    end;
                                  Dec(DeepDischargeVolt);
                                  if (DeepDischargeVolt < (HucreSayisi*17.5)) then
                                      DeepDischargeVolt := (HucreSayisi*17.5);
                              end;

                             ValueDivide(DeepDischargeVolt, 255);
                             WriteText := Value_Text + 'V';
                             Glcd_Write_Text(WriteText,84 , Row8, 0);

                             if (Ok_Button =0) then
                              begin
                                  while (Ok_Button =0) do
                                   begin
                                        asm ClrWDT; end;
                                   end;

                                   EEPROM_Write(EE_DeepDischargeVoltEeAddr, DeepDischargeVolt);
                                   while (WR_bit) do begin end; // write/erase cycle waiting

                                   Chng[7] := 0;
                                   Glcd_Write_Text(WriteText,84 , Row8, Black);



                              end;




                          end; // chng[7] while end


                      end;
                 end;

              8: begin // auto BF mode

                    if (Ok_Button =0) then
                      begin
                        while (Ok_Button =0) do
                          begin
                              asm ClrWDT; end;
                          end;

                        Chng[8] := 1;

                        While (Chng[8] =1) do
                          begin
                             asm ClrWDT; end;

                             if ((Up_Button =0)or(Down_Button =0)) then
                               begin

                                   while ((Up_Button =0)or(Down_Button =0)) do
                                     begin
                                         asm ClrWDT; end;
                                     end;

                                   AutoBFMode := not AutoBFMode;
                               end;

                             if (AutoBFMode =0) then Glcd_Write_Text(DisableText, 84, Row2, 0) else
                             if (AutoBFMode =1) then Glcd_Write_Text(EnableText, 84, Row2, 0);

                             if (Ok_Button =0) then
                              begin
                                  while (Ok_Button =0) do
                                   begin
                                        asm ClrWDT; end;
                                   end;

                                   EEPROM_Write(EE_AutoBFModeEeAddr, AutoBFMode);
                                   while (WR_bit) do begin end; // write/erase cycle waiting

                                   Chng[8] := 0;
                                   if (AutoBFMode =0) then Glcd_Write_Text(DisableText, 84, Row2, Black) else
                                   if (AutoBFMode =1) then Glcd_Write_Text(EnableText, 84, Row2, Black);



                              end;



                          end; // chng[8] while end


                      end;
                 end;

              9: begin // hýzlý þarj limit

                    if (Ok_Button =0) then
                      begin
                        while (Ok_Button =0) do
                          begin
                              asm ClrWDT; end;
                          end;

                        Chng[9] := 1;

                        While (Chng[9] =1) do
                          begin
                            asm ClrWDT; end;

                             if (Up_Button =0) then
                              begin
                                  ButonStop       := 0;
                                  BtCounterNormal := 0;
                                  while (ButonStop = 0) do
                                    begin
                                        asm ClrWDT; end;
                                    end;
                                  Inc(BoostChargeLimit);
                                  if (BoostChargeLimit > (BatteryAh * 2)) then BoostChargeLimit := (BatteryAh *2); // 0.2C ile

                              end else
                             if (Down_Button =0) then
                              begin
                                  ButonStop       := 0;
                                  BtCounterNormal := 0;
                                  while (ButonStop = 0) do
                                    begin
                                        asm ClrWDT; end;
                                    end;
                                  Dec(BoostChargeLimit);
                                  if (BoostChargeLimit < (BatteryAh + 1)) then BoostChargeLimit := (BatteryAh + 1);
                              end;

                             ValueDivide(BoostChargeLimit, 255);
                             WriteText := Value_Text + 'A';
                             Glcd_Write_Text(WriteText,84 , Row3, 0);


                             if (Ok_Button =0) then
                              begin
                                  while (Ok_Button =0) do
                                   begin
                                        asm ClrWDT; end;
                                   end;


                                   EEPROM_Write(EE_BoostChargeLimitEeAddr, BoostChargeLimit);
                                   while (WR_bit) do begin end; // write/erase cycle waiting

                                   Chng[9] := 0;
                                   Glcd_Write_Text(WriteText,84 , Row3, Black);


                              end;




                          end; // chng[9] while end


                      end;
                 end;

             10: begin // normal þarj limit

                    if (Ok_Button =0) then
                      begin
                        while (Ok_Button =0) do
                          begin
                              asm ClrWDT; end;
                          end;

                        Chng[10] := 1;

                        While (Chng[10] =1) do
                          begin
                            asm ClrWDT; end;

                             if (Up_Button =0) then
                              begin
                                  ButonStop       := 0;
                                  BtCounterNormal := 0;
                                  while (ButonStop = 0) do
                                    begin
                                        asm ClrWDT; end;
                                    end;
                                  Inc(FloatChargeLimit);
                                  if (FloatChargeLimit > (BatteryAh)) then FloatChargeLimit := (BatteryAh); // 0.1C ile

                              end else
                             if (Down_Button =0) then
                              begin
                                  ButonStop       := 0;
                                  BtCounterNormal := 0;
                                  while (ButonStop = 0) do
                                    begin
                                        asm ClrWDT; end;
                                    end;
                                  Dec(FloatChargeLimit);
                                  if (FloatChargeLimit < 1) then FloatChargeLimit := 1;
                              end;

                             ValueDivide(FloatChargeLimit, 255);
                             WriteText := Value_Text + 'A';
                             Glcd_Write_Text(WriteText,84 , Row4, 0);


                             if (Ok_Button =0) then
                              begin
                                  while (Ok_Button =0) do
                                   begin
                                        asm ClrWDT; end;
                                   end;


                                   EEPROM_Write(EE_FloatChargeLimitEeAddr, FloatChargeLimit);
                                   while (WR_bit) do begin end; // write/erase cycle waiting

                                   Chng[10] := 0;
                                   Glcd_Write_Text(WriteText,84 , Row4, Black);


                              end;




                          end; // chng[10] while end


                      end;
                 end;

             11: begin // geri

                    if (Ok_Button =0) then
                      begin
                        while (Ok_Button =0) do
                          begin
                              asm ClrWDT; end;
                          end;
                        MenuExit := 1;

                      end;



                 end;



             end;


            asm ClrWDT; end;


       end;

       if (FirstStartUpBattMenu = 120) then
         begin
           FirstStartUpBattMenu := 160; // 160 yaz bir daha bu menüye girmesin
           EEPROM_Write(EE_FirstBattMenuEeAddr, FirstStartUpBattMenu);
           while (WR_bit) do begin end; // write/erase cycle waiting
         end;

       Glcd_Fill(0x00);
       MenuSayacValue := 4;


 end;
//******************************************************************************

procedure Password_Entry_Screen(View : byte);
var Pass_Ok_Bit, Password_Correct  : bit;
    Pass_Change_Counter: short;
    TempText : string[3];
    PassText : string[1];
    Temp_Word : word;
    Chng1 : byte;
 begin



      Pass_Ok_Bit         := 0;
      Pass_Change_Counter := 1;
      Temp_Word           := 0;
      Password_Correct    := 0;
      PasswordArray[1]    := 0;
      PasswordArray[2]    := 0;
      PasswordArray[3]    := 0;
      PasswordArray[4]    := 0;

      ChngA := 0;
      ChngB := 0;
      ChngC := 0;
      ChngD := 0;
      TempText := '   ';
      PassText := ' ';

      Chng1 := 0;

      Glcd_PartialImage(5, 15, 115, 41, 115, 41, @PasswordEntryBos);
      Glcd_Write_Char('x',48,row5,Black);
      Glcd_Write_Char('x',54,row5,Black);
      Glcd_Write_Char('x',60,row5,Black);
      Glcd_Write_Char('x',66,row5,Black);
      {
      if (LanguageBit = English) then
        begin
             Glcd_Write_Text(' Ok ',89,row6,black);
             Glcd_Write_Text('Cancel',12,row6,black);
        end else
      if (LanguageBit = Turkish) then
        begin
             Glcd_Write_Text('Tamam',84,Row6,black);
             Glcd_Write_Text('Ýptal',12,row6,black);
        end; }

      Glcd_Write_Text(SubTitle_Ok,84,Row6,black);
      Glcd_Write_Text(SubTitle_Cancel,12,row6,black);

      if (View = 0) then
        begin
             Glcd_Write_Text(PassNewText,12,row4,black);
        end else
      if (View = 1) then
        begin
             Glcd_Write_Text(PassInputText, 12, row4 ,black);
        end;


      while (Chng1 = 0) do
        begin

           asm ClrWDT; end;

           if (Down_Button =0) then
             begin
                 while (Down_Button =0) do begin asm clrwdt; end; end;
                 Pass_Change_Counter := Pass_Change_Counter + 1;
                 if (Pass_Change_Counter > 6) then Pass_Change_Counter := 1;
             end else
           if (Up_Button =0) then
             begin
                 while (Up_Button =0) do begin asm clrwdt; end; end;
                 Pass_Change_Counter := Pass_Change_Counter - 1;
                 if (Pass_Change_Counter < 1) then Pass_Change_Counter := 6;
             end;

           case Pass_Change_Counter of
             1: begin  // þifrenin 4. karakteri

                    Glcd_Write_Char('X',48,row5,white);
                    Glcd_Write_Char('x',54,row5,Black);
                    Glcd_Write_Char('x',60,row5,Black);
                    Glcd_Write_Char('x',66,row5,Black);
                    
                    {if (LanguageBit = English) then
                      begin
                           Glcd_Write_Text(' Ok ',89,row6,black);
                           Glcd_Write_Text('Cancel',12,row6,black);
                      end else
                    if (LanguageBit = Turkish) then
                      begin
                           Glcd_Write_Text('Tamam',84,Row6,black);
                           Glcd_Write_Text('Ýptal',12,row6,black);
                      end;}

                    Glcd_Write_Text(SubTitle_Ok,84,Row6,black);
                    Glcd_Write_Text(SubTitle_Cancel,12,row6,black);

                    if (Ok_Button =0) then
                      begin
                           ChngA := 1;

                           while (Ok_Button =0) do begin asm clrwdt; end; end;
                           Pause_ms(100);

                           while (ChngA = 1) do
                             begin
                                  
                                  asm ClrWDT; end;
                                  
                                  if (Up_Button =0) then
                                    begin
                                        while (Up_Button =0) do begin asm clrwdt; end; end;
                                        inc(PasswordArray[1]);
                                        if (PasswordArray[1] > 9) then
                                            PasswordArray[1] := 0;
                                    end else
                                  if (Down_Button =0) then
                                    begin
                                        while (Down_Button =0) do begin asm clrwdt; end; end;
                                        dec(PasswordArray[1]);
                                        if (PasswordArray[1] < 0) then
                                            PasswordArray[1] := 9;
                                    end;

                                  ShortToStr(PasswordArray[1],TempText);
                                  ltrim(TempText);
                                  PassText := TempText;
                                  Glcd_Write_Text(PassText,48,row5,white);

                                  if (Ok_Button = 0) then
                                    begin
                                         Pause_ms(100);
                                         while (ok_Button =0) do begin asm clrwdt; end; end;
                                         ChngA := 0;
                                         Pause_ms(100);
                                    end;
                             end;
                      end;
                end;

             2: begin // þifrenin 3. karakteri

                    Glcd_Write_Char('x',48,row5,black);
                    Glcd_Write_Char('X',54,row5,white);
                    Glcd_Write_Char('x',60,row5,Black);
                    Glcd_Write_Char('x',66,row5,Black);
                     {
                    if (LanguageBit = English) then
                      begin
                           Glcd_Write_Text(' Ok ',89,row6,black);
                           Glcd_Write_Text('Cancel',12,row6,black);
                      end else
                    if (LanguageBit = Turkish) then
                      begin
                           Glcd_Write_Text('Tamam',84,Row6,black);
                           Glcd_Write_Text('Ýptal',12,row6,black);
                      end;
                    }
                    
                    Glcd_Write_Text(SubTitle_Ok,84,Row6,black);
                    Glcd_Write_Text(SubTitle_Cancel,12,row6,black);
                    
                    if (Ok_Button =0) then
                      begin
                           ChngB := 1;

                           while (Ok_Button =0) do begin asm clrwdt; end; end;
                           Pause_ms(100);

                           while (ChngB = 1) do
                             begin
                                  
                                  asm ClrWDT; end;
                                  
                                  if (Up_Button =0) then
                                    begin
                                        while (Up_Button =0) do begin asm clrwdt; end; end;
                                        inc(PasswordArray[2]);
                                        if (PasswordArray[2] > 9) then
                                            PasswordArray[2] := 0;
                                    end else
                                  if (Down_Button =0) then
                                    begin
                                        while (Down_Button =0) do begin asm clrwdt; end; end;
                                        dec(PasswordArray[2]);
                                        if (PasswordArray[2] < 0) then
                                            PasswordArray[2] := 9;
                                    end;

                                  ShortToStr(PasswordArray[2],TempText);
                                  ltrim(TempText);
                                  PassText := TempText;
                                  Glcd_Write_Text(PassText,54,row5,white);

                                  if (Ok_Button = 0) then
                                    begin
                                         Pause_ms(100);
                                         while (ok_Button =0) do begin asm clrwdt; end; end;
                                         ChngB := 0;
                                         Pause_ms(100);
                                    end;
                             end;
                      end;
                end;
             3: begin // þifrenin 2. karakteri

                    Glcd_Write_Char('x',48,row5,black);
                    Glcd_Write_Char('x',54,row5,Black);
                    Glcd_Write_Char('X',60,row5,white);
                    Glcd_Write_Char('x',66,row5,Black);

                    {if (LanguageBit = English) then
                      begin
                           Glcd_Write_Text(' Ok ',89,row6,black);
                           Glcd_Write_Text('Cancel',12,row6,black);
                      end else
                    if (LanguageBit = Turkish) then
                      begin
                           Glcd_Write_Text('Tamam',84,Row6,black);
                           Glcd_Write_Text('Ýptal',12,row6,black);
                      end;}
                      
                    Glcd_Write_Text(SubTitle_Ok,84,Row6,black);
                    Glcd_Write_Text(SubTitle_Cancel,12,row6,black);

                    if (Ok_Button =0) then
                      begin
                           ChngC := 1;

                           while (Ok_Button =0) do begin asm clrwdt; end; end;
                           Pause_ms(100);

                           while (ChngC = 1) do
                             begin
                                  
                                  asm ClrWDT; end;
                                  
                                  if (Up_Button =0) then
                                    begin
                                        while (Up_Button =0) do begin asm clrwdt; end; end;
                                        inc(PasswordArray[3]);
                                        if (PasswordArray[3] > 9) then
                                            PasswordArray[3] := 0;
                                    end else
                                  if (Down_Button =0) then
                                    begin
                                        while (Down_Button =0) do begin asm clrwdt; end; end;
                                        dec(PasswordArray[3]);
                                        if (PasswordArray[3] < 0) then
                                            PasswordArray[3] := 9;
                                    end;

                                  ShortToStr(PasswordArray[3],TempText);
                                  ltrim(TempText);
                                  PassText := TempText;
                                  Glcd_Write_Text(PassText,60,row5,white);

                                  if (Ok_Button = 0) then
                                    begin
                                         Pause_ms(100);
                                         while (ok_Button =0) do begin asm clrwdt; end; end;
                                         ChngC := 0;
                                         Pause_ms(100);
                                    end;


                             end;


                      end;



                end;
             4: begin  // þifrenin 1. karakteri

                    Glcd_Write_Char('x',48,row5,black);
                    Glcd_Write_Char('x',54,row5,Black);
                    Glcd_Write_Char('x',60,row5,Black);
                    Glcd_Write_Char('X',66,row5,white);

                    {if (LanguageBit = English) then
                      begin
                           Glcd_Write_Text(' Ok ',89,row6,black);
                           Glcd_Write_Text('Cancel',12,row6,black);
                      end else
                    if (LanguageBit = Turkish) then
                      begin
                           Glcd_Write_Text('Tamam',84,Row6,black);
                           Glcd_Write_Text('Ýptal',12,row6,black);
                      end;}

                    
                    Glcd_Write_Text(SubTitle_Ok,84,Row6,black);
                    Glcd_Write_Text(SubTitle_Cancel,12,row6,black);
                    
                    if (Ok_Button =0) then
                      begin
                           ChngD := 1;

                           while (Ok_Button =0) do begin asm clrwdt; end; end;
                           Pause_ms(100);

                           while (ChngD = 1) do
                             begin
                                  
                                  asm ClrWDT; end;
                                  
                                  if (Up_Button =0) then
                                    begin
                                        while (Up_Button =0) do begin asm clrwdt; end; end;
                                        inc(PasswordArray[4]);
                                        if (PasswordArray[4] > 9) then
                                            PasswordArray[4] := 0;
                                    end else
                                  if (Down_Button =0) then
                                    begin
                                        while (Down_Button =0) do begin asm clrwdt; end; end;
                                        dec(PasswordArray[4]);
                                        if (PasswordArray[4] < 0) then
                                            PasswordArray[4] := 9;
                                    end;

                                  ShortToStr(PasswordArray[4],TempText);
                                  ltrim(TempText);
                                  PassText := TempText;
                                  Glcd_Write_Text(PassText,66,row5,white);

                                  if (Ok_Button = 0) then
                                    begin
                                         Pause_ms(100);
                                         while (ok_Button =0) do begin asm clrwdt; end; end;
                                         ChngD := 0;
                                         Pause_ms(100);
                                    end;


                             end;


                      end;
                 end;
             5: begin  //  ok

                    Glcd_Write_Char('x',48,row5,black);
                    Glcd_Write_Char('x',54,row5,Black);
                    Glcd_Write_Char('x',60,row5,Black);
                    Glcd_Write_Char('x',66,row5,Black);

                    {if (LanguageBit = English) then
                      begin
                           Glcd_Write_Text(' Ok ',89,row6,white);
                           Glcd_Write_Text('Cancel',12,row6,black);
                      end else
                    if (LanguageBit = Turkish) then
                      begin
                           Glcd_Write_Text('Tamam',84,Row6,white);
                           Glcd_Write_Text('Ýptal',12,row6,black);
                      end;}
                      
                      
                    Glcd_Write_Text(SubTitle_Ok,84,Row6,white);
                    Glcd_Write_Text(SubTitle_Cancel,12,row6,black);

                    if (View = 0) then
                      begin
                          if (Ok_Button =0) then
                            begin
                                 while (Ok_Button =0) do begin asm clrwdt; end; end;
                                 Pause_ms(100);
                                 PasswordHam        := PasswordArray[1] * 1000;
                                 Temp_Word          := PasswordArray[2] * 100;
                                 PasswordHam        := PasswordHam + Temp_Word;
                                 Temp_Word          := PasswordArray[3] * 10;
                                 PasswordHam        := PasswordHam + Temp_Word;
                                 PasswordHam        := PasswordHam + PasswordArray[4];

                                 EEPROM_Write(EE_PasswordEeAddr, PasswordHam);
                                 while (WR_bit) do begin end; // write/erase cycle waiting
                                 Pause_ms(100);
                                 asm clrwdt; end;





                                 Chng1 := 1;



                            end;
                       end else
                     if (View = 1) then
                       begin
                           if (Ok_Button =0) then
                              begin

                                   while (Ok_Button =0) do begin asm clrwdt; end; end;
                                   Pause_ms(100);

                                   PasswordHam        := PasswordArray[1] * 1000;
                                   Temp_Word          := PasswordArray[2] * 100;
                                   PasswordHam        := PasswordHam + Temp_Word;
                                   Temp_Word          := PasswordArray[3] * 10;
                                   PasswordHam        := PasswordHam + Temp_Word;
                                   PasswordHam        := PasswordHam + PasswordArray[4];

                                   if ((PasswordHam = User_Password)or(PasswordHam = Gemta_Password)) then
                                     begin
                                         Password_Correct := 1; // doðru
                                         
                                         {if (LanguageBit = English) then
                                             Glcd_Write_Text(' Correct Password ',12,row7,Black) else
                                         if (LanguageBit = Turkish) then
                                             Glcd_Write_Text('Þifre Kabul Edildi',12,row7,Black);
                                         }
                                         Glcd_Write_Text(SubTitle_PassOk,0,row8,Black);
                                         
                                         Pause_ms(500);
                                         Chng1 := 1;
                                         MenuExit    := 0x00;  // menüye gir
                                     end else
                                   if ((PasswordHam <> User_Password)or(PasswordHam <> Gemta_Password)) then
                                     begin
                                         Password_Correct := 0; // hatalý
                                         {if (LanguageBit = English) then
                                             Glcd_Write_Text('! Wrong Password !',12,row7,Black) else
                                         if (LanguageBit = Turkish) then
                                             Glcd_Write_Text(' ! Yanlýþ Þifre ! ',12,row7,Black);
                                         }
                                         
                                         Glcd_Write_Text(SubTitle_PassFlt,0,row8,Black);
                                         Pause_ms(500);
                                         Chng1 := 1;
                                         MenuExit    := 0xFF;  // menüden çýk
                                     end;

                              end;
                       end;

                 end;

              6: begin  // geri
                    Glcd_Write_Char('x',48,row5,black);
                    Glcd_Write_Char('x',54,row5,Black);
                    Glcd_Write_Char('x',60,row5,Black);
                    Glcd_Write_Char('x',66,row5,Black);
                    
                    {
                    if (LanguageBit = English) then
                      begin
                           Glcd_Write_Text(' Ok ',89,row6,black);
                           Glcd_Write_Text('Cancel',12,row6,white);
                      end else
                    if (LanguageBit = Turkish) then
                      begin
                           Glcd_Write_Text('Tamam',84,Row6,black);
                           Glcd_Write_Text('Ýptal',12,row6,white);
                      end;  }

                      Glcd_Write_Text(SubTitle_Ok,84,Row6,black);
                      Glcd_Write_Text(SubTitle_Cancel,12,row6,white);

                      if (Ok_Button =0) then
                        begin


                           while (Ok_Button =0) do begin asm clrwdt; end; end;

                           Pause_ms(100);

                           Chng1 := 1;
                           if View = 1 then MenuExit := 0xFF;

                        end;

                 end;

           end;

        end;
 end;
//******************************************************************************
Procedure Password_Settings;
var EntryCounter : byte;
 begin

      MenuExit        := 0;
      MenuSayacValue  := 1;
      Chng[11]        := 2;
      Chng[9]         := 1;
      EntryCounter    := 1;
      
      Confirm_AcMenuBit       := EEPROM_Read(EE_ConfirmAcMenuEeAddr);
      Confirm_BattMenuBit     := EEPROM_Read(EE_ConfirmBattMenuEeAddr);
      Confirm_ClockMenuBit    := EEPROM_Read(EE_ConfirmClockMenuEeAddr);
      Confirm_DcMenuBit       := EEPROM_Read(EE_ConfirmDcMenuEeAddr);
      //Confirm_LanguMenuBit    := EEPROM_Read(EE_ConfirmLanguMenuEeAddr);
      Confirm_LeakaMenuBit    := EEPROM_Read(EE_ConfirmLeakMenuEeAddr);
      Confirm_ModbusMenuBit   := EEPROM_Read(EE_ConfirmModbusMenuEeAddr);
      Confirm_OperaMenuBit    := EEPROM_Read(EE_ConfirmOperaMenuEeAddr);
      Confirm_TempeMenuBit    := EEPROM_Read(EE_ConfirmTempMenuEeAddr);
      User_Password           := EEPROM_Read(EE_PasswordEeAddr);

      Password_Entry_Screen(1);
      Glcd_Fill(0x00);
      
      While (MenuExit =0) do
       begin
       
            
            MenuSayac := MenuButtonRead(10,255); // 10 satýr menu var
            Chng[9]   := 1;
            
            asm ClrWDT; end;
            
            if (MenuSayac < 8) then
              begin
                   if (Chng[11] =2) then
                     begin
                         Chng[11] := 1;
                        // if (LanguageBit = English) then Glcd_Image(@PasswordSet_Page1_En) else
                         //if (LanguageBit = Turkish) then Glcd_Image(@PasswordSet_Page1_Tr);
                         
//                         Glcd_Image(@PasswordSet_Page1_Tr);

                         Glcd_Fill(0x00);

                         //1. sayfa
                         Glcd_Write_Text(Title_AuthMenu1     , 0, Row1, Black);
                         Glcd_Write_Text(SubTitle_PswChng    , 6, Row2, Black);
                         Glcd_Write_Text(SubTitle_PswAcset   , 6, Row3, Black);
                         Glcd_Write_Text(SubTitle_PswDcset   , 6, Row4, Black);
                         Glcd_Write_Text(SubTitle_Pswbatset  , 6, Row5, Black);
                         Glcd_Write_Text(SubTitle_Pswopmod   , 6, Row6, Black);
                         Glcd_Write_Text(SubTitle_Pswleak    , 6, Row7, Black);
                         Glcd_Write_Text(SubTitle_Pswtemp    , 6, Row8, Black);
                         
                         

                         
                         
                         if (Confirm_AcMenuBit = 1)    then Glcd_Write_Char('+', 114, Row3,Black) else Glcd_Write_Char('x', 114, Row3,Black);
                         if (Confirm_DcMenuBit = 1)    then Glcd_Write_Char('+', 114, Row4,Black) else Glcd_Write_Char('x', 114, Row4,Black);
                         if (Confirm_BattMenuBit = 1)  then Glcd_Write_Char('+', 114, Row5,Black) else Glcd_Write_Char('x', 114, Row5,Black);
                         if (Confirm_OperaMenuBit = 1) then Glcd_Write_Char('+', 114, Row6,Black) else Glcd_Write_Char('x', 114, Row6,Black);
                         if (Confirm_LeakaMenuBit = 1) then Glcd_Write_Char('+', 114, Row7,Black) else Glcd_Write_Char('x', 114, Row7,Black);
                         if (Confirm_TempeMenuBit = 1) then Glcd_Write_Char('+', 114, Row8,Black) else Glcd_Write_Char('x', 114, Row8,Black);

                     end;


              end else
            if (MenuSayac >= 8) then
              begin
                   if (Chng[11] =1) then
                     begin
                         Chng[11] := 2;
                        // if (LanguageBit = English) then Glcd_Image(@PasswordSet_Page2_En) else
                         //if (LanguageBit = Turkish) then Glcd_Image(@PasswordSet_Page2_Tr);


//                         Glcd_Image(@PasswordSet_Page2_Tr);

                         Glcd_Fill(0x00);

                         //2. sayfa
                         Glcd_Write_Text(Title_AuthMenu2     , 0, Row1, Black);
                         Glcd_Write_Text(SubTitle_Pswclock   , 6, Row2, Black);
                         Glcd_Write_Text(SubTitle_Pswmodbus  , 6, Row3, Black);
                         Glcd_Write_Text(SubTitle_Back       , 6, Row4, Black);
                         
                         if (Confirm_ClockMenuBit = 1) then Glcd_Write_Char('+', 114, Row2,Black) else Glcd_Write_Char('x', 114, Row2,Black);
                         if (Confirm_ModbusMenuBit = 1) then Glcd_Write_Char('+', 114, Row3,Black) else Glcd_Write_Char('x', 114, Row3,Black);

                     end;
              
              end;
       
            case (MenuSayac) of
             1: begin // þifre deðiþtirme
                      if (Ok_Button =0) then
                        begin
                            while (Ok_Button =0) do
                              begin
                                   asm ClrWDT; end;
                              end;
                              

                            Password_Entry_Screen(0);
                            Chng[11] := 2; // ekraný yeniden yükle
                            
                        end;
                end;

             2: begin
             

             
                 if (Ok_Button =0) then
                   begin
                         while (Ok_Button =0) do
                          begin
                              asm ClrWDT; end;
                          end;


                       Chng[1] := 1;

                       While (Chng[1] =1) do
                        begin
                            asm ClrWDT; end;

                            if ((Up_Button =0)or(Down_Button =0)) then
                              begin
                                  while ((Up_Button =0)or(Down_Button=0)) do
                                   begin
                                        asm ClrWDT; end;
                                   end;

                                   Confirm_AcMenuBit := not Confirm_AcMenuBit;

                              end;

                            if (Confirm_AcMenuBit = 1) then Glcd_Write_Char('+', 114, Row3, White) else Glcd_Write_Char('x', 114, Row3, White);

                            if (Ok_Button =0) then
                              begin
                                  while (Ok_Button =0) do
                                    begin
                                        asm ClrWDT; end;
                                    end;

                                  EEPROM_Write(EE_ConfirmAcMenuEeAddr, Confirm_AcMenuBit);
                                  while(WR_bit) do begin end;
                                  Chng[1] := 0;
                                  if (Confirm_AcMenuBit = 1) then Glcd_Write_Char('+', 114, Row3, Black) else Glcd_Write_Char('x', 114, Row3, Black);

                              end;



                        end;
                    end;
                end;
            
            
             3: begin // dc set menu

                 if (Ok_Button =0) then
                   begin
                         while (Ok_Button =0) do
                          begin
                              asm ClrWDT; end;
                          end;


                       Chng[2] := 1;

                       While (Chng[2] =1) do
                        begin
                            asm ClrWDT; end;

                            if ((Up_Button =0)or(Down_Button =0)) then
                              begin
                                  while ((Up_Button =0)or(Down_Button=0)) do
                                   begin
                                        asm ClrWDT; end;
                                   end;

                                   Confirm_DcMenuBit := not Confirm_DcMenuBit;

                              end;

                            if (Confirm_DcMenuBit = 1) then Glcd_Write_Char('+', 114, Row4, White) else Glcd_Write_Char('x', 114, Row4, White);

                            if (Ok_Button =0) then
                              begin
                                  while (Ok_Button =0) do
                                    begin
                                        asm ClrWDT; end;
                                    end;

                                  EEPROM_Write(EE_ConfirmDcMenuEeAddr, Confirm_DcMenuBit);
                                  while(WR_bit) do begin end;
                                  Chng[2] := 0;
                                  if (Confirm_DcMenuBit = 1) then Glcd_Write_Char('+', 114, Row4, Black) else Glcd_Write_Char('x', 114, Row4, Black);

                              end;



                        end;
                    end;
                end;
            
             4: begin // akü set menu

                 if (Ok_Button =0) then
                   begin
                         while (Ok_Button =0) do
                          begin
                              asm ClrWDT; end;
                          end;


                       Chng[3] := 1;

                       While (Chng[3] =1) do
                        begin
                            asm ClrWDT; end;

                            if ((Up_Button =0)or(Down_Button =0)) then
                              begin
                                  while ((Up_Button =0)or(Down_Button=0)) do
                                   begin
                                        asm ClrWDT; end;
                                   end;

                                   Confirm_BattMenuBit := not Confirm_BattMenuBit;

                              end;

                            if (Confirm_BattMenuBit = 1) then Glcd_Write_Char('+', 114, Row5, White) else Glcd_Write_Char('x', 114, Row5, White);

                            if (Ok_Button =0) then
                              begin
                                  while (Ok_Button =0) do
                                    begin
                                        asm ClrWDT; end;
                                    end;

                                  EEPROM_Write(EE_ConfirmBattMenuEeAddr, Confirm_BattMenuBit);
                                  while(WR_bit) do begin end;
                                  Chng[3] := 0;
                                  if (Confirm_BattMenuBit = 1) then Glcd_Write_Char('+', 114, Row5, Black) else Glcd_Write_Char('x', 114, Row5, Black);

                              end;



                        end;
                    end;
                end;
            
             5: begin // çalýþma modu menu

                 if (Ok_Button =0) then
                   begin
                         while (Ok_Button =0) do
                          begin
                              asm ClrWDT; end;
                          end;


                       Chng[4] := 1;

                       While (Chng[4] =1) do
                        begin
                            asm ClrWDT; end;

                            if ((Up_Button =0)or(Down_Button =0)) then
                              begin
                                  while ((Up_Button =0)or(Down_Button=0)) do
                                   begin
                                        asm ClrWDT; end;
                                   end;

                                   Confirm_OperaMenuBit := not Confirm_OperaMenuBit;

                              end;

                            if (Confirm_OperaMenuBit = 1) then Glcd_Write_Char('+', 114, Row6, White) else Glcd_Write_Char('x', 114, Row6, White);

                            if (Ok_Button =0) then
                              begin
                                  while (Ok_Button =0) do
                                    begin
                                        asm ClrWDT; end;
                                    end;

                                  EEPROM_Write(EE_ConfirmOperaMenuEeAddr, Confirm_OperaMenuBit);
                                  while(WR_bit) do begin end;
                                  Chng[4] := 0;
                                  if (Confirm_OperaMenuBit = 1) then Glcd_Write_Char('+', 114, Row6, Black) else Glcd_Write_Char('x', 114, Row6, Black);

                              end;



                        end;
                    end;
                end;
            
             6: begin // çalýþma modu menu

                 if (Ok_Button =0) then
                   begin
                         while (Ok_Button =0) do
                          begin
                              asm ClrWDT; end;
                          end;


                       Chng[5] := 1;

                       While (Chng[5] =1) do
                        begin
                            asm ClrWDT; end;

                            if ((Up_Button =0)or(Down_Button =0)) then
                              begin
                                  while ((Up_Button =0)or(Down_Button=0)) do
                                   begin
                                        asm ClrWDT; end;
                                   end;

                                   Confirm_LeakaMenuBit := not Confirm_LeakaMenuBit;

                              end;

                            if (Confirm_LeakaMenuBit = 1) then Glcd_Write_Char('+', 114, Row7, White) else Glcd_Write_Char('x', 114, Row7, White);

                            if (Ok_Button =0) then
                              begin
                                  while (Ok_Button =0) do
                                    begin
                                        asm ClrWDT; end;
                                    end;

                                  EEPROM_Write(EE_ConfirmLeakMenuEeAddr, Confirm_LeakaMenuBit);
                                  while(WR_bit) do begin end;
                                  Chng[5] := 0;
                                  if (Confirm_LeakaMenuBit = 1) then Glcd_Write_Char('+', 114, Row7, Black) else Glcd_Write_Char('x', 114, Row7, Black);

                              end;



                        end;
                    end;
                end;
            
             7: begin // sýcaklýk menu

                 if (Ok_Button =0) then
                   begin
                         while (Ok_Button =0) do
                          begin
                              asm ClrWDT; end;
                          end;


                       Chng[6] := 1;

                       While (Chng[6] =1) do
                        begin
                            asm ClrWDT; end;

                            if ((Up_Button =0)or(Down_Button =0)) then
                              begin
                                  while ((Up_Button =0)or(Down_Button=0)) do
                                   begin
                                        asm ClrWDT; end;
                                   end;

                                   Confirm_TempeMenuBit := not Confirm_TempeMenuBit;

                              end;

                            if (Confirm_TempeMenuBit = 1) then Glcd_Write_Char('+', 114, Row8, White) else Glcd_Write_Char('x', 114, Row8, White);

                            if (Ok_Button =0) then
                              begin
                                  while (Ok_Button =0) do
                                    begin
                                        asm ClrWDT; end;
                                    end;

                                  EEPROM_Write(EE_ConfirmTempMenuEeAddr, Confirm_TempeMenuBit);
                                  while(WR_bit) do begin end;
                                  Chng[6] := 0;
                                  if (Confirm_TempeMenuBit = 1) then Glcd_Write_Char('+', 114, Row8, Black) else Glcd_Write_Char('x', 114, Row8, Black);

                              end;



                        end;
                    end;
                end;
            
             8: begin // saat menu

                 if (Ok_Button =0) then
                   begin
                         while (Ok_Button =0) do
                          begin
                              asm ClrWDT; end;
                          end;


                       Chng[7] := 1;

                       While (Chng[7] =1) do
                        begin
                            asm ClrWDT; end;

                            if ((Up_Button =0)or(Down_Button =0)) then
                              begin
                                  while ((Up_Button =0)or(Down_Button=0)) do
                                   begin
                                        asm ClrWDT; end;
                                   end;

                                   Confirm_ClockMenuBit := not Confirm_ClockMenuBit;

                              end;

                            if (Confirm_ClockMenuBit = 1) then Glcd_Write_Char('+', 114, Row2, White) else Glcd_Write_Char('x', 114, Row2, White);

                            if (Ok_Button =0) then
                              begin
                                  while (Ok_Button =0) do
                                    begin
                                        asm ClrWDT; end;
                                    end;

                                  EEPROM_Write(EE_ConfirmClockMenuEeAddr, Confirm_ClockMenuBit);
                                  while(WR_bit) do begin end;
                                  Chng[7] := 0;
                                  if (Confirm_ClockMenuBit = 1) then Glcd_Write_Char('+', 114, Row2, Black) else Glcd_Write_Char('x', 114, Row2, Black);

                              end;



                        end;
                    end;
                end;
            
             9: begin // modbus menu

                 if (Ok_Button =0) then
                   begin
                         while (Ok_Button =0) do
                          begin
                              asm ClrWDT; end;
                          end;


                       Chng[8] := 1;

                       While (Chng[8] =1) do
                        begin
                            asm ClrWDT; end;

                            if ((Up_Button =0)or(Down_Button =0)) then
                              begin
                                  while ((Up_Button =0)or(Down_Button=0)) do
                                   begin
                                        asm ClrWDT; end;
                                   end;

                                   Confirm_ModbusMenuBit := not Confirm_ModbusMenuBit;

                              end;

                            if (Confirm_ModbusMenuBit = 1) then Glcd_Write_Char('+', 114, Row3, White) else Glcd_Write_Char('x', 114, Row3, White);

                            if (Ok_Button =0) then
                              begin
                                  while (Ok_Button =0) do
                                    begin
                                        asm ClrWDT; end;
                                    end;

                                  EEPROM_Write(EE_ConfirmModbusMenuEeAddr, Confirm_ModbusMenuBit);
                                  while(WR_bit) do begin end;
                                  Chng[8] := 0;
                                  if (Confirm_ModbusMenuBit = 1) then Glcd_Write_Char('+', 114, Row3, Black) else Glcd_Write_Char('x', 114, Row3, Black);

                              end;



                        end;
                    end;
                end;
            
            10: begin // geri

                    if (Ok_Button =0) then
                      begin
                        while (Ok_Button =0) do
                          begin
                              asm ClrWDT; end;
                          end;
                        MenuExit := 1;

                      end;



                 end;
            
            
            end; // case MenuSayac end
       
       
       end;
       
      Glcd_Fill(0x00);
      MenuSayacValue := 10;
 
 end;
//******************************************************************************

Procedure MainMenu;
var MainMenuCounter : byte;
    i               : byte;
    TitleText       : string[20];
 begin

      MainMenuCounter := 1;
      Glcd_Fill(0x00);

      MainMenuExit        := 0x00;
      MenuSayacValue      := 1;
      i                   := 2;
      
      Glcd_Set_Font(@NewFont5x7, 5, 7, 32);     // Change font

      While (MainMenuExit = 0x00) do
       begin
            //MenuSayac := MenuButtonRead(11,0); // menu için butonlarý oku 10 satýr menü var
            
            asm ClrWDT; end;
            
            if (Down_Button =0) then
              begin
                   while (Down_Button =0) do
                     begin
                         asm ClrWDT; end;
                     end;
                   //Glcd_Fill(0x00);
                   
                   Glcd_Write_Char(' ', 0, MainMenuCounter, Black);
                   Glcd_Write_Char(' ', 0, (MainMenuCounter-7), Black);
                   
                   Inc(MainMenuCounter);
                   if (MainMenuCounter > 13) then MainMenuCounter := 1;
              end else
            if (Up_Button =0) then
              begin
                   while (Up_Button =0) do
                     begin
                         asm ClrWDT; end;
                     end;
                   //Glcd_Fill(0x00);
                   
                   Glcd_Write_Char(' ', 0, MainMenuCounter, Black);
                   Glcd_Write_Char(' ', 0, (MainMenuCounter-7), Black);
                   
                   Dec(MainMenuCounter);
                   if (MainMenuCounter < 1) then MainMenuCounter := 13;
              end;
            

            
              
            if (MainMenuCounter < 8) then
              begin

                   Glcd_Write_Char('>', 0, MainMenuCounter, Black);

                   if (i = 2) then // resmi sürekli basma
                     begin
                         
                         Glcd_Fill(0x00);
                         
                         //Glcd_Image(@MainList_tr1);
                         Glcd_Write_Text('     ..MENU..     1-2',      0,  Row1, Black);
                         
                         TitleText := Title_AcMenu;
                         ltrim(TitleText);
                         Glcd_Write_Text(TitleText,                 6,  Row2, Black);  // 1
                         
                         TitleText := Title_DcMenu;
                         ltrim(TitleText);
                         Glcd_Write_Text(TitleText,                 6,  Row3, Black);  // 2
                         
                         TitleText := Title_DroppMenu;
                         ltrim(TitleText);
                         Glcd_Write_Text(TitleText,                 6,  Row4, Black);  // 3
                         
                         TitleText := Title_BattMenu;
                         ltrim(TitleText);
                         Glcd_Write_Text(TitleText,                 6,  Row5, Black);  // 4
                         
                         TitleText := Title_BattServMenu;
                         ltrim(TitleText);
                         Glcd_Write_Text(TitleText,                 6,  Row6, Black);  // 5
                         
                         TitleText := Title_LeakMenu;
                         ltrim(TitleText);
                         Glcd_Write_Text(TitleText,                 6,  Row7, Black);  // 6
                         
                         TitleText := Title_TempMenu;
                         ltrim(TitleText);
                         Glcd_Write_Text(TitleText,                 6,  Row8, Black);  // 7


                         
                         i := 3;
                     end;

              end else
            if (MainMenuCounter >= 8) then
              begin
                   
                   Glcd_Write_Char('>', 0, (MainMenuCounter-7), Black);
                   
                   if (i = 3) then // resmi sürekli basma
                     begin
//                         Glcd_Image(@MainList_tr2);
                         
                         Glcd_Fill(0x00);
                         
                         Glcd_Write_Text('     ..MENU..     2-2',      0,  Row1, Black);
                         
                         TitleText := Title_ClockMenu;
                         ltrim(TitleText);
                         Glcd_Write_Text(TitleText,                 6,  Row2, Black);  // 8
                         
                         TitleText := Title_ModbusMenu;
                         ltrim(TitleText);
                         Glcd_Write_Text(TitleText,                 6,  Row3, Black);  // 9
                         
                         TitleText := Title_LangMenu;
                         ltrim(TitleText);
                         Glcd_Write_Text(TitleText,                 6,  Row4, Black);  // 10
                         
                         TitleText := Title_Event;
                         ltrim(TitleText);
                         Glcd_Write_Text(TitleText,                 6,  Row5, Black);  // 11
                         
                         TitleText := Title_AuthMenu;
                         ltrim(TitleText);
                         Glcd_Write_Text(TitleText,                 6,  Row6, Black);  // 12
                         
                         TitleText := SubTitle_Back;
                         ltrim(TitleText);
                         Glcd_Write_Text(TitleText,                 6,  Row7, Black);  // 13
                         
                         i := 2;
                     end;
              end;
              

            Case (MainMenuCounter) of
             1: begin  // ac sett

                     if (Ok_Button =0) then
                         begin
                             while (Ok_Button =0) do
                               begin
                                   asm ClrWDT; end;
                               end;

                             if (Confirm_AcMenuBit = 1) then
                               begin
                                 AC_Settings;
                                 MainMenuExit := 0x00;
                                 i            := 2;
                               end else
                               begin
                                   Glcd_Image(@notauthority);
                                   

                                   
                                   Pause_ms(600);
                                   asm ClrWDT; end;
                                   Pause_ms(600);
                                   MainMenuExit := 0;


                                   MainMenuExit := 0x00;
                                   Glcd_Fill(0x00);
                                   i := 2;
                               end;
                         end;

                end;

             2: begin  // dc sett

                     if (Ok_Button =0) then
                         begin
                             while (Ok_Button =0) do
                               begin
                                   asm ClrWDT; end;
                               end;

                               if (Confirm_DcMenuBit = 1) then
                               begin
                                 DC_Settings;
                                 MainMenuExit := 0x00;
                                 i := 2;
                               end else
                               begin

                                   Glcd_Image(@notauthority);
                                   Pause_ms(600);
                                   asm ClrWDT; end;
                                   Pause_ms(600);
                                   MainMenuExit := 0;

                                   MainMenuExit := 0x00;
                                   Glcd_Fill(0x00);
                                   i := 2;
                               end;

                         end;

                end;

             3: begin //  dropper sett

                     if (Ok_Button =0) then
                         begin
                             while (Ok_Button =0) do
                               begin
                                   asm ClrWDT; end;
                               end;

                               if (Confirm_OperaMenuBit = 1) then
                               begin
                                 Dropper_Module;
                                 MainMenuExit := 0x00;
                                 i := 2;
                               end else
                               begin

                                   Glcd_Image(@notauthority);
                                   Pause_ms(600);
                                   asm ClrWDT; end;
                                   Pause_ms(600);
                                   MainMenuExit := 0;

                                   MainMenuExit := 0x00;
                                   Glcd_Fill(0x00);
                                   i := 2;
                               end;

                         end;

                end;

             4: begin // battery set

                       if (Ok_Button =0) then
                         begin
                             while (Ok_Button =0) do
                               begin
                                   asm ClrWDT; end;
                               end;

                               if (Confirm_BattMenuBit = 1) then
                               begin
                                 Battery_Settings;
                                 MainMenuExit := 0x00;
                                 i := 2;
                               end else
                               begin

                                   Glcd_Image(@notauthority);
                                   Pause_ms(600);
                                   asm ClrWDT; end;
                                   Pause_ms(600);
                                   MainMenuExit := 0;

                                   MainMenuExit := 0x00;
                                   Glcd_Fill(0x00);
                                   i := 2;
                               end;

                         end;

                end;
             

             5: begin // battery maintenance

                      asm ClrWDT; end;
                      
                      if (Ok_Button =0) then
                        begin
                            while (Ok_Button =0) do
                             begin
                                 asm clrwdt; end;
                             end;
                        
                            AkuTestBakim();
                            MainMenuExit := 0x00;
                            i := 2;
                        
                        end;


                end;

             6: begin // kaçak

                     if (Ok_Button =0) then
                         begin
                             while (Ok_Button =0) do
                               begin
                                   asm ClrWDT; end;
                               end;

                               if (Confirm_LeakaMenuBit = 1) then
                               begin
                                 Leakage_Settings;
                                 MainMenuExit := 0x00;
                                 i := 2;
                               end else
                               begin

                                   Glcd_Image(@notauthority);
                                   Pause_ms(600);
                                   asm ClrWDT; end;
                                   Pause_ms(600);
                                   MainMenuExit := 0;

                                   MainMenuExit := 0x00;
                                   Glcd_Fill(0x00);
                                   i := 2;
                               end;

                         end;


                 end;


             7: begin //  temperature set

                     if (Ok_Button =0) then
                         begin
                             while (Ok_Button =0) do
                               begin
                                   asm ClrWDT; end;
                               end;

                               if (Confirm_TempeMenuBit = 1) then
                               begin
                                 Temperature_Settings;
                                 MainMenuExit := 0x00;
                                 i := 2;
                               end else
                               begin

                                   Glcd_Image(@notauthority);
                                   Pause_ms(600);
                                   asm ClrWDT; end;
                                   Pause_ms(600);
                                   MainMenuExit := 0;

                                   MainMenuExit := 0x00;
                                   Glcd_Fill(0x00);
                                   i := 2;
                               end;

                         end;

                end;

             8: begin // date-clock sett

                     if (Ok_Button =0) then
                         begin
                             while (Ok_Button =0) do
                               begin
                                   asm ClrWDT; end;
                               end;

                               if (Confirm_ClockMenuBit = 1) then
                               begin
                                 Clock_Settings;
                                 MainMenuExit := 0x00;
                                 i := 3;
                               end else
                               begin

                                   Glcd_Image(@notauthority);
                                   Pause_ms(600);
                                   asm ClrWDT; end;
                                   Pause_ms(600);
                                   MainMenuExit := 0;

                                   MainMenuExit := 0x00;
                                   Glcd_Fill(0x00);
                                   i := 3;
                               end;

                         end;

                end;

             9: begin // modbus sett

                     if (Ok_Button =0) then
                         begin
                             while (Ok_Button =0) do
                               begin
                                   asm ClrWDT; end;
                               end;

                               if (Confirm_ModbusMenuBit = 1) then
                               begin
                                 Modbus_Settings;
                                 MainMenuExit := 0x00;
                                 i := 3;
                               end else
                               begin

                                   Glcd_Image(@notauthority);
                                   Pause_ms(600);
                                   asm ClrWDT; end;
                                   Pause_ms(600);
                                   MainMenuExit := 0;

                                   MainMenuExit := 0x00;
                                   Glcd_Fill(0x00);
                                   i := 3;
                               end;

                         end;

                end;

             10: begin  // hakkýnda

                    if (Ok_Button =0) then
                         begin
                             while (Ok_Button =0) do
                               begin
                                   asm ClrWDT; end;
                               end;

                               Language_Settings();
                               
                               MainMenuExit := 0x00;
                               i := 3;

                         end;

                 end;

            11: begin  // log

                     if (Ok_Button =0) then
                         begin
                             while (Ok_Button =0) do
                               begin
                                   asm ClrWDT; end;
                               end;

                               Log_Settings;
                               MainMenuExit := 0x00;
                               i := 3;
                         end;

                 end;

             12: begin  // password set

                     if (Ok_Button =0) then
                         begin
                             while (Ok_Button =0) do
                               begin
                                   asm ClrWDT; end;
                               end;

                               Password_Settings;
                               MainMenuExit := 0x00;
                               i := 3;
                         end;
                 end;



             13: begin  // geri

                    if (Ok_Button =0) then
                      begin
                        while (Ok_Button =0) do
                          begin
                              asm ClrWDT; end;
                          end;
                        MainMenuExit := 1;

                      end;
                 end;
            end;
      
      
       end;

 end;
//******************************************************************************
Procedure Data_EepromRead;
const Pause = 25;
  begin

      HucreSayisi         := EEPROM_Read(EE_HucreSayisiEeAddr);
      Pause_ms(Pause);
      NomHucreGerilim     := EEPROM_Read(EE_NomHucreGerilimEeAddr);
      Pause_ms(Pause);
      F_ChargePercentLo   := EEPROM_Read(EE_F_ChargePercentLoEeAddr);
      Pause_ms(Pause);
      F_ChargePercentHi   := EEPROM_Read(EE_F_ChargePercentHiEeAddr);
      Pause_ms(Pause);
      B_ChargePercentLo   := EEPROM_Read(EE_B_ChargePercentLoEeAddr);
      Pause_ms(Pause);
      
      NominalGerilim := ((NomHucreGerilim * HucreSayisi) div 10);
      
      asm ClrWDT; end;
      
      B_ChargePercentHi   := EEPROM_Read(EE_B_ChargePercentHiEeAddr);
      Pause_ms(Pause);
      RedresorAkim        := EEPROM_Read(EE_RedresorAkimEeAddr);
      Pause_ms(Pause);
      LanguageBit         := EEPROM_Read(EE_LanguageBitEeAddr);
      
      Pause_ms(Pause);
      
      asm ClrWDT; end;
      
      Dropper_OutStatus   := EEPROM_Read(EE_DropperOutStatusEeAddr);
      Pause_ms(Pause);
      OperationMode       := EEPROM_Read(EE_OperationModeEeAddr);
      Pause_ms(Pause);
      MasterSlave         := EEPROM_Read(EE_MasterSlaveEeAddr);
      Pause_ms(Pause);
      
      asm ClrWDT; end;
      
      ACMaxVoltSet        := EEPROM_Read(EE_ACMaxVoltSetEeAddr);
      Pause_ms(Pause);
      ACMinVoltSet        := EEPROM_Read(EE_ACMinVoltSetEeAddr);
      Pause_ms(Pause);
      //ACSetResponseTime   := EEPROM_Read(EE_ACSetResponseTimeEeAddr);
      //Pause_ms(Pause);
      Leakage_Pos_Set     := EEPROM_Read(EE_LeakagePosEeAddr);
      Pause_ms(Pause);
      Leakage_Neg_Set     := EEPROM_Read(EE_LeakageNegEeAddr);
      Pause_ms(Pause);
      ModbusID            := EEPROM_Read(EE_ModbusIDEeAddr);
      Modbus_Adress       := ModbusID;
      Pause_ms(Pause);
      ModbusBaudRate      := EEPROM_Read(EE_ModbusBaudRate);
      
      Pause_ms(Pause);
      asm ClrWDT; end;
      
      {TempSetResponseTime := EEPROM_Read(EE_TempSetResponseTimeEeAddr);
      Pause_ms(Pause);}
      TempFanOffSet       := EEPROM_Read(EE_TempFanOffSetEeAddr);
      Pause_ms(Pause);
      TempFanOnSet        := EEPROM_Read(EE_TempFanOnSetEeAddr);
      Pause_ms(Pause);
      
      asm ClrWDT; end;
      
      TempAlarmSet        := EEPROM_Read(EE_TempAlarmSetEeAddr);
      Pause_ms(Pause);
      ChargeMode          := EEPROM_Read(EE_ChargeModeEeAddr);
      Pause_ms(Pause);
      DCOutVoltSet        := EEPROM_Read(EE_DCOutVoltSetEeAddr);
      Pause_ms(Pause);
      DCOutAmpsSet        := EEPROM_Read(EE_DcOutAmpsSetEeAddr);
      Pause_ms(Pause);
      MaxVoltSet          := EEPROM_Read(EE_MaxVoltSetEeAddr);
      Pause_ms(Pause);
      MinVoltSet          := EEPROM_Read(EE_MinVoltSetEeAddr);
      
      Pause_ms(Pause);
      asm ClrWDT; end;
      
      {DCSetResponseTime   := EEPROM_Read(EE_DCSetResponseTimeEeAddr);
      Pause_ms(Pause);}
      BatteryAh           := EEPROM_Read(EE_BatteryAhEeAddr);
      Pause_ms(Pause);
      BoostChargeLimit    := EEPROM_Read(EE_BoostChargeLimitEeAddr);
      Pause_ms(Pause);
      FloatChargeLimit    := EEPROM_Read(EE_FloatChargeLimitEeAddr);
      Pause_ms(Pause);
      DeepDischargeVolt   := EEPROM_Read(EE_DeepDischargeVoltEeAddr);
      Pause_ms(Pause);
      BatteryAmpsSet      := EEPROM_Read(EE_BatteryAmpsBoostEeAddr);
      
      Pause_ms(Pause);
      asm ClrWDT; end;
      
      BoostChargeVoltage  := EEPROM_Read(EE_BoostChargeVoltEeAddr);
      Pause_ms(Pause);
      FloatChargeVoltage  := EEPROM_Read(EE_FloatChargeVoltEeAddr);
      Pause_ms(Pause);
      BoostChargeTimeSet  := EEPROM_Read(EE_BoostChargeTimeEeAddr);
      Pause_ms(Pause);
      BoostChargeTime     := BoostChargeTimeSet;
      DeepDischargeVolt   := EEPROM_Read(EE_DeepDischargeVoltEeAddr);
      Pause_ms(Pause);
      AutoBFMode          := EEPROM_Read(EE_AutoBFModeEeAddr);
      Pause_ms(Pause);
      
      asm ClrWDT; end;
      
      BoostChargeLimit    := EEPROM_Read(EE_BoostChargeLimitEeAddr);
      Pause_ms(Pause);
      FloatChargeLimit    := EEPROM_Read(EE_FloatChargeLimitEeAddr);
      Pause_ms(Pause);
      dV_LoadVolt         := EEPROM_Read(EE_dV_LoadVoltEeAddr);
      dV_LoadVolt         := dV_LoadVolt - 1000;
      
      {dV_BatteryVolt      := EEPROM_Read(EE_dV_BatteryVoltEeAddr);
      dV_BatteryVolt      := dV_BatteryVolt - 1000;}
      
      diff_leak_pos := EEPROM_Read(EE_Data_Diff_leak_pos);
      Pause_ms(Pause);
      diff_leak_neg := EEPROM_Read(EE_Data_Diff_leak_neg);
      Pause_ms(Pause);
      
      asm ClrWDT; end;
      
      Confirm_AcMenuBit       := EEPROM_Read(EE_ConfirmAcMenuEeAddr);
      Pause_ms(Pause);
      
      Confirm_BattMenuBit     := EEPROM_Read(EE_ConfirmBattMenuEeAddr);
      Pause_ms(Pause);
      
      Confirm_ClockMenuBit    := EEPROM_Read(EE_ConfirmClockMenuEeAddr);
      Pause_ms(Pause);
      
      Confirm_DcMenuBit       := EEPROM_Read(EE_ConfirmDcMenuEeAddr);
      Pause_ms(Pause);
      
      {Confirm_LanguMenuBit    := EEPROM_Read(EE_ConfirmLanguMenuEeAddr);
      Pause_ms(Pause);    }
      
      asm ClrWDT; end;
      
      Confirm_LeakaMenuBit    := EEPROM_Read(EE_ConfirmLeakMenuEeAddr);
      Pause_ms(Pause);
      
      Confirm_ModbusMenuBit   := EEPROM_Read(EE_ConfirmModbusMenuEeAddr);
      Pause_ms(Pause);
      
      Confirm_OperaMenuBit    := EEPROM_Read(EE_ConfirmOperaMenuEeAddr);
      Pause_ms(Pause);
      
      Confirm_TempeMenuBit    := EEPROM_Read(EE_ConfirmTempMenuEeAddr);
      Pause_ms(Pause);
      
      User_Password           := EEPROM_Read(EE_PasswordEeAddr);
      Pause_ms(Pause);
      
      asm ClrWDT; end;
      
      {U1VoltRefValue          := EEPROM_Read(EE_U1VoltRefValuEeAddr);
      Pause_ms(Pause);

      U2VoltRefValue          := EEPROM_Read(EE_U2VoltRefValuEeAddr);
      Pause_ms(Pause);

      U3VoltRefValue          := EEPROM_Read(EE_U3VoltRefValuEeAddr);
      Pause_ms(Pause);

      U1AmpsRefValue          := EEPROM_Read(EE_U1AmpsRefValuEeAddr);
      Pause_ms(Pause);

      U2AmpsRefValue          := EEPROM_Read(EE_U2AmpsRefValuEeAddr);
      Pause_ms(Pause);

      U3AmpsRefValue          := EEPROM_Read(EE_U3AmpsRefValuEeAddr);
      Pause_ms(Pause);}
      
      asm ClrWDT; end;
      
      //**********************load volt hesaplanýrken buradaki bilgilere gereklidir********
      
      Sample_RedDigital  := Org_LoadVolt;
      
      if (HucreSayisi = 6) then
        begin

             //Sample_RedDigital := Org_12_LoadVolt;
             Sample_RedVolt    := 15;

        end else
      if (HucreSayisi = 12) then
        begin

             //Sample_RedDigital := Org_24_LoadVolt;
             Sample_RedVolt    := 30;
             one_kohm_constant := 1000;
             Res_DivideValue   := 990;

        end else
      if (HucreSayisi = 24) then
        begin

             //Sample_RedDigital := Org_48_LoadVolt;
             Sample_RedVolt    := 60;
             //one_kohm_constant := 241;
             one_kohm_constant := 483;
             Res_DivideValue   := 463;

        end else
      if ((HucreSayisi >= 54)and(HucreSayisi <= 60)) then
        begin

             //Sample_RedDigital := Org_110_LoadVolt;
             Sample_RedVolt    := 132;
             //one_kohm_constant := 100;
             one_kohm_constant := 204;
             Res_DivideValue   := 205;

        end else
      if ((HucreSayisi = 108)or(HucreSayisi =110)) then
        begin

             //Sample_RedDigital := Org_220_LoadVolt;
             Sample_RedVolt    := 268;
             one_kohm_constant := 50;
             Res_DivideValue   := 50;
        end;
      //**********************load volt hesaplanýrken buradaki bilgilere gereklidir********
      
      Pause_ms(Pause);
      asm ClrWDT; end;
      
      if (LanguageBit = Turkish) then
        begin
             Turkish_Lang;
        end else
      if (LanguageBit = English) then
        begin
             English_Lang;
        end;
        
      ServiceCycle      := EEPROM_Read(EE_ServiceCycleEeAddr);
      Pause_ms(Pause);
      QuitVolt         := EEPROM_Read(EE_QuitVoltEeAddr);
      Pause_ms(Pause);
      QuitTime         := EEPROM_Read(EE_QuitTimeEeAddr);
      Pause_ms(Pause);
      {CurveScan        := EEPROM_Read(EE_CurveScanEeAddr);
      Pause_ms(Pause);}
      Bakim_Start_Time := EEPROM_Read(EE_BkmStartTimeEeAddr);
      Pause_ms(Pause);
      Bkm_Status       := EEPROM_Read(EE_BkmStatusEeAddr);
      Pause_ms(Pause);
      
      asm clrwdt; end;

      QuitTime_Sec := (QuitTime * 3600000);// çýkýþ zamaný saat olarak // 1ms timer için 1 sýfýr daha atýldý, GAR24-L' de 10ms timer da 1 sýfýr eksik
        //QuitTime_Sec := (70 * 100);// denemek için


      Service1_Date    := EEPROM_Read(EE_Service1EeAddr);
      Pause_ms(Pause);
      Service2_Date    := EEPROM_Read(EE_Service2EeAddr);
      Pause_ms(Pause);
      Service3_Date    := EEPROM_Read(EE_Service3EeAddr);
      Pause_ms(Pause);
      Service4_Date    := EEPROM_Read(EE_Service4EeAddr);
      Pause_ms(Pause);
      
      FirstStartUpBattMenu := EEPROM_Read(EE_FirstBattMenuEeAddr);
      Pause_ms(Pause);
      asm clrwdt; end;
      
      ACVolt_Different := EEPROM_Read(EE_ACVoltDifferentEeAddr);
      Pause_ms(Pause);
      asm clrwdt; end;
      
      AC_ProtectBit   := EEPROM_Read(EE_ACProtectEeAddr);
      Pause_ms(Pause);
      asm clrwdt; end;
      
      KacakSensor   := EEPROM_Read(EE_KacakSensorEeAddr);
      Pause_ms(Pause);
      asm clrwdt; end;
      
      DiodeValue    := EEPROM_Read(EE_DiodeValueEeAddr);
      Pause_ms(Pause);
      asm clrwdt; end;
       
       Glcd_Fill(0x00);
  end;
//******************************************************************************
Procedure FactoryData_Write;
 begin

      Glcd_Fill(0x00);
      Glcd_Write_Text('Factory Data Reset...',0,Row1,Black);

      EEPROM_Write(EE_dV_LoadVoltEeAddr, 1001);  // loadvolt fark deðeri açýlýþta 1001 yüklensin saçma deðer yüklenmesin
      while (WR_bit) do begin end; // write/erase cycle waiting
      
      Pause_ms(5);
      asm ClrWDT; end;
      
      EEPROM_Write(EE_LogListArrayEeAddr,0);  // log kaydetme listesi ilk yazýlým yüklemede 0 olarak atandý   -- liste boþ
      while (WR_bit) do begin end; // write/erase cycle waiting
      
      Pause_ms(5);
      asm ClrWDT; end;
      
      EEPROM_Write(EE_DropperOutStatusEeAddr, 2); // dropper disable
      while (WR_bit) do begin end;
      
      Pause_ms(5);
      asm ClrWDT; end;
      
      EEPROM_Write(EE_OperationModeEeAddr, 1); // çalýþma modu tekli
      while (WR_bit) do begin end;

      Pause_ms(5);
      asm ClrWDT; end;
      
      EEPROM_Write(EE_MasterSlaveEeAddr, 1); // master mode
      while (WR_bit) do begin end;

      Pause_ms(5);
      asm ClrWDT; end;
      
      EEPROM_Write(EE_ACMaxVoltSetEeAddr, 480); // ac max volt 480V
      while (WR_bit) do begin end;
      
      Pause_ms(5);
      asm ClrWDT; end;
      
      EEPROM_Write(EE_ACMinVoltSetEeAddr, 320); // ac min volt 320V
      while (WR_bit) do begin end;
      
      Pause_ms(5);
      asm ClrWDT; end;
      
      EEPROM_Write(EE_ACVoltDifferentEeAddr, 20); // AC gerilim farký 20V
      while (WR_bit) do begin end;

      Pause_ms(5);
      asm ClrWDT; end;
      
      EEPROM_Write(EE_ACProtectEeAddr, 1); // AC Koruma açýk
      while (WR_bit) do begin end;

      Pause_ms(5);
      asm ClrWDT; end;
      
      {EEPROM_Write(EE_ACSetResponseTimeEeAddr, 4); // tepki süresi 4 sn
      while (WR_bit) do begin end;

      Pause_ms(50);
      asm ClrWDT; end;}
      
      EEPROM_Write(EE_LeakagePosEeAddr, 50); //+ kaçak deðeri 50k
      while (WR_bit) do begin end;
      
      Pause_ms(5);
      asm ClrWDT; end;
      
      EEPROM_Write(EE_LeakageNegEeAddr, 50);// - kaçak deðeri 50k
      while (WR_bit) do begin end;
      
      Pause_ms(5);
      asm ClrWDT; end;
      
      EEPROM_Write(EE_ModbusIDEeAddr, 04); // modbus id 04
      while (WR_bit) do begin end;
      
      Pause_ms(5);
      asm ClrWDT; end;
      
      EEPROM_Write(EE_ModbusBaudRate, 2); // baudrate 9600
      while (WR_bit) do begin end;
      
      Pause_ms(5);
      asm ClrWDT; end;
      
      EEPROM_Write(EE_TempAlarmSetEeAddr, 55); // sýcaklýk alarmý 55C
      while (WR_bit) do begin end;
      
      Pause_ms(5);
      asm ClrWDT; end;
      
      EEPROM_Write(EE_TempFanOnSetEeAddr, 40); // fan açma deðeri 40C
      while (WR_bit) do begin end;
      
      Pause_ms(5);
      asm ClrWDT; end;
      
      EEPROM_Write(EE_TempFanOffSetEeAddr, 38); // fan kapama deðeri 38C
      while (WR_bit) do begin end;
      
      Pause_ms(5);
      asm ClrWDT; end;
      
      {EEPROM_Write(EE_TempSetResponseTimeEeAddr, 4); // tepki süresi 4sn.
      while (WR_bit) do begin end;
      
      Pause_ms(50);
      asm ClrWDT; end;  }
      
      if (HucreSayisi = 12) then // 24V ise
        begin
          EEPROM_Write(EE_DCOutVoltSetEeAddr, 276); // dc çýkýþ gerilimi 27.6V
          while (WR_bit) do begin end;
          
          EEPROM_Write(EE_MaxVoltSetEeAddr, 348); // max volt alarm deðeri 30V
          while (WR_bit) do begin end;

          EEPROM_Write(EE_MinVoltSetEeAddr, 210); // min volt alarm deðeri 21V
          while (WR_bit) do begin end;
          
          EEPROM_Write(EE_BoostChargeVoltEeAddr, 300); // hýzlý þarj gerilimi = 28V
          while (WR_bit) do begin end;

          EEPROM_Write(EE_FloatChargeVoltEeAddr, 276);// normal þarj gerilimi = 27.6V
          while (WR_bit) do begin end;
          
          EEPROM_Write(EE_DeepDischargeVoltEeAddr, 210); // derin deþarj gerilimi = 21V
          while (WR_bit) do begin end;
          
          EEPROM_Write(EE_QuitVoltEeAddr, 210);
          while (WR_bit) do begin end; // write/erase cycle waiting

          Pause_ms(5);
          asm ClrWDT; end;
          
        end else
      if (HucreSayisi = 24) then // 48V ise
        begin
          EEPROM_Write(EE_DCOutVoltSetEeAddr, 552); // dc çýkýþ gerilimi 55,2V
          while (WR_bit) do begin end;

          EEPROM_Write(EE_MaxVoltSetEeAddr, 600); // max volt alarm deðeri 60V
          while (WR_bit) do begin end;

          EEPROM_Write(EE_MinVoltSetEeAddr, 420); // min volt alarm deðeri 42V
          while (WR_bit) do begin end;

          EEPROM_Write(EE_BoostChargeVoltEeAddr, 600); // hýzlý þarj gerilimi = 55.9V
          while (WR_bit) do begin end;

          EEPROM_Write(EE_FloatChargeVoltEeAddr, 535);// normal þarj gerilimi = 53.5V
          while (WR_bit) do begin end;

          EEPROM_Write(EE_DeepDischargeVoltEeAddr, 420); // derin deþarj gerilimi = 42V
          while (WR_bit) do begin end;
          
          EEPROM_Write(EE_QuitVoltEeAddr, 420);
          while (WR_bit) do begin end; // write/erase cycle waiting

          Pause_ms(5);
          asm ClrWDT; end;
          
        end else
      if ((HucreSayisi = 54)or(HucreSayisi = 55)) then // 110V ise
        begin
          EEPROM_Write(EE_DCOutVoltSetEeAddr, 1265); // dc çýkýþ gerilimi 126,5V
          while (WR_bit) do begin end;

          EEPROM_Write(EE_MaxVoltSetEeAddr, 1590); // max volt alarm deðeri 159V
          while (WR_bit) do begin end;

          EEPROM_Write(EE_MinVoltSetEeAddr, 910); // min volt alarm deðeri 91V
          while (WR_bit) do begin end;

          EEPROM_Write(EE_BoostChargeVoltEeAddr, 1375); // hýzlý þarj gerilimi = 124.2V
          while (WR_bit) do begin end;

          EEPROM_Write(EE_FloatChargeVoltEeAddr, 1265);// normal þarj gerilimi = 120.4V
          while (WR_bit) do begin end;

          EEPROM_Write(EE_DeepDischargeVoltEeAddr, 962); // derin deþarj gerilimi = 94.5V
          while (WR_bit) do begin end;
          
          EEPROM_Write(EE_QuitVoltEeAddr, 962);
          while (WR_bit) do begin end; // write/erase cycle waiting

          Pause_ms(5);
          asm ClrWDT; end;
          
        end else
      if ((HucreSayisi = 108)or(HucreSayisi = 110)) then // 220V ise
        begin
          EEPROM_Write(EE_DCOutVoltSetEeAddr, 2530); // dc çýkýþ gerilimi 253,0V
          while (WR_bit) do begin end;

          EEPROM_Write(EE_MaxVoltSetEeAddr, 2700); // max volt alarm deðeri 270V
          while (WR_bit) do begin end;

          EEPROM_Write(EE_MinVoltSetEeAddr, 1890); // min volt alarm deðeri 189V
          while (WR_bit) do begin end;

          EEPROM_Write(EE_BoostChargeVoltEeAddr, 2700); // hýzlý þarj gerilimi = 248.4V
          while (WR_bit) do begin end;

          EEPROM_Write(EE_FloatChargeVoltEeAddr, 2408);// normal þarj gerilimi = 240.8V
          while (WR_bit) do begin end;

          EEPROM_Write(EE_DeepDischargeVoltEeAddr, 1925); // derin deþarj gerilimi = 189V
          while (WR_bit) do begin end;
          
          EEPROM_Write(EE_QuitVoltEeAddr, 1925);
          while (WR_bit) do begin end; // write/erase cycle waiting

          Pause_ms(5);
          asm ClrWDT; end;
          
        end;
      
      EEPROM_Write(EE_DcOutAmpsSetEeAddr, RedresorAkim*10); // fabrika ayarlarýnda ayarlanan redresör akým deðeri yüklenir
      while (WR_bit) do begin end;
      
      Pause_ms(5);
      asm ClrWDT; end;
      
      {EEPROM_Write(EE_DCSetResponseTimeEeAddr, 4); // tepki süresi 4sn
      while (WR_bit) do begin end;}
      
      Pause_ms(5);
      asm ClrWDT; end;
      
      EEPROM_Write(EE_BatteryAhEeAddr, 100); // akü Ah 100
      while (WR_bit) do begin end;
      
      Pause_ms(5);
      asm ClrWDT; end;
      
      EEPROM_Write(EE_BatteryAmpsBoostEeAddr, 200); // akü hýzlý þarj akýmý 20,0A
      while (WR_bit) do begin end;

      Pause_ms(5);
      asm ClrWDT; end;

      EEPROM_Write(EE_BatteryAmpsFloatEeAddr, 100);// akü normal þarj akýmý 10,0A
      while (WR_bit) do begin end;
      
      Pause_ms(5);
      asm ClrWDT; end;
      
      EEPROM_Write(EE_BatteryAmpsTCompEeAddr, 100);// akü sýcaklýk komp. þarj akýmý 10,0A
      while (WR_bit) do begin end;
      
      Pause_ms(5);
      asm ClrWDT; end;
      
      EEPROM_Write(EE_BatteryAmpsManuelEeAddr, 100); // akü manuel þarj akýmý 10,0A
      while (WR_bit) do begin end;
      
      Pause_ms(5);
      asm ClrWDT; end;
      
      EEPROM_Write(EE_ChargeModeEeAddr, Manuel);  // þarj modu manuel
      while (WR_bit) do begin end;
      
      Pause_ms(5);
      asm ClrWDT; end;
      
      EEPROM_Write(EE_BoostChargeTimeEeAddr, 30); // hýzlý þarj zamaný 30dk
      while (WR_bit) do begin end;
      
      Pause_ms(5);
      asm ClrWDT; end;
      
      EEPROM_Write(EE_AutoBFModeEeAddr, 0); // hýzlý/normal þarj geçiþ kapalý
      while (WR_bit) do begin end;
      
      Pause_ms(5);
      asm ClrWDT; end;
      
      EEPROM_Write(EE_BoostChargeLimitEeAddr, 52); // 0.2C
      while (WR_bit) do begin end;
      
      Pause_ms(5);
      asm ClrWDT; end;
      
      EEPROM_Write(EE_FloatChargeLimitEeAddr, 26); //
      while (WR_bit) do begin end;
      
      Pause_ms(5);
      asm ClrWDT; end;

      EEPROM_Write(EE_Data_Diff_leak_neg, 0);
      while (WR_bit) do begin end;
      
      Pause_ms(5);
      asm ClrWDT; end;
      
      EEPROM_Write(EE_Data_Diff_leak_pos, 0);
      while (WR_bit) do begin end;
      
      Pause_ms(5);
      asm ClrWDT; end;
      
      EEPROM_Write(EE_ConfirmAcMenuEeAddr, 1);
      while (WR_bit) do begin end;
      
      Pause_ms(5);
      asm ClrWDT; end;
      
      EEPROM_Write(EE_ConfirmBattMenuEeAddr, 1);
      while (WR_bit) do begin end;

      Pause_ms(5);
      asm ClrWDT; end;

      EEPROM_Write(EE_ConfirmClockMenuEeAddr, 1);
      while (WR_bit) do begin end;

      Pause_ms(5);
      asm ClrWDT; end;

      EEPROM_Write(EE_ConfirmDcMenuEeAddr, 1);
      while (WR_bit) do begin end;

      Pause_ms(5);
      asm ClrWDT; end;

      EEPROM_Write(EE_ConfirmLanguMenuEeAddr, 1);
      while (WR_bit) do begin end;

      Pause_ms(5);
      asm ClrWDT; end;

      EEPROM_Write(EE_ConfirmLeakMenuEeAddr, 1);
      while (WR_bit) do begin end;

      Pause_ms(5);
      asm ClrWDT; end;

      EEPROM_Write(EE_ConfirmModbusMenuEeAddr, 1);
      while (WR_bit) do begin end;

      Pause_ms(5);
      asm ClrWDT; end;

      EEPROM_Write(EE_ConfirmOperaMenuEeAddr, 1);
      while (WR_bit) do begin end;

      Pause_ms(5);
      asm ClrWDT; end;

      EEPROM_Write(EE_ConfirmTempMenuEeAddr, 1);
      while (WR_bit) do begin end;

      Pause_ms(5);
      asm ClrWDT; end;
      
      EEPROM_Write(EE_PasswordEeAddr, 1234); // þifre default olarak 1234 atandý
      while (WR_bit) do begin end; // write/erase cycle waiting
      
      Pause_ms(5);
      asm ClrWDT; end;
      
      {EEPROM_Write(EE_U1VoltRefValuEeAddr, 230);
      while (WR_bit) do begin end; // write/erase cycle waiting

      Pause_ms(5);
      asm ClrWDT; end;

      EEPROM_Write(EE_U2VoltRefValuEeAddr, 230);
      while (WR_bit) do begin end; // write/erase cycle waiting

      Pause_ms(5);
      asm ClrWDT; end;

      EEPROM_Write(EE_U3VoltRefValuEeAddr, 230);
      while (WR_bit) do begin end; // write/erase cycle waiting

      Pause_ms(5);
      asm ClrWDT; end;

      EEPROM_Write(EE_U1AmpsRefValuEeAddr, 0);
      while (WR_bit) do begin end; // write/erase cycle waiting

      Pause_ms(5);
      asm ClrWDT; end;

      EEPROM_Write(EE_U2AmpsRefValuEeAddr, 0);
      while (WR_bit) do begin end; // write/erase cycle waiting

      Pause_ms(5);
      asm ClrWDT; end;

      EEPROM_Write(EE_U3AmpsRefValuEeAddr, 0);
      while (WR_bit) do begin end; // write/erase cycle waiting

      Pause_ms(5);
      asm ClrWDT; end;}
      
      EEPROM_Write(EE_LanguageBitEeAddr, Turkish);
      while (WR_bit) do begin end; // write/erase cycle waiting

      Pause_ms(5);
      asm ClrWDT; end;
      
      EEPROM_Write(EE_ServiceCycleEeAddr, 2);  // yýlda 2 defa
      while (WR_bit) do begin end; // write/erase cycle waiting
      
      Pause_ms(5);
      asm ClrWDT; end;
      
      EEPROM_Write(EE_QuitTimeEeAddr, 12); // 1 saat
      while (WR_bit) do begin end; // write/erase cycle waiting
      
      {EEPROM_Write(EE_CurveScanEeAddr, 1);
      while (WR_bit) do begin end; // write/erase cycle waiting

      Pause_ms(5);
      asm ClrWDT; end;}
      
      EEPROM_Write(EE_BkmStartTimeEeAddr, 0);
      while (WR_bit) do begin end; // write/erase cycle waiting
      asm clrwdt; end;

      EEPROM_Write(EE_BkmStatusEeAddr, 0);
      while (WR_bit) do begin end; // write/erase cycle waiting
      asm clrwdt; end;
      
      EEPROM_Write(EE_DiodeValueEeAddr, 7);
      while (WR_bit) do begin end; // write/erase cycle waiting
      asm clrwdt; end;
      

 end;
//******************************************************************************
//******************************************************************************
procedure Led_Test;
var Temp1  : byte;
    Temp2  : byte;
begin
      Temp1 := 0;
      Temp2 := 0;

      for temp1 := 1 to 8 do
        begin
             HC595_CS1_Pin := 1;
             Delay_Cyc_Long(5);
             HC595_CS1_Pin := 0;
             Delay_Cyc_Long(5);



             Case (Temp1) of
              1: temp2 := 128;
              2: temp2 := 192;
              3: temp2 := 224;
              4: temp2 := 240;
              5: temp2 := 248;
              6: temp2 := 252;
              7: temp2 := 254;
              8: temp2 := 255;
             end;

             SPI1_Write(Temp2);
             Pause_ms(25);
             
             asm ClrWDT; end;

             HC595_CS1_Pin := 1;
             Delay_Cyc_Long(5);
        end;
        
        
      Temp1 := 0;
      Temp2 := 0;

      for temp1 := 1 to 8 do
        begin
             HC595_CS2_Pin := 1;
             Delay_Cyc_Long(5);
             HC595_CS2_Pin := 0;
             Delay_Cyc_Long(5);


             Case (Temp1) of
              1: temp2 := 128;
              2: temp2 := 192;
              3: temp2 := 224;
              4: temp2 := 240;
              5: temp2 := 248;
              6: temp2 := 252;
              7: temp2 := 254;
              8: temp2 := 255;
             end;

             SPI1_Write(Temp2);
             Pause_ms(25);
             
             asm ClrWDT; end;

             HC595_CS2_Pin := 1;
             Delay_Cyc_Long(5);
        end;
        
        
        
      Temp1 := 0;
      Temp2 := 0;

      for temp1 := 1 to 8 do
        begin
             HC595_CS3_Pin := 1;
             Delay_Cyc_Long(5);
             HC595_CS3_Pin := 0;
             Delay_Cyc_Long(5);

             Case (Temp1) of
              1: temp2 := 1;
              2: temp2 := 3;
              3: temp2 := 7;
              4: temp2 := 15;
              5: temp2 := 31;
              6: temp2 := 63;
              7: temp2 := 127;
              8: temp2 := 255;
             end;

             SPI1_Write(Temp2);
             Pause_ms(25);
             
             asm ClrWDT; end;

             HC595_CS3_Pin := 1;
             Delay_Cyc_Long(5);
        end;
      
      //Check_Modbus;
      Pause_ms(250);
      asm ClrWDT; end;
      //Check_Modbus;
      Pause_ms(250);
      asm ClrWDT; end;
      //Check_Modbus;
      Pause_ms(250);
      asm ClrWDT; end;
      //Check_Modbus;
      Pause_ms(250);

      asm ClrWDT; end;
      
      //Check_Modbus;
      Pause_ms(250);
        
      HC595_CS3_Pin := 1;
      Delay_Cyc_Long(5);
      HC595_CS3_Pin := 0;
      Delay_Cyc_Long(5);
      
      SPI1_Write(0x00);
      
      HC595_CS3_Pin := 1;
      Delay_Cyc_Long(5);
      
      
      
      
      HC595_CS2_Pin := 1;
      Delay_Cyc_Long(5);
      HC595_CS2_Pin := 0;
      Delay_Cyc_Long(5);

      SPI1_Write(0x00);

      HC595_CS2_Pin := 1;
      Delay_Cyc_Long(5);
      
      
      
      
      
      HC595_CS1_Pin := 1;
      Delay_Cyc_Long(5);
      HC595_CS1_Pin := 0;
      Delay_Cyc_Long(5);

      SPI1_Write(0x00);

      HC595_CS1_Pin := 1;
      Delay_Cyc_Long(5);
        
        
end;
//******************************************************************************
procedure Start_Screen;
var Text : string[21];
    A_Text : string[5];

  begin

      Glcd_Write_Text('Firmware Version:6.06',0,Row2,Black);
      Glcd_Write_Text('Hardware Version: 3.3',0,Row3,Black);
      

      asm ClrWDT; end;

      HucreSayisi         := EEPROM_Read(EE_HucreSayisiEeAddr);
      Pause_ms(100);
      RedresorAkim        := EEPROM_Read(EE_RedresorAkimEeAddr);
      Pause_ms(100);
      
      Glcd_Write_Text('System Test...   ',0,Row5,black);
      
      Led_Test;

      Glcd_Image(@StartLogo); // açýlýþ logosu
      
      WordToStr(RedresorAkim,A_Text);
      ltrim(A_Text);
      
      if (HucreSayisi = 12) then
        begin
             Text := 'GRR3024-L 24V-'+A_Text+'A';
        end else
      if (HucreSayisi = 24) then
        begin
             Text := 'GRR3048-L 48V-'+A_Text+'A';
        end else
      if ((HucreSayisi >= 54)and(HucreSayisi <= 60)) then
        begin
             Text := 'GRR3110-L 110V-'+A_Text+'A';
        end else
      if ((HucreSayisi >= 100)or(HucreSayisi <= 120)) then
        begin
             Text := 'GRR3220-L 220V-'+A_Text+'A';
        end;

      Glcd_Write_Text(Text,5, Row6, Black);
      
      Start_Screen_7Seg();

  end;
//******************************************************************************
Procedure WDT_Reset_Flag;
var i:byte;
  begin

    i:= 0;
    
    Glcd_Fill(0x00);
    Glcd_Set_Font(@NewFont5x7, 5, 7, 32);     // Change font
    
    if (WDTO_bit = 1) then
      begin
           
           Glcd_Write_Text('System Fault....',0,Row1,Black);
           Glcd_Write_Text('System Restarting   ',0,row2,Black);
           Glcd_Write_Text('Fault Code:0xC0015',0,row3,Black);
           
           for i:= 1 to 5 do
             begin
                  Led_Test;
                  asm ClrWDT; end;

             end;
           
           WDTO_bit := 0; // clear asm ClrWDT; end; flag
           
           
      end;
      
      
  end;
//******************************************************************************

begin
  { Main program }
  
  Pause_ms(500);
  
  Start_Register_Config;
  
  {if (Down_Button =0) then Pause_ms(3000); // asm ClrWDT; end; kontrolü}
  
  WDT_Reset_Flag;
  
  {FactoryData          := EEPROM_Read(EE_DefaultDataEeAddr); // ilk yazýlým deðeri}
  
  Glcd_Set_Font(@NewFont5x7, 5, 7, 32);     // Change font
  
  Run_Timers; // timerlarý çalýþtýr
  //InitTimer5(); // ////Check_Modbus timer
  
  T2CON := $8030;  /// Frekans Okuma Timer


  {if (FactoryData <> 31) then // ilk yazýlým yüklendiðinde bu deðer olamaz dolayýsýyla buraya girecek
    begin
        EEPROM_Write(EE_DefaultDataEeAddr, 31);
        while (WR_bit) do begin end; // write/erase cycle waiting

        EEPROM_Write(EE_HucreSayisiEeAddr, 55); // hücre sayýsý
        while (WR_bit) do begin end;

        EEPROM_Write(EE_NomHucreGerilimEeAddr, 230); // hücre gerilimi
        while (WR_bit) do begin end;

        EEPROM_Write(EE_F_ChargePercentLoEeAddr, 90); // Float charge min %
        while (WR_bit) do begin end;

        EEPROM_Write(EE_F_ChargePercentHiEeAddr, 115); // Float charge max. %
        while (WR_bit) do begin end;

        EEPROM_Write(EE_B_ChargePercentLoEeAddr, 115); // Boost charge min. %
        while (WR_bit) do begin end;

        EEPROM_Write(EE_B_ChargePercentHiEeAddr, 135); // Boost charge max. %
        while (WR_bit) do begin end;

        RedresorAkim := 60;
        EEPROM_Write(EE_RedresorAkimEeAddr, 60); // Redresör akýmý
        while (WR_bit) do begin end;

        FactoryResetBit := 131; // fabrika ayarlarýnýn yüklenmesine izin verildi
        HiddenMenu;

    end;}

  
//  Glcd_Set_Font(@Digital5x7_4557, 5, 7, 32);     // Change font
  Glcd_Set_Font(@NewFont5x7, 5, 7, 32);     // Change font
  


  
  Data_EepromRead;
  

    
  
  {if (MasterSlave = 2) then
    begin
        StopBit := 1;
    end;}

  Uart_Procedures;
  
  Glcd_Image(@mainscreen);
  Glcd_PartialImage(67, 16, 58, 23, 58, 23, @AcVolt_View);
  
  Program_StartBit := 1; // haberleþme için izin verildi
  

  
  while (TRUE) do
   begin
     
     //Calibration_Menu;
     
     // Led_Write();
         Glcd_Set_Font(@NewFont5x7, 5, 7, 32);     // Change font
         OERR_bit := 0;             // Set OERR to 0
         FERR_bit := 0;             // Set FERR to 0
         Glcd_Write_Text(test_Text, 0, 2, Black);
         
         if (Up_Button =0) then Send_Test_Text := 'GEMTA INC.' else
         if (Up_Button =0) then Send_Test_Text := 'Test Soft.';
         
         if (Ok_Button =0) then
            begin
                UART1_Write_Text(Send_Test_Text);
            end;


        //*************** Menu ************************************************************************************
        if (Ok_Button =0) then
          begin
              while (Ok_Button =0) do
                begin
                    asm ClrWDT; end;
                    //Check_Modbus;
                end;
              
              MainMenu;
              
              Glcd_Image(@mainscreen); // menülerden gelince tekrar ana ekraný yükle
              Glcd_PartialImage(67, 16, 58, 23, 58, 23, @AcVolt_View);

              
          end;

        //*************** Menu ************************************************************************************

        asm ClrWDT; end;



  
   end; // main loop while end...
end.