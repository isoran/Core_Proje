unit Battery_Meintenance;
uses Language;
procedure AkuTestBakim();
procedure DateCalculator();
procedure Read_Time( p_hours : ^byte; p_minutes : ^byte; p_seconds : ^byte; p_day : ^byte; p_week : ^byte; p_month : ^byte; p_year : ^byte);external;
procedure ValueDivide(Value : word; Dot : byte); external;
Procedure Pause_Ms(Value:word); external;

const 
      Black = 1; external;
      EE_ServiceCycleEeAddr    = 8386100; external; // bakým döngüsü eeprom adresi
      EE_Service1EeAddr        = 8386102; external; // 1. servis tarih eeprom adress
      EE_Service2EeAddr        = 8386104; external; // 2. servis tarih eeprom adress
      EE_Service3EeAddr        = 8386106; external; // 3. servis tarih eeprom adress
      EE_Service4EeAddr        = 8386108; external; // 4. servis tarih eeprom adress
      EE_QuitVoltEeAddr        = 8386110; external; // bakým çýkma gerilimi eeprom adress
      EE_QuitTimeEeAddr        = 8386112; external; // çýkýþ gerilimi eeprom adress
      EE_CurveScanEeAddr       = 8386114; external; // eðri tarama eeprom adress
      EE_BkmStartTimeEeAddr    = 8386116; external; // bakým baþlama saati eeprom adress
      EE_BkmStatusEeAddr       = 8386118; external; // bakým devrede ya da deðil eeprom adress
      EE_HucreSayisiEeAddr     = 8384516; external; // akü hücre sayýsý
      EE_NomHucreGerilimEeAddr = 8384518; external; // Nominal akü hücre gerilimi
      NewFont5x7 : array[1120] of byte = (); external;
      
////////////////////////////////////////////////////////////////////////////////



var
   Down_Button         : sbit;sfr; external;
   Ok_Button           : sbit;sfr; external;
   Up_Button           : sbit;sfr; external;
   Minutes, Hours, Day, Month, Year, Seconds, Week : short;external;
   
   QuitTimeCounter ,QuitTime_Sec : LongInt;
   
ServiceCycle,TempAy : byte;

CycleText : array[1..3] of char;
FarkAy, QuitVolt,Bakim_Start_Time : word;
QuitTime,CurveScan : byte;

DayCalc, Year_1, Year_2, Year_3, Year_4 : byte;
Month_1, Month_2, Month_3, Month_4 : short;

Service1_Date, Service2_Date, Service3_Date, Service4_Date : word;

Temp_Byte_Date,BakimSelect : byte;
ButonStop : bit ; external;

Value_Text : array [1..5] of char; external;
NomHucreGerilim, HucreSayisi, RedresorAkim : word;external;
BtCounterNormal : word; external;

Bkm_Status : bit;
Bkm_Min, Bkm_Hour : short;

Chng1,Chng2,Chng3,Chng4,Chng5,Chng6,Chng7 : byte;
MenuExit : byte; external;
BakimControlBit   :bit;external;
////////////////////////////////////////////////////////////////////////////////
Bat_Service_Init_bit : bit;


implementation
//******************************************************************************

procedure DateCalculator();
var
DateCalcMenuExit : bit;
YilText, MonthText, DayText : string[3];
DateFullText : string[15];
 begin
      
      Glcd_Fill(0x00);
      DateCalcMenuExit := 1;
      BakimControlBit  := 0;
      Read_Time(@hours, @minutes, @seconds, @day, @week, @month, @year);
      Seconds  :=  Bcd2Dec16(seconds);
      minutes  :=  Bcd2Dec16(minutes);
      hours    :=  Bcd2Dec16(hours);
      week     :=  Bcd2Dec16(Week);
      day      :=  Bcd2Dec16(Day);
      month    :=  Bcd2Dec16(Month);
      year     :=  Bcd2Dec16(Year);

      Glcd_Set_Font(@NewFont5x7, 5, 7, 32);
      DateFullText:= '               ';
      
    //While (DateCalcMenuExit = 1) do
     //begin
      
        FarkAy := ((360 div ServiceCycle) div 30); // ayda kaç adet olduðu hesaplanýr

        DayCalc := 15;// her ayýn 15. günü
        
        ByteToStr(DayCalc, DayText);
        ltrim(DayText);

        if (BakimSelect = 1) then
          begin
                  TempAy := FarkAy + Month;

                  if (TempAy > 12) then
                    begin
                        TempAy   := TempAy - 12;
                        Year_1   := Year + 1;
                        Month_1  := TempAy;
                    end else
                    begin
                        Month_1 := TempAy;
                        Year_1  := Year;
                    end;

                  Service1_Date := 100 * Month_1;
                  Service1_Date := Service1_Date + Year_1;


                  EEPROM_Write(EE_Service1EeAddr, Service1_Date);
                  while (NVMCON = 1) do begin end; // write/erase cycle waiting

                  if (ServiceCycle > 1) then
                    BakimSelect := 2 else BakimSelect := 1;

                 ByteToStr(Month_1,MonthText);
                 ByteToStr(Year_1,YilText);
                 ltrim(MonthText);
                 ltrim(YilText);

                 DateFullText :=('1-->'+DayText+'.' + MonthText + '.20' + YilText);
                 Glcd_Write_Text(DateFullText,10,2,Black);

                 Pause_Ms(500);

                 asm
                   clrwdt;
                 end;
          end;

        if (BakimSelect = 2) then
          begin
                  TempAy := FarkAy + Month_1;

                  if (TempAy > 12) then
                    begin
                        TempAy   := TempAy - 12;
                        Year_2   := Year_1 + 1;
                        Month_2  := TempAy;
                    end else
                    begin
                        Month_2 := TempAy;
                        Year_2  := Year_1;
                    end;

                  Service2_Date := 100 * Month_2;
                  Service2_Date := Service2_Date + Year_2;

                  EEPROM_Write(EE_Service2EeAddr, Service2_Date);
                  while (NVMCON = 1) do begin end; // write/erase cycle waiting

                  if (ServiceCycle > 2) then
                    BakimSelect := 3 else BakimSelect := 1;

                 ByteToStr(Month_2,MonthText);
                 ByteToStr(Year_2,YilText);
                 ltrim(MonthText);
                 ltrim(YilText);

                 DateFullText :=('2-->'+DayText+'.' + MonthText + '.20' + YilText);
                 Glcd_Write_Text(DateFullText,10,3,Black);

                 Pause_Ms(500);

                 asm
                   clrwdt;
                 end;
          end;

       if (BakimSelect = 3) then
         begin
                 TempAy := FarkAy + Month_2;

                  if (TempAy > 12) then
                    begin
                        TempAy   := TempAy - 12;
                        Year_3   := Year_2 + 1;
                        Month_3  := TempAy;
                    end else
                    begin
                        Month_3 := TempAy;
                        Year_3  := Year_2;
                    end;

                  Service3_Date := 100 * Month_3;
                  Service3_Date := Service3_Date + Year_3;

                  EEPROM_Write(EE_Service3EeAddr, Service3_Date);

                  while (NVMCON = 1) do begin end; // write/erase cycle waiting

                  if (ServiceCycle > 3) then
                    BakimSelect := 4 else BakimSelect := 1;

                  ByteToStr(Month_3,MonthText);
                  ByteToStr(Year_3,YilText);
                  ltrim(MonthText);
                  ltrim(YilText);

                  DateFullText :=('3-->'+DayText+'.' + MonthText + '.20' + YilText);
                  Glcd_Write_Text(DateFullText,10,4,Black);

                  Pause_Ms(500);

                 asm
                   clrwdt;
                 end;
         end;

      if (BakimSelect = 4) then
        begin
                 TempAy := FarkAy + Month_3;

                  if (TempAy > 12) then
                    begin
                        TempAy   := TempAy - 12;
                        Year_4   := Year_3 + 1;
                        Month_4  := TempAy;
                    end else
                    begin
                        Month_4 := TempAy;
                        Year_4  := Year_3;
                    end;

                  Service4_Date := 100 * Month_4;
                  Service4_Date := Service4_Date + Year_4;

                  EEPROM_Write(EE_Service4EeAddr, Service4_Date);
                  while (NVMCON = 1) do begin end; // write/erase cycle waiting

                  BakimSelect := 1;

                  ByteToStr(Month_4,MonthText);
                  ByteToStr(Year_4,YilText);
                  ltrim(MonthText);
                  ltrim(YilText);

                  DateFullText :=('4-->'+DayText+'.' + MonthText + '.20' + YilText);
                  Glcd_Write_Text(DateFullText,10,5,Black);

                  Pause_Ms(500);

                 asm
                   clrwdt;
                 end;
        end;

          
          
          if (Ok_Button =0) then
          begin
              while (Ok_Button =0) do
                begin
                    asm
                      clrwdt;
                    end;
                end;
              DateCalcMenuExit := 0;
          end;
      
    // end;
      
      Pause_Ms(1000);
      asm
        clrwdt;
      end;
      
      Pause_Ms(1000);
      asm
        clrwdt;
      end;
      
      Glcd_Fill(0x00);
 
 end;
//******************************************************************************
procedure AkuTestBakim();
var
    BakimMenuSayac: byte;
    NominalGerilim : word;
bytetext : string[3];
HourText, MinText : array [1..2] of char;
 begin
 
      Glcd_Fill(0x00);
      
      asm
        clrwdt;
      end;
      
      MenuExit := 0;
      Chng1         := 0;
      Chng2         := 0;
      Chng3         := 0;
      Chng4         := 0;
      Chng5         := 0;
      Chng6         := 0;
      BakimMenuSayac:= 1;
      NominalGerilim:= 0;
      bytetext      := '   ';
      HourText      := '  ';
      MinText       := '  ';
      
      Glcd_Set_Font(@NewFont5x7,5,7,32);

      NomHucreGerilim     := EEPROM_Read(EE_NomHucreGerilimEeAddr);
      HucreSayisi         := EEPROM_Read(EE_HucreSayisiEeAddr);

      NominalGerilim := (NomHucreGerilim * HucreSayisi) div 10;
      
      ServiceCycle     := EEPROM_Read(EE_ServiceCycleEeAddr);
      QuitVolt         := EEPROM_Read(EE_QuitVoltEeAddr);
      QuitTime         := EEPROM_Read(EE_QuitTimeEeAddr);
      //CurveScan        := EEPROM_Read(EE_CurveScanEeAddr);
      Bakim_Start_Time := EEPROM_Read(EE_BkmStartTimeEeAddr);
      Bkm_Status       := EEPROM_Read(EE_BkmStatusEeAddr);
      
      Glcd_Write_Text(Title_BattServMenu,    0, 0, Black);
      Glcd_Write_Text(Subtitle_Loop,         6, 1, Black);
      Glcd_Write_Text(Subtitle_MaintOut,     6, 2, Black);
      Glcd_Write_Text(Subtitle_OutTime,      6, 3, Black);
      //Glcd_Write_Text(Subtitle_Curvescan,    6, 4, Black); eðri tarama iptal edildi. Deþarj sýrasýnda GTT kartý ile haberleþme kesildiði için akým bilgisi alýnamaz ve eðri tarama kontrolü yapýlamaz
      Glcd_Write_Text(Subtitle_MaintTime,    6, 4, Black);
      Glcd_Write_Text(Subtitle_Status,       6, 5, Black);
      Glcd_Write_Text(SubTitle_Back,         6, 6, Black);
      Glcd_Write_Text(app_year,             92, 1, Black);
      Glcd_Write_Text(App_Hour,            104, 3, Black);

      Bkm_Min   := Bakim_Start_Time mod 100;
      Bkm_Hour  := Bakim_Start_Time div 100;

      
      HourText[1]  := (Bkm_Hour div 10)+48;
      HourText[2]  := (Bkm_Hour mod 10)+48;
      MinText[1]   := (Bkm_Min div 10)+48;
      MinText[2]   := (Bkm_Min mod 10)+48;
      
      Glcd_Write_Text(HourText, 92,4,Black);
      Glcd_Write_Text(':',104,4,black);
      Glcd_Write_Text(MinText, 109,4,Black);
      
      ValueDivide(QuitVolt, 255);
      Glcd_Write_Text(Value_Text,86,2,Black);
      Glcd_Write_Char('V',116,2,Black);

      ByteToStr(QuitTime,bytetext);
      Glcd_Write_Text(ByteText,86,3,Black);
      
     {if (CurveScan = 1) then // 1= Close
      begin
       Glcd_Write_Text(DisableText,86,4,Black);  // disable
      end else
     if (CurveScan = 2) then // 2= 9600
       Glcd_Write_Text(EnableText, 86,4,Black);// þarj}

       
     if (Bkm_Status = 0) then
        Glcd_Write_Text(DisableText,86,5,Black) else
     if (Bkm_Status = 1) then
        Glcd_Write_Text(EnableText,86,5,Black);

      
      While (MenuExit = 0) do
       begin

            asm
              clrwdt;
            end;

            if (Down_Button =0) then
              begin
                 while (Down_Button =0) do
                   begin
                        asm
                         clrwdt;
                        end;
                   end;
                 Glcd_Write_Char(' ', 0, BakimMenuSayac, Black);
                 Inc(BakimMenuSayac);
                 if (BakimMenuSayac > 6) then BakimMenuSayac := 1;
              end else
            if (Up_Button =0) then
              begin
                 while (Up_Button =0) do
                   begin
                        asm
                         clrwdt;
                        end;
                   end;
                 Glcd_Write_Char(' ', 0, BakimMenuSayac, Black);
                 Dec(BakimMenuSayac);
                 if (BakimMenuSayac < 1) then BakimMenuSayac := 6;
              end;
              
            Glcd_Write_Char('>', 0, BakimMenuSayac, Black);
            
            Glcd_Set_Font(@NewFont5x7,5,7,32);
 
            case (BakimMenuSayac) of
             1: begin  // bakým döngüsü

                     asm clrwdt; end;
                     
                     ByteToStr(ServiceCycle, CycleText);
                     ltrim(CycleText);
                     Glcd_Write_Text(CycleText,86,1,Black);
                     
                     if (Ok_Button =0) then
                      begin
                          while (Ok_Button =0) do
                           begin
                               asm
                                 clrwdt;
                               end;
                           end;
                      
                          Chng1 := 1;
                          While (Chng1 = 1) do
                            begin
                                asm
                                  clrwdt;
                                end;
                                
                                if (Up_Button =0) then
                                  begin
                                      while (Up_Button =0) do
                                        begin
                                            asm
                                              clrwdt;
                                            end;
                                        end;
                                      Inc(ServiceCycle);
                                      if (ServiceCycle > 4) then ServiceCycle := 4;
                                  end else
                                if (Down_Button =0) then
                                  begin
                                      while (Down_Button =0) do
                                        begin
                                            asm
                                              clrwdt;
                                            end;
                                        end;
                                      Dec(ServiceCycle);
                                      if (ServiceCycle < 1) then ServiceCycle := 1;
                                  end;
             
                                ByteToStr(ServiceCycle, CycleText);
                                ltrim(CycleText);
                                Glcd_Write_Text(CycleText,86,1,0);
                                Glcd_Write_Text(App_Year,92,1,0);
                                
                                if (Ok_Button =0) then
                                  begin
                                      while (Ok_Button =0) do
                                        begin
                                            asm
                                              clrwdt;
                                            end;
                                        end;
                                  
                                      Chng1 := 0;
                                      EEPROM_Write(EE_ServiceCycleEeAddr, ServiceCycle);
                                      while (NVMCON = 1) do begin end; // write/erase cycle waiting

                                      BakimSelect := 1;

                                      DateCalculator();
                                      
                                      Glcd_Write_Text(Title_BattServMenu,    0, 0, Black);
                                      Glcd_Write_Text(Subtitle_Loop,         6, 1, Black);
                                      Glcd_Write_Text(Subtitle_MaintOut,     6, 2, Black);
                                      Glcd_Write_Text(Subtitle_OutTime,      6, 3, Black);
                                      //Glcd_Write_Text(Subtitle_Curvescan,    6, 4, Black); eðri tarama iptal edildi. Deþarj sýrasýnda GTT kartý ile haberleþme kesildiði için akým bilgisi alýnamaz ve eðri tarama kontrolü yapýlamaz
                                      Glcd_Write_Text(Subtitle_MaintTime,    6, 4, Black);
                                      Glcd_Write_Text(Subtitle_Status,       6, 5, Black);
                                      Glcd_Write_Text(SubTitle_Back,         6, 6, Black);
                                      Glcd_Write_Text(app_year,             92, 1, Black);
                                      Glcd_Write_Text(App_Hour,            104, 3, Black);
                                      
                                      ByteToStr(QuitTime,bytetext);
                                      Glcd_Write_Text(bytetext,86,3,Black);
                                      
                                      Glcd_Write_Text(HourText, 92,4,Black);
                                      Glcd_Write_Text(':',104,5,black);
                                      Glcd_Write_Text(MinText, 109,4,Black);
                                      
                                      ValueDivide(QuitVolt, 255);
                                      Glcd_Write_Text(Value_Text,86,2,Black);
                                      
                                      if (Bkm_Status = 0) then
                                        Glcd_Write_Text(DisableText,86,5,Black) else
                                      if (Bkm_Status = 1) then
                                        Glcd_Write_Text(EnableText,86,5,Black);
                                        
                                      {if (CurveScan = 1) then // 1= Close
                                      begin
                                       Glcd_Write_Text(DisableText,86,4,Black);  // disable
                                      end else
                                     if (CurveScan = 2) then // 2= 9600
                                       Glcd_Write_Text(EnableText, 86,4,Black) else // þarj}

                                      

             
                                  end;
                            end;
                      end;
                end;
            
             2: begin  // bakým çýkýþ gerilimi

                     asm clrwdt; end;

                     ValueDivide(QuitVolt, 255);
                     Glcd_Write_Text(Value_Text,86,2,Black);
                     Glcd_Write_Char('V',116,2,Black);
                     
                     if (Ok_Button =0) then
                      begin
                          while (Ok_Button =0) do
                           begin
                               asm
                                 clrwdt;
                               end;
                           end;

                          Chng2 := 1;
                          While (Chng2 = 1) do
                            begin
                                asm
                                 clrwdt;
                               end;

                               if (Up_Button =0) then
                                begin
                                     asm
                                       ClrWDT;
                                     end;

                                     ButonStop       := 0;
                                     BtCounterNormal := 0;
                                     while (ButonStop = 0) do
                                      begin
                                          asm clrwdt; end;
                                      end;
                                     Inc(QuitVolt);
                                    if (QuitVolt > NominalGerilim) then QuitVolt := NominalGerilim;

                                end else
                               if (Down_Button =0) then
                                begin
                                     asm
                                       ClrWDT;
                                     end;

                                     ButonStop       := 0;
                                     BtCounterNormal := 0;
                                     while (ButonStop = 0) do
                                      begin
                                          asm clrwdt; end;
                                      end;
                                     Dec(QuitVolt);
                                     if (QuitVolt < (NominalGerilim*0.761)) then QuitVolt := (NominalGerilim*0.761);
                                end;

                                ValueDivide(QuitVolt, 255);
                                Glcd_Write_Text(Value_Text,86,2,0);
                                Glcd_Write_Char('V',116,2,0);


                                if (Ok_Button =0) then
                                  begin
                                      while (Ok_Button =0) do
                                        begin
                                            asm
                                              clrwdt;
                                            end;
                                        end;

                                      Chng2 := 0;
                                      EEPROM_Write(EE_QuitVoltEeAddr, QuitVolt);
                                      while (NVMCON = 1) do begin end; // write/erase cycle waiting


                                  end;
                            end;
                      end;




                end;

             3: begin // bakým çýkýþ saati

                     asm clrwdt; end;

                     Glcd_Write_Text(App_Hour,104,3,Black);
                     ByteToStr(QuitTime,bytetext);
                     Glcd_Write_Text(bytetext,86,3,Black);
                     
                     if (Ok_Button =0) then
                      begin

                          while (Ok_Button =0) do
                           begin
                               asm
                                 clrwdt;
                               end;
                           end;

                          Chng3 := 1;
                          While (Chng3 = 1) do
                            begin
                                asm
                                 clrwdt;
                               end;

                               if (Up_Button =0) then
                                begin
                                     asm
                                       ClrWDT;
                                     end;

                                     ButonStop       := 0;
                                     BtCounterNormal := 0;
                                     while (ButonStop = 0) do
                                      begin
                                          asm clrwdt; end;
                                      end;
                                     Inc(QuitTime);
                                     if (QuitTime > 24) then QuitTime := 24;

                                end else
                               if (Down_Button =0) then
                                begin
                                     asm
                                       ClrWDT;
                                     end;

                                     ButonStop       := 0;
                                     BtCounterNormal := 0;
                                     while (ButonStop = 0) do
                                      begin
                                          asm clrwdt; end;
                                      end;
                                     Dec(QuitTime);
                                     if (QuitTime < 1) then QuitTime := 1;
                                end;

                                ByteToStr(QuitTime,bytetext);
                                Glcd_Write_Text(bytetext,86,3,0);
                                Glcd_Write_Text(App_Hour,104,3,0);


                                if (Ok_Button =0) then
                                  begin
                                      while (Ok_Button =0) do
                                        begin
                                            asm
                                              clrwdt;
                                            end;
                                        end;

                                      Chng3 := 0;
                                      EEPROM_Write(EE_QuitTimeEeAddr, QuitTime);
                                      while (NVMCON = 1) do begin end; // write/erase cycle waiting


                                  end;
                            end;
                      end;



                end;
             { eðri tarama iptal edildi. Deþarj sýrasýnda GTT kartý ile haberleþme kesildiði için akým bilgisi alýnamaz ve eðri tarama kontrolü yapýlamaz
             4: begin // þarj/deþarj eðrisi tarama

                     asm clrwdt; end;

                     if (CurveScan = 1) then // 1= Close
                      begin
                       Glcd_Write_Text(DisableText,86,4,Black);  // disable
                      end else
                     if (CurveScan = 2) then // 2= 9600
                       Glcd_Write_Text(EnableText, 86,4,Black); // þarj


                      if (Ok_Button =0) then
                       begin

                           while (Ok_Button =0) do
                            begin
                                asm
                                  clrwdt;
                                end;
                            end;

                            Chng4 := 1;
                            While (Chng4 = 1)do
                             begin
                                 asm
                                   ClrWDT;
                                 end;

                                 if (Up_Button =0) then
                                  begin

                                      while (Up_Button =0) do
                                       begin
                                           asm
                                             ClrWDT;
                                           end;
                                       end;
                                      Inc(CurveScan);
                                      if (CurveScan > 2) then CurveScan := 1; // Close,charge,discharge
                                  end else
                                 if (Down_Button =0) then
                                  begin

                                      while (Down_Button =0) do
                                       begin
                                           asm
                                             ClrWDT;
                                           end;
                                       end;
                                      Dec(CurveScan);
                                      if (CurveScan < 1) then CurveScan := 2; // Close,charge,discharge
                                  end;

                                  if (CurveScan = 1) then // 1= Close
                                    begin
                                     Glcd_Write_Text(DisableText,86,4,0);  // disable
                                    end else
                                  if (CurveScan = 2) then // þarj
                                     Glcd_Write_Text(EnableText, 86,4,0);




                                 if (Ok_Button =0) then
                                  begin

                                      while (Ok_Button =0) do
                                       begin
                                           asm
                                             clrwdt;
                                           end;
                                       end;

                                      Chng4 := 0;
                                      EEPROM_Write(EE_CurveScanEeAddr, CurveScan);
                                      while (NVMCON = 1) do begin end; // write/erase cycle waiting

                                  end;
                             end;
                       end;



                end;  }

             4: begin  // bakým giriþ saati

                     asm clrwdt; end;

                     HourText[1]  := (Bkm_Hour div 10)+48;
                     HourText[2]  := (Bkm_Hour mod 10)+48;
                     MinText[1]   := (Bkm_Min div 10)+48;
                     MinText[2]   := (Bkm_Min mod 10)+48;

                     Glcd_Write_Text(HourText, 92,4,Black);
                     Glcd_Write_Text(':',104,4,black);
                     Glcd_Write_Text(MinText, 109,4,Black);
                     
                     if (Ok_Button =0) then
                       begin

                           while (Ok_Button =0) do
                            begin
                                asm
                                  clrwdt;
                                end;
                            end;

                            Chng5 := 1;
                            While (Chng5 = 1) do
                             begin
                                 asm
                                   ClrWDT;
                                 end;

                                 if (Up_Button =0) then
                                  begin

                                      ButonStop       := 0;
                                     BtCounterNormal := 0;
                                     while (ButonStop = 0) do
                                      begin
                                          asm clrwdt; end;
                                      end;
                                       
                                      Bkm_Min := Bkm_Min + 15; // 15 dk bir artýr
                                      if (Bkm_Min > 55) then
                                        begin
                                            Bkm_Min := 0;
                                            Inc(Bkm_Hour);
                                            if (Bkm_Hour > 23) then Bkm_Hour := 0;
                                        end;

                                  end else
                                 if (Down_Button =0) then
                                  begin

                                     ButonStop       := 0;
                                     BtCounterNormal := 0;
                                     while (ButonStop = 0) do
                                      begin
                                          asm clrwdt; end;
                                      end;
                                      Bkm_Min := Bkm_Min - 15; // 15 dk bir azalt
                                      if (Bkm_Min < 5) then
                                        begin
                                            Bkm_Min := 55;
                                            Dec(Bkm_Hour);
                                            if (Bkm_Hour < 1) then Bkm_Hour := 23;
                                        end;
                                  end;

                                  HourText[1]  := (Bkm_Hour div 10)+48;
                                  HourText[2]  := (Bkm_Hour mod 10)+48;
                                  MinText[1]   := (Bkm_Min div 10)+48;
                                  MinText[2]   := (Bkm_Min mod 10)+48;

                                  Glcd_Write_Text(HourText, 92,4,0);
                                  Glcd_Write_Text(':',104,4,0);
                                  Glcd_Write_Text(MinText, 109,4,0);
                                  
                                  Bakim_Start_Time := Bkm_Hour * 100;
                                  Bakim_Start_Time := Bakim_Start_Time + Bkm_Min;



                                 if (Ok_Button =0) then
                                  begin

                                      while (Ok_Button =0) do
                                       begin
                                           asm
                                             clrwdt;
                                           end;
                                       end;

                                      Chng5 := 0;
                                      EEPROM_Write(EE_BkmStartTimeEeAddr, Bakim_Start_Time);
                                      while (NVMCON = 1) do begin end; // write/erase cycle waiting

                                  end;
                             end;
                       end;
                     
                     



                end;

             5: begin // baþlat/bitir

                     asm clrwdt; end;
                     
                     if (Bkm_Status = 0) then
                        Glcd_Write_Text(DisableText,86,5,Black) else
                     if (Bkm_Status = 1) then
                        Glcd_Write_Text(EnableText,86,5,Black);

                   asm
                     clrwdt;
                   end;

                   if (Ok_Button =0) then
                     begin



                         while (Ok_Button =0) do
                           begin
                               asm
                                 clrwdt;
                               end;
                           end;

                         Chng6 := 1;

                         While (Chng6 = 1) do
                          begin
                               asm
                                clrwdt;
                               end;
                               if ((Up_Button =0)or(Down_Button =0)) then
                                 begin
                                    while ((Up_Button =0)or(Down_Button =0)) do
                                      begin
                                          asm
                                            clrwdt;
                                          end;
                                      end;
                                      
                                    Bkm_Status := not Bkm_Status ;

                                 end;


                               if (Bkm_Status = 0) then
                                  Glcd_Write_Text(DisableText,86,5,0) else
                               if (Bkm_Status = 1) then
                                  Glcd_Write_Text(EnableText,86,5,0);

                               if (Ok_Button =0) then
                                 begin



                                      while (Ok_Button=0) do
                                        begin
                                            asm
                                              clrwdt;
                                            end;
                                        end;

                                      Chng6 := 0;
                                      EEPROM_Write(EE_BkmStatusEeAddr,Bkm_Status);
                                      while (NVMCON = 1) do begin end; // write/erase cycle waiting

                                 end;

                          end;

                     end;



                end;

             6: begin // geri

                     asm
                       clrwdt;
                     end;
                     
                     if (Ok_Button =0) then
                     begin


                         while (Ok_Button =0) do
                           begin
                               asm
                                 clrwdt;
                               end;
                           end;

                         MenuExit := 1;

                     end;
                end;
            end;
 
 
       end;
       
       Service1_Date    := EEPROM_Read(EE_Service1EeAddr);
       Pause_Ms(50); asm clrwdt; end;
       Service2_Date    := EEPROM_Read(EE_Service2EeAddr);
       Pause_Ms(50); asm clrwdt; end;
       Service3_Date    := EEPROM_Read(EE_Service3EeAddr);
       Pause_Ms(50); asm clrwdt; end;
       Service4_Date    := EEPROM_Read(EE_Service4EeAddr);
       Pause_Ms(50); asm clrwdt; end;
       
       QuitTime_Sec := (QuitTime * 3600000);// çýkýþ zamaný saat olarak // 1ms timer için 1 sýfýr daha atýldý, GAR24-L' de 10ms timer da 1 sýfýr eksik
       ///QuitTime_Sec := (70 * 100);// denemek için
       Glcd_Fill(0x00);
 
 end;

end.